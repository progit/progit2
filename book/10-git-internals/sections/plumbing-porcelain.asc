[[_plumbing_porcelain]]
=== Plumbing and Porcelain

This book covers how to use Git with 30 or so subcommands such as `checkout`, `branch`, `remote`, and so on.
But because Git was initially a toolkit for a VCS rather than a full user-friendly VCS, it has a
bunch of subcommands that do low-level work and were designed to be chained together UNIX-style or
called from scripts. These low-level commands are generally referred to as `plumbing` commands,
and the higher-level, more user-friendly commands are called `porcelain` commands.

The book's first nine chapters deal almost exclusively with porcelain commands.
But in this chapter, we mostly cover plumbing commands because they give you access to the inner workings of Git and help demonstrate how and why Git does what it does.
Many of these commands aren't meant to be used manually on the command line, but rather to be used as building blocks for new tools and custom scripts.

When you run `git init`, Git creates the `.git` directory, which is where almost everything that Git
manages is located. To back up or clone your repository, copying this single directory is all you need to do.
This entire chapter basically deals with the stuff in this directory.
Here's what it looks like.

[source,console]
----
$ ls -F1
config
description
HEAD
hooks/
info/
objects/
refs/
----

You may see some other files, but this is what `git init` creates.
The `description` file is only used by the GitWeb program, so don't worry about it.
The `config` file contains your project-specific configuration options, and the `info` directory keeps
a global exclude file (((excludes))) for filename patterns to ignore that you don't want to track
in a `.gitignore` file. The `hooks` directory contains your client- or server-side hook scripts,
which are discussed in detail in <<_git_hooks>>.

This leaves four important entries -- the `HEAD` and (yet to be created) `index` files, and the `objects` and
`refs` directories. These are the core parts of Git.
The `objects` directory stores all the content in your repository, the `refs` directory stores pointers
to commits in the `objects` directory (branches, tags, remotes, and more), the `HEAD` file points to the
branch you currently have checked out, and the `index` file is where Git stores your staging area information.
We now look at each of these sections in detail to see how Git operates.
