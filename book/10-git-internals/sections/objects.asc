[[_objects]]
=== Git Objects

Git is a content-addressable filesystem.
Great.
What does that mean?
It means that at its core, Git is a simple key-value data store.
You can insert any kind of content into it, and Git gives back a key to use to retrieve the content later.
To demonstrate, run the plumbing command `git hash-object`, which takes some data, stores it in your Git
repository, and gives back the key to the data.

First, initialize a new Git repository and verify that there's
nothing in the `objects` directory.

[source,console]
----
$ git init test
Initialized empty Git repository in /tmp/test/.git/
$ cd test
$ find .git/objects
.git/objects
.git/objects/info
.git/objects/pack
$ find .git/objects -type f
----

Git has initialized the `objects` directory and created `pack` and `info` subdirectories in it, but there
are no regular files. Now, store some text in your Git repository.

[source,console]
----
$ echo 'test content' | git hash-object -w --stdin
d670460b4b4aece5915caf5c68d12f560a9fe3e4
----

The `-w` flag tells `git hash-object` to store an object. Otherwise, the command simply shows what the key would be.
`--stdin` says to read the content from stdin. Without this, `git hash-object` expects a file path
as the last command line parameter. The output is a 40-character SHA-1 hash.
This is a hash of the content you're storing, plus a header, which you learn about in a bit.
Now you see how Git has stored your data.

[source,console]
----
$ find .git/objects -type f
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4
----

You now see a new directory ('d6') and file ('70460b4b4aece5915caf5c68d12f560a9fe3e4) in the `objects` directory.
This is how Git stores the content initially -- as a single file for each piece of content, named with the
hash of the content and a header. The subdirectory containing the object has the first 2 characters of the
hash as its name, and the filename is the remaining 38 characters.

You can pull the content back out by running `git cat-file`.
This command is sort of a Swiss army knife for inspecting Git objects.
Passing `-p` instructs `git cat-file` to figure out the type of content and display it nicely.

[source,console]
----
$ git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4
test content
----

Now, you can add content to Git and pull it back out again.
For example, you can do some simple version control on a file.
First, create a new file and save its content in the repository.

[source,console]
----
$ echo 'version 1' > test.txt
$ git hash-object -w test.txt
83baae61804e65cc73a7201a7252750c76066a30
----

Then, write some new content to the file, and save it again.

[source,console]
----
$ echo 'version 2' > test.txt
$ git hash-object -w test.txt
1f7a7a472abf3dd9643fd615f6da379c4acb3e3a
----

Your repository now contains both versions of this new file, as well as the first content you stored there.

[source,console]
----
$ find .git/objects -type f
.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a
.git/objects/83/baae61804e65cc73a7201a7252750c76066a30
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4
----

At this point, you can delete `test.txt`, then retrieve from the repository, either the first version you saved,

[source,console]
----
$ git cat-file -p 83baae61804e65cc73a7201a7252750c76066a30 > test.txt
$ cat test.txt
version 1
----

or the second version.

[source,console]
----
$ git cat-file -p 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a > test.txt
$ cat test.txt
version 2
----

But remembering the hash for each version of your file isn't practical. Plus, you aren't storing the
filename -- just the content. What you're storing is an object type called a blob, which is similar to a file.
Git can tell you the object type of any object, given its hash, when you run `git cat-file -t`.

[source,console]
----
$ git cat-file -t 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a
blob
----

[[_tree_objects]]
==== Tree Objects

The next object type we look at is a tree, which solves the problem of storing a filename. It also stores a
group of files together. Git stores content in a manner similar to a simplified UNIX filesystem.
All content is stored as trees and blobs, with trees corresponding to UNIX directories, and blobs
corresponding to files. A single tree object contains one or more entries, each containing the hash
of a blob or tree with an associated mode, type, and filename. For example, the most recent tree in a project
may look something like

[source,console]
----
$ git cat-file -p master^{tree}
100644 blob a906cb2a4a904a152e80877d4088654daad0c859      README
100644 blob 8f94139338f9404f26296befa88755fc2598c289      Rakefile
040000 tree 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0      lib
----

The `master^{tree}` syntax specifies the tree object that's pointed to by the last commit on `master`.
Notice that the `lib` subdirectory isn't a blob but a pointer to another tree.

[source,console]
----
$ git cat-file -p 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0
100644 blob 47c6340d6459e05787f644c2447d2595f5d3a54b      simplegit.rb
----

[NOTE]
====
Depending on the shell you use, you may encounter errors when using the `master^{tree}` syntax.

In CMD.EXE on Windows, the `^` character is used for escaping, so you have to double it to avoid this: `git cat-file -p master^^{tree}`.
When using PowerShell on Windows, flags using `{}` characters have to be quoted to prevent the flag from being parsed incorrectly: `git cat-file -p 'master^{tree}'`.

If you're using `zsh`, the `^` character is used for globbing, so you have to enclose the whole expression in quotes: `git cat-file -p "master^{tree}"`.
====

Conceptually, the data that Git stores looks something like

.Simple version of the Git data model
image::images/data-model-1.png[Simple version of the Git data model]

You can easily create your own tree. Git normally creates a tree by taking the state of your staging
area and writing a series of tree objects that correspond to the state. So, to create a tree object,
first stage some files. To create a staging area containing a single entry -- the first version of
your `test.txt` file -- run the plumbing command `git update-index`. Run this command to artificially
add the earlier version of the `test.txt` file to the staging area. You must pass the `--add` flag
because the file doesn't yet exist in your staging area (you don't even have a staging area set up yet),
and `--cacheinfo` because the file you're adding isn't in your directory but is in your repository.
Then, specify the mode, hash, and filename.

[source,console]
----
$ git update-index --add --cacheinfo 100644 \
  83baae61804e65cc73a7201a7252750c76066a30 test.txt
----

In this case, you're specifying a mode of `100644`, which means the file you're adding is a normal file.
Other options are `100755`, which means it's an executable file, and `120000`, which specifies a symbolic link.
The mode is taken from normal UNIX modes but is much less flexible. These three modes are the only ones
that are valid for blobs representing files (although other modes are used for directories and submodules).

Now, run `git write-tree` to write the staging area out as a tree object.
No `-w` flag is needed -- running `git write-tree` automatically creates a tree object from the state of
the staging area if that tree doesn't exist yet.

[source,console]
----
$ git write-tree
d8329fc1cc938780ffdd9f94e0d364e0ea74f579
$ git cat-file -p d8329fc1cc938780ffdd9f94e0d364e0ea74f579
100644 blob 83baae61804e65cc73a7201a7252750c76066a30      test.txt
----

You can also verify that this is a tree object by running the same `git cat-file` command you ran earlier.

[source,console]
----
$ git cat-file -t d8329fc1cc938780ffdd9f94e0d364e0ea74f579
tree
----

You now create a new tree with the second version of `test.txt` and a new file as well.

[source,console]
----
$ echo 'new file' > new.txt
$ git update-index --cacheinfo 100644 \
  1f7a7a472abf3dd9643fd615f6da379c4acb3e3a test.txt
$ git update-index --add new.txt
----

Your staging area now has the new version of `test.txt` as well as the new file `new.txt`.
Write out that tree (recording the state of the staging area to a tree object) and see what it looks like.

[source,console]
----
$ git write-tree
0155eb4229851634a0f03eb265b69f5a2d56f341
$ git cat-file -p 0155eb4229851634a0f03eb265b69f5a2d56f341
100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt
100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a      test.txt
----

Notice that this tree has both blob entries and also that the hash of `test.txt` is the `version 2` hash from earlier (`1f7a7a`).
Just for fun, add the first tree as a subdirectory into this one.
You can put trees into your staging area by running `git read-tree`.
In this case, you can put an existing tree into your staging area as a subtree by adding the `--prefix` flag to `git read-tree`.

[source,console]
----
$ git read-tree --prefix=bak d8329fc1cc938780ffdd9f94e0d364e0ea74f579
$ git write-tree
3c4e9cd789d88d8d89c1073707c3585e41b0e614
$ git cat-file -p 3c4e9cd789d88d8d89c1073707c3585e41b0e614
040000 tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579      bak
100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt
100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a      test.txt
----

If you created a working directory from the new tree you just wrote, you'd get the two files in the top level of the working directory and a subdirectory named `bak` that contains the first version of `test.txt`.
You can think of the repository as looking like

.The content structure of your current Git data
image::images/data-model-2.png[The content structure of your current Git data]

[[_git_commit_objects]]
==== Commit Objects

You have three trees that specify the different snapshots of your project that you want to track,
but the earlier problem remains. You must remember all three hashes in order to retrieve the snapshots.
You also don't have any information about who saved the snapshots, when they were saved, or why they were saved.
This is the information that the commit object stores.

To create a commit object, run `git commit-tree` and specify a single tree hash and which commit objects,
if any, directly preceded it. Start with the first tree you wrote.

[source,console]
----
$ echo 'First commit' | git commit-tree d8329f
fdf4fc3344e67ab068f836878b6c4951e3b15f3d
----

[NOTE]
====
You get a different hash because the creation time and author are different in your commit.
====

Now look at your new commit object by running `git cat-file`.

[source,console]
----
$ git cat-file -p fdf4fc3
tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579
author Scott Chacon <schacon@gmail.com> 1243040974 -0700
committer Scott Chacon <schacon@gmail.com> 1243040974 -0700

First commit
----

The format for a commit object is simple. It specifies the top-level tree for the snapshot of the project
at that point, the author/committer information (which uses your `user.name` and `user.email` configuration
settings and a timestamp), a blank line, and then the commit message.

Next, write the other two commit objects, each referencing the commit that came directly before it.

[source,console]
----
$ echo 'Second commit' | git commit-tree 0155eb -p fdf4fc3
cac0cab538b970a37ea1e769cbbde608743bc96d
$ echo 'Third commit'  | git commit-tree 3c4e9c -p cac0cab
1a410efbd13591db07496601ebc7a059dd55cfe9
----

Each of the three commit objects points to one of the three snapshot trees you created.
Oddly enough, you have a real Git history now that you can view with the `git log` command, if you run it on the last commit hash.

[source,console]
----
$ git log --stat 1a410e
commit 1a410efbd13591db07496601ebc7a059dd55cfe9
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri May 22 18:15:24 2009 -0700

	Third commit

 bak/test.txt | 1 +
 1 file changed, 1 insertion(+)

commit cac0cab538b970a37ea1e769cbbde608743bc96d
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri May 22 18:14:29 2009 -0700

	Second commit

 new.txt  | 1 +
 test.txt | 2 +-
 2 files changed, 2 insertions(+), 1 deletion(-)

commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri May 22 18:09:34 2009 -0700

    First commit

 test.txt | 1 +
 1 file changed, 1 insertion(+)
----

Amazing.
You've just performed the low-level operations to build a Git history without using any of the porcelain commands.
This is essentially what Git does when you run `git add` and `git commit`. It stores blobs for the files
that have changed, updates the staging area, writes out trees, and writes commit objects that reference
the top-level trees and the commits that came immediately before them. These three main Git objects -- the blob,
the tree, and the commit -- are initially stored as separate files in the `.git/objects` directory.
Here are all the objects in the example directory now, commented with what they store.

[source,console]
----
$ find .git/objects -type f
.git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # tree 2
.git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit 3
.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a # test.txt v2
.git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 # tree 3
.git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt v1
.git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d # commit 2
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 # 'test content'
.git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # tree 1
.git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt
.git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d # commit 1
----

If you follow all the internal pointers, you get an object graph that looks something like

.All the reachable objects in your Git directory
image::images/data-model-3.png[All the reachable objects in your Git directory]

==== Object Storage

We mentioned earlier that there's a header stored with every object you commit.
Let's take a minute to see how Git stores committed objects.
You'll see how to store a blob object -- in this case, the string "`what is up, doc?`" -- interactively in the Ruby scripting language.

Start interactive Ruby by running `irb.

[source,console]
----
$ irb
>> content = "what is up, doc?"
=> "what is up, doc?"
----

Git constructs a header that starts with the type of the object, in this case a blob.
Then, it adds a space followed by the size of the content and finally a null byte:

[source,console]
----
>> header = "blob #{content.bytesize}\0"
=> "blob 16\u0000"
----

Git concatenates the header and the original content, and then calculates the hash of that new content.
You can calculate the hash of a string in Ruby by including the SHA1 digest library with the `require` command and then calling `Digest::SHA1.hexdigest()` with the string to hash.

[source,console]
----
>> store = header + content
=> "blob 16\u0000what is up, doc?"
>> require 'digest/sha1'
=> true
>> sha1 = Digest::SHA1.hexdigest(store)
=> "bd9dbf5aae1a3862dd1526723246b20206e5fc37"
----

Let's compare that to the output of `git hash-object`.
Here we run `echo -n` to prevent adding a newline to the input.

[source,console]
----
$ echo -n "what is up, doc?" | git hash-object --stdin
bd9dbf5aae1a3862dd1526723246b20206e5fc37
----

Git compresses the new content with zlib, which you can do in Ruby with the zlib library.
First, require the library and then run `Zlib::Deflate.deflate()` on the content.

[source,console]
----
>> require 'zlib'
=> true
>> zlib_content = Zlib::Deflate.deflate(store)
=> "x\x9CK\xCA\xC9OR04c(\xCFH,Q\xC8,V(-\xD0QH\xC9O\xB6\a\x00_\x1C\a\x9D"
----

Finally, write your zlib-deflated content to an object.
Determine the path of the object you want to write (the first two characters of the hash
being the subdirectory name, and the last 38 characters being the filename within that directory).
In Ruby, you can use the `FileUtils.mkdir_p()` function to create the subdirectory if it doesn't exist.
Then, open the file with `File.open()` and write the previously zlib-compressed content to the file
with a `write()` call on the resulting file handle.

[source,console]
----
>> path = '.git/objects/' + sha1[0,2] + '/' + sha1[2,38]
=> ".git/objects/bd/9dbf5aae1a3862dd1526723246b20206e5fc37"
>> require 'fileutils'
=> true
>> FileUtils.mkdir_p(File.dirname(path))
=> ".git/objects/bd"
>> File.open(path, 'w') { |f| f.write zlib_content }
=> 32
----

Let's check the content of the object running `git cat-file`.

[source,console]
---
$ git cat-file -p bd9dbf5aae1a3862dd1526723246b20206e5fc37
what is up, doc?
---

That's it – you've created a valid Git blob object.

All Git objects are stored the same way, just with different types. Instead of `blob`, the header
begins with `commit` or `tree`. Also, although the blob content can be nearly anything, the commit
and tree content are very specifically formatted.
