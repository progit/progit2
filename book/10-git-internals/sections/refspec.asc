[[_refspec]]
=== The Refspec

Throughout this book, we've used simple mappings from remote branches to local references, but they can
be more complex. Suppose you add a remote like this.

[source,console]
----
$ git remote add origin https://github.com/schacon/simplegit-progit
----

This adds a section to your `.git/config` file, specifying the name of the remote (`origin`), the URL
of the remote repository, and the refspec for fetching.

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/*:refs/remotes/origin/*
----

The format of the refspec is an optional `+`, followed by `<src>:<dst>`, where `<src>` is the
pattern for references on the remote side and `<dst>` is where those references are written locally.
The `+` tells Git to update the reference even if it isn't a fast-forward.

The default behavior that's carried out by `git remote add origin` is to fetch all the references under `refs/heads/`
on the server and write them to `refs/remotes/origin/` locally. So, if there's a `master` on the server,
you can access the log of that branch locally by running

[source,console]
----
$ git log origin/master
$ git log remotes/origin/master
$ git log refs/remotes/origin/master
----

They're all equivalent, because Git expands each of them to `refs/remotes/origin/master`.

For Git instead to pull only `master` each time, and not every other branch on the remote server,
change the fetch line to

[source]
----
fetch = +refs/heads/master:refs/remotes/origin/master
----

This is just the default refspec for `git fetch` for that remote.
To do something one time, specify the refspec on the command line.
To pull `master` on the remote down to `origin/mymaster` locally, run

[source,console]
----
$ git fetch origin master:refs/remotes/origin/mymaster
----

You can also specify multiple refspecs.
On the command line, you can pull down several branches.

[source,console]
----
$ git fetch origin master:refs/remotes/origin/mymaster \
	 topic:refs/remotes/origin/topic
From git@github.com:schacon/simplegit
 ! [rejected]        master     -> origin/mymaster  (non fast forward)
 * [new branch]      topic      -> origin/topic
----

In this case, the `master` pull was rejected because it wasn't a fast-forward reference.
You can override that by including the `+` in front of the refspec.

You can also specify multiple refspecs for fetching in your configuration file.
To always fetch `master` and the experiment branches, add two lines.

[[_segmenting_refspecs]]
==== Segmenting Refspecs

You can also specify multiple refspecs for fetching in your configuration file.
To always fetch the `master` and `experiment` branches from the `origin` remote, add two lines.

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/master:refs/remotes/origin/master
	fetch = +refs/heads/experiment:refs/remotes/origin/experiment
----

Since Git 2.6.0, you can use partial globs in the pattern to match multiple branches.

[source,ini]
----
fetch = +refs/heads/qa*:refs/remotes/origin/qa*
----

Even better, you can use namespaces (or directories) to accomplish the same thing.
If you have a QA team that pushes a series of branches, and you want to get `master` and any of the QA team's branches but nothing else, use a config section like

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/master:refs/remotes/origin/master
	fetch = +refs/heads/qa/*:refs/remotes/origin/qa/*
----

Since Git 2.29.0, you can also explicitly exclude patterns.
Negative refspecs start with a `^` and don't include the remote.
To get all the branches that don't start with an underscore, use a config like

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/*:refs/remotes/origin/*
	fetch = ^refs/heads/_*
----

If you have a complex workflow that has a QA team pushing branches, developers pushing branches, and integration teams pushing and collaborating on remote branches, you can manage them with patterns like

[[_pushing_refspecs]]
==== Pushing Refspecs

It's nice that you can fetch namespaced references that way, but how does the QA team get their branches into a `qa/` namespace in the first place?
You accomplish that by using refspecs to push.

If the QA team wants to push their `master` to `qa/master` on the remote server, they run

[source,console]
----
$ git push origin master:refs/heads/qa/master
----

If they want Git to do that automatically each time they run `git push origin`, they add a `push` value to their config file.

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/*:refs/remotes/origin/*
	push = refs/heads/master:refs/heads/qa/master
----

Again, this causes `git push origin` to push the local `master` to the remote `qa/master` by default.

[NOTE]
====
You can't use the refspec to fetch from one repository and push to another.
For an example of how to do this, refer to <<ch06-github#_fetch_and_push_on_different_repositories>>.
====

==== Deleting References

You can also use the refspec to delete references from the remote server by running something like

[source,console]
----
$ git push origin :topic
----

Because the refspec is `<src>:<dst>`, by leaving off the `<src>` part, this basically says to make `topic` on the remote nothing, which deletes it.

Or you can use the newer syntax (available since Git v1.7.0):

[source,console]
----
$ git push origin --delete topic
----
