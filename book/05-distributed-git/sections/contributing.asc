[[_contributing_project]]
=== Contributing to a Project

(((contributing)))
The main difficulty with describing how to contribute to a project is that there are a huge number of ways to do it.
Because Git is very flexible, people can and do work together in many ways, and it's difficult to describe how
to contribute -- every project is different.
Some of the relevant considerations are active contributor count, chosen workflow, commit access permissions,
and possibly the external contribution method.

The first consideration is active contributor count -- how many users actively contribute to this project, and how often?
You often have two or three developers making a few commits a day, or possibly fewer for dormant projects.
For larger projects, the number of developers could be in the thousands, with hundreds or thousands of commits each day.
This is important because with more and more developers, you run into more issues making sure changes
can be easily merged. Changes you submit may be rendered obsolete or severely broken by work that was
merged in while you were working, while your changes were waiting for approval, or while they were waiting to be applied.
How can you keep your code consistently up to date and your commits valid?

The next consideration is the project's workflow.
Is it centralized, with each developer having write access to the main codeline?
Does the project have a maintainer or integration manager who checks all the patches?
Are all the patches peer-reviewed and approved?
Are you involved in that process?
Is a lieutenants workflow being used, and do you have to submit your work to them first?

The next consideration is commit access.
The workflow required to contribute to a project is much different if you have write access than if you don't.
If you don't have write access, how does the project prefer to accept contributed work?
Does it even have a policy? How much work do you contribute at a time? How often do you contribute?

The answers to all these questions can affect how you contribute effectively to a project and what workflows are preferred
or available to you. We cover aspects of each of these in a series of use cases,
moving from simple to more complex.
You should be able to construct the specific workflows you need in practice from these examples.

[[_commit_guidelines]]
==== Commit Guidelines

Before we start looking at specific use cases, here's a quick note about commits.
Having a good guideline for making commits and sticking to it makes working with Git and
collaborating with others a lot easier.
The Git project provides a document that lays out a number of good tips for making commits.
Read it in the Git source code in `Documentation/SubmittingPatches`.

(((git commands, diff, check)))
First, don't submit any whitespace errors.
Git provides an easy way to check for them. Before you commit, run `git diff --check`,
which identifies possible whitespace errors.

.Output of `git diff --check`
image::images/git-diff-check.png[Output of `git diff --check`]

By running that command before committing, you can tell if your commit contains whitespace
issues that may annoy other developers.

Next, try to make each commit logically separate.
If you can, try to make your changes digestible. Don't code for a whole weekend on five different
issues and then submit all the changes as one massive commit on Monday.
Even if you don't commit during the weekend, use the staging area on Monday to split your work into
at least one commit per issue, with a useful message per commit.
If some of the changes modify the same file, try to run `git add --patch` to partially stage files
(covered in detail in <<ch07-git-tools#_interactive_staging>>).
The latest version of the project is identical whether you make one commit or five, as long
as all the changes are added at some point, so try to make things easier on your fellow developers
when they review your changes.

This approach also makes it easier to revert one of the commits later.
<<ch07-git-tools#_rewriting_history>> describes a number of useful Git tricks for rewriting history
and interactively staging files. Use these to help craft a clean and understandable history before
sending the work to someone else.

The last thing to keep in mind is the commit message.
Getting in the habit of creating quality commit messages makes collaborating with Git a lot easier.
As a general rule, your messages should start with a single line that's no more than about 50
characters long that describes the change concisely, followed by a blank line, followed by a
more detailed explanation. The Git project requires that the more detailed explanation include your
motivation for the change and that you contrast its implementation with previous behavior.
This is a good guideline to follow.
It's also a good idea to use the imperative present tense in these messages.
Instead of `I added tests for` or `Adding tests for,` use `Add tests for.`
Here's a https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html[sample commit comment originally
written by Tim Pope]:

[source,text]
----
Capitalized, short (50 chars or fewer) summary

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely). Tools like rebase can get confused if you run
the two together.

Write your commit message in the imperative, e.g.  "Fix bug" and not "Fixed bug"
or "Fixes bug."  This convention matches up with commit messages generated
by commands like `git merge` and `git revert`.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, preceded by a single space,
  with blank lines in between, but conventions vary here

- Use a hanging indent
----

If all your commit messages look like this, things are a lot easier for you and the developers you work with.
The Git project has well-formatted commit messages. Run `git log --no-merges` in the
Git source repository to see what a nicely formatted project commit history looks like.

[NOTE]
.Do as we say, not as we do.
====
For the sake of brevity, many of the examples in this book don't have nicely-formatted commit messages like this. Instead, we simply use the `-m` flag to `git commit`.

In short, do as we say, not as we do.
====

[[_private_team]]
==== Private Small Team

(((contributing, private small team)))
The simplest setup you're likely to encounter is a private project with one or two other developers.
Private, in this case, means closed-source -- not accessible to the outside world.
You and the other developers all have push access to the repository.

In this environment, you can follow a workflow similar to when using Subversion or other CVCS.
You still enjoy the advantages of Git for things like offline commits and vastly simpler branching and merging,
but the workflow can be very similar. The main difference is that merges happen at commit
time on the client rather than on the server.
Let's see what might happen when two developers start to work together with a shared repository.
The first developer, John, clones the repository, makes a change, and commits locally.
(The protocol messages have been replaced with `...` in these examples to shorten them.)

[source,console]
----
# John's Machine
$ git clone john@githost:simplegit.git
Cloning into 'simplegit'...
...
$ cd simplegit/
$ vim lib/simplegit.rb
$ git commit -am 'Remove invalid default value'
[master 738ee87] Remove invalid default value
 1 files changed, 1 insertions(+), 1 deletions(-)
----

The second developer, Jessica, does the same thing -- clones the repository, makes a change,
and commits it locally.

[source,console]
----
# Jessica's Machine
$ git clone jessica@githost:simplegit.git
Cloning into 'simplegit'...
...
$ cd simplegit/
$ vim TODO
$ git commit -am 'Add reset task'
[master fbff5bc] Add reset task
 1 files changed, 1 insertions(+), 0 deletions(-)
----

Now, Jessica pushes her work to the server.

[source,console]
----
# Jessica's Machine
$ git push origin master
...
To jessica@githost:simplegit.git
   1edee6b..fbff5bc  master -> master
----

John tries to push his change too.

[source,console]
----
# John's Machine
$ git push origin master
To john@githost:simplegit.git
 ! [rejected]        master -> master (non-fast forward)
error: failed to push some refs to 'john@githost:simplegit.git'
----

John isn't allowed to push because Jessica did so first.
This is especially important to understand if you're used to Subversion, because notice
that the two developers didn't edit the same file.
Although Subversion automatically does such a merge on the server if different files are edited,
in Git you must first merge the commits locally.
John has to fetch Jessica's changes and merge them before he's allowed to push.

As a first step, John fetches Jessica's work (this only _fetches_ Jessica's upstream work, it does not yet merge it into John's work):

[source,console]
----
$ git fetch origin
...
From john@githost:simplegit
 + 049d078...fbff5bc master     -> origin/master
----

At this point, John's local repository looks something like

.John's divergent history
image::images/small-team-1.png[John's divergent history]

John has a reference to the changes Jessica pushed, but he has to merge them into his own work
before he is allowed to push.

[source,console]
----
$ git merge origin/master
Merge made by the 'recursive' strategy.
 TODO |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)
----

The merge goes smoothly. John's commit history now looks like

.John's repository after merging `origin/master`
image::images/small-team-2.png[John's repository after merging `origin/master`]

Now, John can test his code to make sure it still works properly, and then he can push
his new merged commits to the server.

[source,console]
----
$ git push origin master
...
To john@githost:simplegit.git
   fbff5bc..72bbc59  master -> master
----

Finally, John's commit history looks like

.John's history after pushing to the `origin` server
image::images/small-team-3.png[John's history after pushing to the `origin` server]

In the meantime, Jessica has been working on a topic branch
called `issue54` and has made three commits.
She hasn't fetched John's changes yet, so her commit history looks like

.Jessica's topic branch
image::images/small-team-4.png[Jessica's topic branch]

Suddenly, Jessica learns that John has pushed some new work to the server that she wants to take a look at it, so she fetches all new content from the server that she doesn't have yet.

[source,console]
----
# Jessica's Machine
$ git fetch origin
...
From jessica@githost:simplegit
   fbff5bc..72bbc59  master     -> origin/master
----

That pulls the work John has pushed in the meantime.
Jessica's history now looks like

.Jessica's history after fetching John's changes
image::images/small-team-5.png[Jessica's history after fetching John's changes]

Jessica thinks her topic branch is ready, but she wants to know what she has to merge into her work
so that she can push. She runs `git log` to find out.

[source,console]
----
$ git log --no-merges issue54..origin/master
commit 738ee872852dfaa9d6634e0dea7a324040193016
Author: John Smith <jsmith@example.com>
Date:   Fri May 29 16:01:27 2009 -0700

   Remove invalid default value
----

The `issue54..origin/master` syntax is a log filter that tells Git to only show the commits
that are on the latter branch (in this case `origin/master`) that aren't on the first branch
(in this case `issue54`). We go over this syntax in detail in <<ch07-git-tools#_commit_ranges>>.

For now, we see from the output that there's a single commit that John made that Jessica hasn't merged.
If she merges `origin/master`, that's the single commit that modifies her local work.

Now, Jessica can merge her topic work into her `master`, merge John's work (`origin/master`) into
her `master`, and then push to the server again.

First, she switches back to her `master` to integrate all this work.

[source,console]
----
$ git checkout master
Switched to branch 'master'
Your branch is behind 'origin/master' by 2 commits, and can be fast-forwarded.
----

Jessica can merge either `origin/master` or `issue54` first -- they're both on the remote, so the order doesn't matter.
The end result should be identical no matter which order she chooses. Only the history is slightly different.
She chooses to merge `issue54` first.

[source,console]
----
$ git merge issue54
Updating fbff5bc..4af4298
Fast forward
 README           |    1 +
 lib/simplegit.rb |    6 +++++-
 2 files changed, 6 insertions(+), 1 deletions(-)
----

No problems occur. As you see, it was a simple fast-forward merge.
Now Jessica merges in John's work (`origin/master`).

[source,console]
----
$ git merge origin/master
Auto-merging lib/simplegit.rb
Merge made by the 'recursive' strategy.
 lib/simplegit.rb |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)
----

Everything merges cleanly. Jessica's history now looks like

.Jessica's history after merging John's changes
image::images/small-team-6.png[Jessica's history after merging John's changes]

Now `origin/master` is reachable from Jessica's `master`, so she should be able to successfully
push (assuming John hasn't pushed again in the meantime).

[source,console]
----
$ git push origin master
...
To jessica@githost:simplegit.git
   72bbc59..8059c15  master -> master
----

Each developer has committed a few times and merged each other's work successfully.

.Jessica's history after pushing all changes back to the server
image::images/small-team-7.png[Jessica's history after pushing all changes back to the server]

That's one of the simplest workflows.
Work for a while, generally in a topic branch, and merge into your `master` when the topic branch is ready to be integrated.
Then, to share that work, fetch and merge `origin/master` if
it has changed, and then push to `master` on the server. The general sequence is something like

.General sequence of events for a simple multiple-developer Git workflow
image::images/small-team-flow.png[General sequence of events for a simple multiple-developer Git workflow]

==== Private Managed Team

(((contributing, private managed team)))
In this next scenario, you'll look at contributor roles in a larger private group.
You'll learn how to work in an environment where small groups collaborate on features, after which those team-based contributions are integrated by another party.

Let's say that John and Jessica are working together on one feature (call this "`featureA`"), while Jessica and a third developer, Josie, are working on a second (say, "`featureB`").
In this case, the company is using a type of integration-manager workflow where the work of the individual groups is integrated only by certain engineers, and the `master` branch of the main repo can be updated only by those engineers.
In this scenario, all work is done in team-based branches and pulled together by the integrators later.

Let's follow Jessica's workflow as she works on her two features, collaborating in parallel with two different developers in this environment.
Assuming she already has her repository cloned, she decides to work on `featureA` first.
She creates a new branch for the feature and does some work on it there:

[source,console]
----
# Jessica's Machine
$ git checkout -b featureA
Switched to a new branch 'featureA'
$ vim lib/simplegit.rb
$ git commit -am 'Add limit to log function'
[featureA 3300904] Add limit to log function
 1 files changed, 1 insertions(+), 1 deletions(-)
----

At this point, she needs to share her work with John, so she pushes her `featureA` commits to the server.
Jessica doesn't have push access to `master` -- only the integrators do -- so she has to push to another branch in order to collaborate with John:

[source,console]
----
$ git push -u origin featureA
...
To jessica@githost:simplegit.git
 * [new branch]      featureA -> featureA
----

Jessica emails John to tell him that she's pushed some work that's ready for him to review into a
branch named `featureA`. While she waits for feedback from John, Jessica decides to start
working on `featureB` with Josie. To begin, she again creates a new feature branch,
basing it off the server's `master`.

[source,console]
----
# Jessica's Machine
$ git fetch origin
$ git checkout -b featureB origin/master
Switched to a new branch 'featureB'
----

Now, Jessica makes a couple of commits on `featureB`.

[source,console]
----
$ vim lib/simplegit.rb
$ git commit -am 'Make ls-tree function recursive'
[featureB e5b0fdc] Make ls-tree function recursive
 1 files changed, 1 insertions(+), 1 deletions(-)
$ vim lib/simplegit.rb
$ git commit -am 'Add ls-files'
[featureB 8512791] Add ls-files
 1 files changed, 5 insertions(+), 0 deletions(-)
----

Jessica's repository now looks like

.Jessica's initial commit history
image::images/managed-team-1.png[Jessica's initial commit history]

She's ready to push her work, but she gets an email message from Josie saying that a branch
with some initial work on it was already pushed to the server as `featureBee`.
Jessica first needs to merge those changes with her own before she can push to the server.
She can then fetch Josie's changes by running `git fetch`.

[source,console]
----
$ git fetch origin
...
From jessica@githost:simplegit
 * [new branch]      featureBee -> origin/featureBee
----

Assuming Jessica is still on `featureB`, she can now merge Josie's work into `featureB` by running `git merge`.

[source,console]
----
$ git merge origin/featureBee
Auto-merging lib/simplegit.rb
Merge made by the 'recursive' strategy.
 lib/simplegit.rb |    4 ++++
 1 files changed, 4 insertions(+), 0 deletions(-)
----

There's a bit of a problem -- she needs to push the merged work in her `featureB` to `featureBee` on the server.
She can do so by specifying the local branch followed by a colon (:), followed by the remote branch
to `git push`.

[source,console]
----
$ git push -u origin featureB:featureBee
...
To jessica@githost:simplegit.git
   fba9af8..cd685d1  featureB -> featureBee
----

This is called a _refspec_.
See <<ch10-git-internals#_refspec>> for a more detailed discussion of refspecs and the different things you can do with them.
Also notice the `-u` flag; this is short for `--set-upstream`, which configures the branches for easier pushing and pulling later.

Next, John emails Jessica to say he's pushed some changes to `featureA` and asks her to verify them.
She runs `git fetch` to pull those changes.

[source,console]
----
$ git fetch origin
...
From jessica@githost:simplegit
   3300904..aad881d  featureA   -> origin/featureA
----

Then, Jessica sees what's been changed by running `git log`.

[source,console]
----
$ git log featureA..origin/featureA
commit aad881d154acdaeb2b6b18ea0e827ed8a6d671e6
Author: John Smith <jsmith@example.com>
Date:   Fri May 29 19:57:33 2009 -0700

    Increase log output to 30 from 25
----

Finally, she merges John's work into her own `featureA`.

[source,console]
----
$ git checkout featureA
Switched to branch 'featureA'
$ git merge origin/featureA
Updating 3300904..aad881d
Fast forward
 lib/simplegit.rb |   10 +++++++++-
1 files changed, 9 insertions(+), 1 deletions(-)
----

Jessica wants to tweak something, so she commits again and then pushes to the server.

[source,console]
----
$ git commit -am 'Add small tweak to merged content'
[featureA 774b3ed] Add small tweak to merged content
 1 files changed, 1 insertions(+), 1 deletions(-)
$ git push
...
To jessica@githost:simplegit.git
   3300904..774b3ed  featureA -> featureA
----

Jessica's commit history now looks something like

.Jessica's history after committing on a feature branch
image::images/managed-team-2.png[Jessica's history after committing on a feature branch]

Jessica, Josie, and John inform the integrators that `featureA` and `featureBee` on the server
are ready for integration into the mainline. After the integrators merge these branches into the mainline,
a fetch brings the new merge commit, making the history look like

.Jessica's history after merging both her topic branches
image::images/managed-team-3.png[Jessica's history after merging both her topic branches]

Many groups switch to Git because of this ability to have multiple teams working in parallel, merging the different lines of work late in the process.
The ability of smaller subgroups of a team to collaborate via remote branches without necessarily having to involve or impede the entire team is a huge benefit of Git.
The sequence for the workflow you saw here is something like this:

.Basic sequence of this managed-team workflow
image::images/managed-team-flow.png[Basic sequence of this managed-team workflow]

[[_public_project]]
==== Forked Public Project

(((contributing, public small project)))
Contributing to public projects is a bit different.
Because you don't have permission to directly update branches in the project repository, you have to make the
work available to the maintainers some other way. This first example describes contributing via forking.
Many hosting sites support this (including GitHub, BitBucket, repo.or.cz, and others), and many
project maintainers expect this style of contribution.
The next section deals with projects that prefer to accept contributed patches via email.

First, clone the main repository, create a topic branch for the patch you're
planning to contribute, and do your work there. The sequence looks basically like

[source,console]
----
$ git clone <url>
$ cd project
$ git checkout -b featureA
  ... work ...
$ git commit
  ... work ...
$ git commit
----

[NOTE]
====
You may want to run `rebase -i` to squash your work into a single commit, or rearrange the work in the commits to make the patch easier for the maintainer to review -- see <<ch07-git-tools#_rewriting_history>> for more information about interactive rebasing.
====

When your work is finished and you're ready to contribute it back to the maintainers, go to the original project page and click the "`Fork`" button, creating your own writable fork of the project.
Then add this new repository URL as a second remote, in this case `myfork`.

[source,console]
----
$ git remote add myfork <url>
----

Then, push your work to it.
It's easiest to push the topic branch you're working on to your repository,
rather than merging into your `master` and pushing. The reason is that if the work isn't
accepted, you don't have to rewind your `master`.
If the maintainers `merge` or `rebase` your work, you eventually get it
back by pulling from their repository anyhow.

In any event, push your work by running

[source,console]
----
$ git push -u myfork featureA
----

(((git commands, request-pull)))
When your work has been pushed to your fork, notify the maintainer.
This is often called a pull request. GitHub has its own Pull Request mechanism that we
go over in <<ch06-github#ch06-github>>, or run `git request-pull` and email the output to the project maintainer manually.

`git request-pull` takes the name of the base branch into which you want your topic branch pulled and the
Git repository URL you want the maintainer to pull from, and outputs a summary of all the changes
you're asking to be pulled in. For instance, if Jessica wants to send John a pull request,
and she's made two commits on the topic branch she just pushed, she runs

[source,console]
----
$ git request-pull origin/master myfork
The following changes since commit 1edee6b1d61823a2de3b09c160d7080b8d1b3a40:
Jessica Smith (1):
        Create new function

are available in the git repository at:

  https://githost/simplegit.git featureA

Jessica Smith (2):
      Add limit to log function
      Increase log output to 30 from 25

 lib/simplegit.rb |   10 +++++++++-
 1 files changed, 9 insertions(+), 1 deletions(-)
----

This output can be sent to the maintainer -- it tells them where the work was branched from, summarizes the commits, and identifies from where the new work is to be pulled.

On a project for which you're not the maintainer, it's generally easier to have a branch like `master` always track `origin/master` and to do your work in topic branches that you can easily discard if they're rejected.
Having work themes isolated into topic branches also makes it easier for you to rebase your work if the tip of the main repository has moved in the meantime and your commits no longer apply cleanly.
For example, to submit a second topic to the project, don't continue working on the topic branch you just pushed. Start over from the main repository's `master`.

[source,console]
----
$ git checkout -b featureB origin/master
  ... work ...
$ git commit
$ git push myfork featureB
$ git request-pull origin/master myfork
  ... email generated request pull to maintainer ...
$ git fetch origin
----

Now, each of your topics is contained within a silo, similar to a patch queue, that you can rewrite, rebase, and modify without the topics interfering or interdepending on each other, like

.Initial commit history with `featureB` work
image::images/public-small-1.png[Initial commit history with `featureB` work]

Let's say the project maintainer has pulled a bunch of other patches and tried your first branch, but it no longer cleanly merges.
In this case, try to rebase that branch on top of `origin/master`, resolve the conflicts for the maintainer, and then resubmit your changes.

[source,console]
----
$ git checkout featureA
$ git rebase origin/master
$ git push -f myfork featureA
----

This rewrites your history to now look like <<psp_b>>.

[[psp_b]]
.Commit history after `featureA` work
image::images/public-small-2.png[Commit history after `featureA` work]

Because you rebased the branch, you have to specify `-f` to your push command in order to replace `featureA` on the server with a commit that isn't a descendant of it.
An alternative would be to push this new work to a different branch on the server (perhaps called `featureAv2`).

Let's look at one more possible scenario. The maintainer has looked at work in your second branch and
likes the concept but would like you to change an implementation detail.
You also take this opportunity to move the work to be based off the project's current `master` branch.
You start a new branch based off the current `origin/master` branch, squash the `featureB` changes there,
resolve any conflicts, make the implementation change, and then push that as a new branch.

(((git commands, merge, squash)))
[source,console]
----
$ git checkout -b featureBv2 origin/master
$ git merge --squash featureB
  ... change implementation ...
$ git commit
$ git push myfork featureBv2
----

The `--squash` flag takes all the work on the merged branch and squashes it into one commit producing the repository state as if a real merge happened, without actually making a merge commit.
This means your future commit has only one parent and allows you to introduce all the changes from another branch and then make more changes before making the new commit.
Also the `--no-commit` flag can be useful to delay the merge commit in the default merge process.

Now you can send the maintainer a message that you've made the requested changes and they can find
those changes in `featureBv2`.

.Commit history after `featureBv2` work
image::images/public-small-3.png[Commit history after `featureBv2` work]

[[_project_over_email]]
==== Public Project over Email

(((contributing, public large project)))
Many projects have established procedures for accepting patches. Check the specific rules for each project,
because they might differ. Since several older larger projects accept patches via a developer mailing list,
we go over an example of that now.

The workflow is similar to the previous use case. Create topic branches for each collection of patches
you work on. The difference is how you submit the patches to the project.
Instead of forking the project and pushing to your own writable repository, generate email versions
of each patch collection and email them to the developer mailing list.

[source,console]
----
$ git checkout -b topicA
  ... work ...
$ git commit
  ... work ...
$ git commit
----

(((git commands, format-patch)))
Say you have two commits that you want to send to the mailing list.
Run `git format-patch` to generate the mbox-formatted files that you email to the list.
This turns each commit into an email message with the first line of the commit message as the subject
and the rest of the message plus the patch that the commit introduces as the body.
The nice thing about this is that applying a patch from an email generated with `git format-patch`
preserves all the commit information properly.

[source,console]
----
$ git format-patch -M origin/master
0001-add-limit-to-log-function.patch
0002-increase-log-output-to-30-from-25.patch
----

Running `git format-patch` shows the names of the patch files it creates.
The `-M` flag tells Git to look for renames. The files end up looking like

[source,console]
----
$ cat 0001-add-limit-to-log-function.patch
From 330090432754092d704da8e76ca5c05c198e71a8 Mon Sep 17 00:00:00 2001
From: Jessica Smith <jessica@example.com>
Date: Sun, 6 Apr 2008 10:17:23 -0700
Subject: [PATCH 1/2] Add limit to log function

Limit log functionality to the first 20

---
 lib/simplegit.rb |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index 76f47bc..f9815f1 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -14,7 +14,7 @@ class SimpleGit
   end

   def log(treeish = 'master')
-    command("git log #{treeish}")
+    command("git log -n 20 #{treeish}")
   end

   def ls_tree(treeish = 'master')
--
2.1.0
----

You can also edit these patch files to add more information for the email list that you don't want to appear in the commit message.
If you add text between the `---` line and the beginning of the patch (the `diff --git` line), the developers can read it, but that content is ignored by the patching process.

If you send this to a mailing list, sometimes
pasting the text into a GUI-based email client causes formatting issues, especially with smarter
clients that don't preserve newlines and other whitespace appropriately.
Luckily, Git provides a tool to help send properly formatted patches via IMAP, which might be easier.
We demonstrate how to send a patch via Gmail, which happens to be the email method we know best.
You can find detailed instructions for a number of mail programs at the end of the
aforementioned `Documentation/SubmittingPatches` file in the Git source code.

(((git commands, config)))(((email)))
First, set up the imap section in `~/.gitconfig`.
Set each value separately with a series of `git config` commands, or add them manually, but in the end your config file should look something like

[source,ini]
----
[imap]
  folder = "[Gmail]/Drafts"
  host = imaps://imap.gmail.com
  user = user@gmail.com
  pass = YX]8g76G_2^sFbd
  port = 993
  sslverify = false
----

If your IMAP server doesn't use SSL, the last two lines aren't necessary,
and the host value should be `imap://` instead of `imaps://`.
When that's done, run `git imap-send` to place the patch files in the Drafts folder for
your account on the specified IMAP server.

[source,console]
----
$ cat *.patch |git imap-send
Resolving imap.gmail.com... ok
Connecting to [74.125.142.109]:993... ok
Logging in...
sending 2 messages
100% (2/2) done
----

At this point, you should be able to go to your Drafts folder, change the To field to the
mailing list you're sending the patch to, possibly CCing the maintainer or person responsible for that section,
and send the patch off.

You can also send the patch through an SMTP server. As before, set each value separately
with a series of `git config` commands, or add them manually in the sendemail section in
`~/.gitconfig`.

[source,ini]
----
[sendemail]
  smtpencryption = tls
  smtpserver = smtp.gmail.com
  smtpuser = user@gmail.com
  smtpserverport = 587
----

After this is done, run `git send-email` to send your patch.

[source,console]
----
$ git send-email *.patch
0001-add-limit-to-log-function.patch
0002-increase-log-output-to-30-from-25.patch
Who should the emails appear to be from? [Jessica Smith <jessica@example.com>]
Emails will be sent from: Jessica Smith <jessica@example.com>
Who should the emails be sent to? jessica@example.com
Message-ID to be used as In-Reply-To for the first email? y
----

Then, Git outputs a bunch of log information looking something like this for each patch you're sending:

[source,text]
----
(mbox) Adding cc: Jessica Smith <jessica@example.com> from
  \line 'From: Jessica Smith <jessica@example.com>'
OK. Log says:
Sendmail: /usr/sbin/sendmail -i jessica@example.com
From: Jessica Smith <jessica@example.com>
To: jessica@example.com
Subject: [PATCH 1/2] Add limit to log function
Date: Sat, 30 May 2009 13:29:15 -0700
Message-Id: <1243715356-61726-1-git-send-email-jessica@example.com>
X-Mailer: git-send-email 1.6.2.rc1.20.g8c5b.dirty
In-Reply-To: <y>
References: <y>

Result: OK
----

[TIP]
====
For help on configuring your email system, more tips and tricks, and a sandbox to send a trial patch via email, go to https://git-send-email.io[git-send-email.io^].
====

==== Summary

This section covered a number of common workflows for dealing with several very different types of
projects, and introduced a couple of new tools to help manage this process.
Next, you see how to work the other side of the coin: maintaining a Git project.
You learn how to be a benevolent dictator or integration manager.
