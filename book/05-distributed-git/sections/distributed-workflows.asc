=== Distributed Workflows

(((workflows)))
Unlike Centralized VCSs (CVCSs), Git's distributed orientation allows developers to be far more
flexible in how they collaborate. In CVCSs, every developer is a client working more or less equally on a central server.
With Git, however, every developer is potentially both a client and a server -- that is, every developer can both
contribute code to other repositories, and maintain a public repository on which others can base their work and
to which they can contribute. This opens a vast range of workflow possibiliti,s for your project and your team.
We cover a few common workflows that take advantage of this flexibility and go over possible strengths and
weaknesses of each option. You can choose a single one to use, or you can mix and match features from each.

==== Centralized Workflow

(((workflows, centralized)))
In CVCSs, there's generally a single collaboration model -- the centralized workflow.
One server contains the central repository, and everyone synchronizes their work with it.
Developers are clients of that server -- and synchronize with that one repository.

.Centralized workflow
image::images/centralized_workflow.png[Centralized workflow]

This means that if two developers clone from the server and both make changes, the first developer to push their
changes can do so with no conflicts. The second developer must merge the first developer's changes into their working
directory before pushing their changes, so that the changes don't overwrite the first developer's changes.
This is as true in Git as it is in Subversion(((Subversion))) (or any CVCS), and this model works perfectly well in Git.

If you're already comfortable with a centralized workflow, you can easily continue using it with Git.
Simply set up a single repository, and give everyone on your team write access to it. Git doesn't let users overwrite
each other's changes. Say John and Jessica both start working at the same time.
John finishes his changes and pushes them to the server. Then Jessica tries to push her changes. The server rejects them.
She's told that she's trying to push non-fast-forward changes and that she can't do so until she fetches
the latest changes and merges them into her working directory. This workflow is attractive to a lot of people because
it's a paradigm that many are familiar and comfortable with.

This is also not limited to small teams. With Git's branching model, it's possible for hundreds of developers to successfully work on a single project containing dozens of branches simultaneously.

This is also not limited to small teams.
With Git's branching model, it's possible for hundreds of developers to successfully work on a single project through dozens of branches simultaneously.

[[_integration_manager]]
==== Integration-Manager Workflow

(((workflows, integration manager)))
Because Git allows multiple remote repositories, it's possible to have a workflow where each developer has write
access to their own public repository and read access to everyone else's.
This scenario often includes a central repository that represents the official project sources.
To contribute to that project, you create your own public clone of the project and push your changes to it.
Then, you send a request to the integration manager of the central repository to pull your changes.
The manager then adds your repository as a remote on their private repository, pulls your changes, tests them locally,
merges them into their branch, and pushes them to the central repository.
The process works as follows (see <<wfdiag_b>>):

1.  The integration manager pushes to the blessed repository.
2.  A developer clones that repository and makes changes to their private copy.
3.  The developer pushes to their public copy.
4.  The developer sends the integration manager a message asking them to pull changes.
5.  The integration manager adds the contributor's repo as a remote and merges locally.
6.  The integration manager pushes merged changes to the blessed repository.

[[wfdiag_b]]
.Integration-manager workflow
image::images/integration-manager.png[Integration-manager workflow]

(((forking)))
This is a very common workflow with hub-based tools like GitHub or GitLab, where it's easy to fork a project and
push your changes into your fork for everyone to see.
One of the main advantages of this approach is that you can continue to work after you send the message
to the integration manager, who can pull your changes at any time.

==== Dictator and Lieutenants Workflow

(((workflows, dictator and lieutenants)))

This is a variant of a multiple-repository workflow.
It's generally used by huge projects with hundreds of collaborators. One famous example is the Linux kernel.
Various integration managers, called lieutenants, are in charge of certain parts of the repository.
The project has one integration manager, known as the benevolent dictator.
The benevolent dictator pushes from his directory to a reference repository from which all collaborators need to pull.
The process works like this (see <<wfdiag_c>>):

1.  Regular developers work on their topic branch and rebase their work on top of the dictator's `master` branch in their public repository.
2.  Lieutenants merge the developers' topic branches into their `master` branch in their public repository.
3.  The dictator merges the lieutenants' `master` branches into his `master` branch in their public repository.
4.  The dictator pushes their `master` to the reference repository so the other developers can use it.

[[wfdiag_c]]
.Benevolent dictator workflow
image::images/benevolent-dictator.png[Benevolent dictator workflow]

This kind of workflow isn't common, but can be useful in very big projects, or in highly hierarchical environments.
It allows the project leader (the dictator) to delegate much of the work and collect large subsets of code changes at multiple points before integrating them.

[[_patterns_for_managing_source_code_branches]]
==== Patterns for Managing Source Code Branches

[NOTE]
====
Martin Fowler has made a guide "Patterns for Managing Source Code Branches".
This guide covers all the common Git workflows, and explains how/when to use them.
There's also a section comparing high and low integration frequencies.

https://martinfowler.com/articles/branching-patterns.html[^]
====

==== Workflows Summary

These are some commonly used workflows that are possible with a distributed system like Git, but you can see that
many variations are possible. Now that you can (hopefully) determine which workflow combination may work for you,
we cover some more specific examples of how to accomplish the main tasks that make up the different workflows.
In the next section, you learn a few common patterns for contributing to a project.
