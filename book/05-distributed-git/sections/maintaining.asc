=== Maintaining a Project

(((maintaining a project)))
In addition to knowing how to effectively contribute to a project, you likely need to know how to maintain one.
This can consist of accepting and applying patches generated by `git format-patch` that are emailed to you,
or integrating changes in remote branches for repositories you've added as remotes.
Whether you maintain a canonical repository or want to help by verifying or approving patches,
you need to know how to accept work in a way that's clearest for other contributors and sustainable over
the long run.

==== Working in Topic Branches

(((branches, topic)))
When you're thinking of integrating new work, it's generally a good idea to try it out in a _topic
branch_ -- a temporary branch specifically created to try out that new work.
This way, it's easy to concentrate on a patch and leave it if it's not working. Later, when you have time,
go back to it to resolve the problem.
If you create a branch name based on the theme of the work, you can easily remember what the work is about.
The maintainer of the Git project tends to name these branches using a name such as `sc/ruby_client`,
where `sc` are the initials of the person who contributed the work.

Remember, create the branch based off `master` by running

[source,console]
----
$ git branch sc/ruby_client master
----

Or, to create it and also switch to it immediately, run `git checkout -b`.

[source,console]
----
$ git checkout -b sc/ruby_client master
----

Now you're ready to add the contributed work you received into this topic branch and determine if you want to merge it into your longer-term branches.

[[_patches_from_email]]
==== Applying Patches from Email

(((email, applying patches from)))
If you receive a patch over email to integrate into your project, apply the patch in your
topic branch to evaluate the work.
There are two ways to apply an emailed patch: by running `git apply` or `git am`.

===== Applying a Patch with `apply`

(((git commands, apply)))
If you receive a patch generated by the `git diff` or a Unix `diff` command (which isn't recommended;
see the next section), apply the patch by running `git apply`.
Assuming you saved the patch in `/tmp/patch-ruby-client.patch`, apply the patch by running

[source,console]
----
$ git apply /tmp/patch-ruby-client.patch
----

This modifies the files in your working directory.
It's almost identical to running `patch -p1` to apply the patch, although it's more paranoid
and accepts fewer fuzzy matches than `patch`. It also handles file adds, deletes, and renames if
they're described in `git diff` format, which `patch` doesn't do.
Finally, `git apply` is an `apply all or abort all` model where either everything is applied or nothing is,
whereas `patch` can partially apply patchfiles, leaving your working directory in an incomplete state.
`git apply` is overall much more conservative than `patch`.
It doesn't create a commit so after running it, you must manually stage and commit the changes it introduced.

You can also check if a patch applies cleanly without making any changes by
running `git apply --check` along with the patch filename.

[source,console]
----
$ git apply --check 0001-see-if-this-helps-the-gem.patch
error: patch failed: ticgit.gemspec:1
error: ticgit.gemspec: patch does not apply
----

If there's no output, then the patch applies cleanly.
This command also exits with a non-zero status if the check fails, so you can use it in scripts.

[[_git_am]]
===== Applying a Patch with `am`

(((git commands, am)))
If the contributor is a Git user who was good enough to run `git format-patch` to generate their patch,
then your job is easier because the patch contains author information and a commit message.
If you can, encourage your contributors to run `git format-patch` instead of `diff` to generate patches.
You should only have to run `git apply` for legacy patches.

To apply a patch generated by `git format-patch`, run `git am`.
Technically, `git am` is built to read an mbox file, which is a simple, plain-text format for
storing email messages in one text file. It looks something like

[source,console]
----
From 330090432754092d704da8e76ca5c05c198e71a8 Mon Sep 17 00:00:00 2001
From: Jessica Smith <jessica@example.com>
Date: Sun, 6 Apr 2008 10:17:23 -0700
Subject: [PATCH 1/2] Add limit to log function

Limit log functionality to the first 20
----

This is the beginning of the output of the `git format-patch` command that you saw in the previous section; it also represents a valid mbox email format.
If someone has emailed you the patch properly using `git send-email`, and you download that into an mbox format, then you can point `git am` to that mbox file, and it will start applying all the patches it sees.
If you run a mail client that can save several emails out in mbox format, you can save entire patch series into a file and then use `git am` to apply them one at a time.

However, if someone uploaded a patch file generated via `git format-patch` to a ticketing system or something similar, you can save the file locally and then pass that file saved on your disk to `git am` to apply it:

[source,console]
----
$ git am 0001-limit-log-function.patch
Applying: Add limit to log function
----

You can see that the patch applied cleanly and the command automatically created the new commit.
The author information is taken from the email's `From` and `Date` headers, and the commit message
is taken from the `Subject` and body (the part before the patch) of the email.
For example, if this patch were applied from the mbox example above, the commit generated would
look something like

[source,console]
----
$ git log --pretty=fuller -1
commit 6c5e70b984a60b3cecd395edd5b48a7575bf58e0
Author:     Jessica Smith <jessica@example.com>
AuthorDate: Sun Apr 6 10:17:23 2008 -0700
Commit:     Scott Chacon <schacon@gmail.com>
CommitDate: Thu Apr 9 09:19:06 2009 -0700

   Add limit to log function

   Limit log functionality to the first 20
----

The `Commit` information indicates the person who applied the patch and the time it was applied.
The `Author` information is the individual who originally created the patch and when it was originally created.

But it's possible that the patch doesn't apply cleanly.
Perhaps your main branch has diverged too far from the branch the patch was built from, or the patch depends on another patch you haven't applied yet.
In that case, `git am` fails and asks what to do.

[source,console]
----
$ git am 0001-see-if-this-helps-the-gem.patch
Applying: See if this helps the gem
error: patch failed: ticgit.gemspec:1
error: ticgit.gemspec: patch does not apply
Patch failed at 0001.
When you have resolved this problem run "git am --resolved".
If you would prefer to skip this patch, instead run "git am --skip".
To restore the original branch and stop patching run "git am --abort".
----

This command puts conflict markers in any files it has issues with, much like a conflicted merge
or rebase operation. Solve this issue much the same way -- edit the file to resolve the conflict,
stage the new file, and then run `git am --resolved` to continue to the next patch.

[source,console]
----
$ (fix the file)
$ git add ticgit.gemspec
$ git am --resolved
Applying: See if this helps the gem
----

For Git to try a bit more intelligently to resolve the conflict, try running `git am` with the `-3` flag,
which makes Git attempt a three-way merge. This method isn't the default because it doesn't work if
the commit the patch says it was based on isn't in your repository. If that commit is in your
repository -- if the patch was based on a public commit -- then the `-3` flag is generally much
smarter about applying a conflicting patch.

[source,console]
----
$ git am -3 0001-see-if-this-helps-the-gem.patch
Applying: See if this helps the gem
error: patch failed: ticgit.gemspec:1
error: ticgit.gemspec: patch does not apply
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
No changes -- Patch already applied.
----

In this case, this patch had already been applied.
Without the `-3` flag, you see what looks like a conflict.

If you're applying a number of patches from an mbox file, run `git am` in interactive mode,
which stops at each patch it finds and asks if you want to apply it.

[source,console]
----
$ git am -3 -i mbox
Commit Body is:
--------------------------
See if this helps the gem
--------------------------
Apply? [y]es/[n]o/[e]dit/[v]iew patch/[a]ccept all
----

This is nice if you have a number of patches to apply, because you can view the patch first if you don't
remember what it is, or decline to apply the patch if you've already done so.

When all the patches for your topic are applied and committed into your branch, choose whether
and how to integrate them into a longer-running branch.

[[_checking_out_remotes]]
==== Checking Out Remote Branches

(((branches, remote)))
If a contribution comes from a Git user who set up their own repository, pushed a number of changes into it,
and then sent you the URL to the repository and the name of the remote branch the changes are in,
add the remote repository as a remote and do merges locally.

For instance, if Jessica sends an email message saying that she has a great new feature in the
`ruby-client` branch of her repository, test it by adding the remote and checking out that branch locally.

[source,console]
----
$ git remote add jessica https://github.com/jessica/myproject.git
$ git fetch jessica
$ git checkout -b rubyclient jessica/ruby-client
----

If she emails you again later with another branch containing another great feature, you could easily `fetch` and `checkout` because you already have the remote setup.

This is most useful if you're working with a person consistently.
If someone only has a single patch to contribute once in a while, then accepting it over email may be less time consuming than requiring everyone to run their own server and having to continually add and remove remotes to get a few patches.
You're also unlikely to want to have hundreds of remotes, each for someone who contributes only a patch or two.
However, scripts and hosted services may make this easier -- it depends largely on how you and your contributors develop.

The other advantage of this approach is that you get the history of the commits as well.
Although you may have legitimate merge issues, you know where in your history their work is based. A proper three-way merge is the default rather than having to add the `-3` flag to `git merge` and hope the patch was generated off a public commit to which you have access.

If you aren't working with a person consistently but still want to pull from them this way, provide the URL of the remote repository to `git pull`.
This does a one-time pull and doesn't save the URL as a remote reference:

[source,console]
----
$ git pull https://github.com/onetimeguy/project
From https://github.com/onetimeguy/project
 * branch            HEAD       -> FETCH_HEAD
Merge made by the 'recursive' strategy.
----

[[_what_is_introduced]]
==== Determining What Is Introduced

(((branches, diffing)))
Now you have a topic branch that contains contributed work.
At this point, you can determine what you'd like to do with it.
This section revisits a couple of commands to show how to review exactly what you're
introducing if you merge the topic branch into your main branch.

It's often helpful to get a review of all the commits that are in this branch but that aren't in `master`.
You can exclude commits in `master` by adding the `--not` flag before the branch name.
This does the same thing as the `master..contrib` format that we used earlier.
For example, if your contributor sends two patches and you create a branch called `contrib` and applied those patches there, run

[source,console]
----
$ git log contrib --not master
commit 5b6235bd297351589efc4d73316f0a68d484f118
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri Oct 24 09:53:59 2008 -0700

    See if this helps the gem

commit 7482e0d16d04bea79d0dba8988cc78df655f16a0
Author: Scott Chacon <schacon@gmail.com>
Date:   Mon Oct 22 19:38:36 2008 -0700

    Update gemspec to hopefully work better
----

To see what changes each commit introduces, remember to include the `-p` flag to `git log` to
append the diff introduced to each commit.

To see a full diff of what would happen if you were to merge this topic branch with another branch,
you may have to use a weird trick to get the correct results. You may think of running

[source,console]
----
$ git diff master
----

This command shows a diff, but it may be misleading.
If `master` has moved forward since you created the topic branch from it, you get seemingly strange results.
This happens because Git directly compares the last commit of the topic branch you're
on and the last commit on `master`.
For example, if you've added a line to a file on `master`, a direct comparison looks
like the topic branch is going to remove that line.

If `master` is a direct ancestor of your topic branch, this isn't a problem. But if the two histories have diverged, the diff looks like you're adding all the new stuff in your topic branch and removing everything unique to `master`.

What you really want is to see the changes added to the topic branch -- the work you introduce
if you merge this branch with `master`. Do that by having Git compare the last commit on your topic
branch with the first common ancestor it has with `master`.

Technically, you do that by explicitly figuring out the common ancestor and then running your diff on it.

[source,console]
----
$ git merge-base contrib master
36c7dba2c95e6bbb78dfa822519ecfec6e1ca649
$ git diff 36c7db
----

or, more concisely:

[source,console]
----
$ git diff $(git merge-base contrib master)
----

However, that isn't convenient, so Git provides another shorthand for doing the same thing: the triple-dot syntax.
In the context of the `git diff` command, put three periods after another branch to do a `diff` between the last commit of the branch you're on and its common ancestor with another branch:

[source,console]
----
$ git diff master...contrib
----

This command shows only the work your current topic branch has introduced since its common ancestor with `master`.
That's a very useful syntax to remember.

==== Integrating Contributed Work

(((integrating work)))
When all the work in your topic branch is ready to be integrated into a more mainline branch, the question is how to do it.
Furthermore, what overall workflow do you want to use to maintain your project?
You have a number of choices, so we'll cover a few of them.

===== Merging Workflows

(((workflows, merging)))
One simple workflow merges your work into `master`.
In this scenario, `master` contains basically stable code.
When you have work in a topic branch that you've done or that someone has contributed and you've verified,
merge it into `master`, delete the topic branch, and then continue the process.
If we have a repository with work in two branches named `ruby_client` and `php_client` that looks like
<<merwf_a>>, and we merge `ruby_client` first and then `php_client` next,
your history ends up looking like <<merwf_b>>

[[merwf_a]]
.History with several topic branches
image::images/merging-workflows-1.png[History with several topic branches]

[[merwf_b]]
.After a topic branch merge
image::images/merging-workflows-2.png[After a topic branch merge]

That's probably the simplest workflow, but it can be a problem if you're dealing with larger
or more stable projects where you want to be really careful about what you introduce.

If you have a more important project, you might want to use a two-phase merge cycle.
In this scenario, you have two long-running branches, `master` and `develop`.
You decide that `master` is updated only when a very stable release is cut. All new code
is integrated into `develop`. You regularly push both of these branches to the public repository.
Each time you have a new topic branch to merge in (<<merwf_c>>), you merge it into `develop` (<<merwf_d>>).
Then, when you tag a release, you fast-forward `master` to wherever the now-stable `develop` is (<<merwf_e>>).

[[merwf_c]]
.Before a topic branch merge
image::images/merging-workflows-3.png[Before a topic branch merge]

[[merwf_d]]
.After a topic branch merge
image::images/merging-workflows-4.png[After a topic branch merge]

[[merwf_e]]
.After a project release
image::images/merging-workflows-5.png[After a project release]

This way, when people clone your project's repository, they can either check out `master` to
build the latest stable version and easily keep up to date, or they can check out `develop`,
which is more cutting-edge. You can also continue this approach, having an integration branch where
all the work is merged together. Then, when the codebase on that branch is stable and passes tests,
merge it into a develop branch. When that branch has proven stable for a while, fast-forward `master`.

===== Large-Merging Workflows

(((workflows, "merging (large)")))
The Git project has four long-running branches: `master`, `next`, and `seen` (formerly 'pu' -- proposed updates) for new work, and `maint` for maintenance backports.
When new work is introduced by contributors, it's collected into topic branches in the maintainer's repository in a manner similar to what we've described (see <<merwf_f>>).
At this point, the topics are evaluated to determine whether they're safe and ready for consumption or whether they need more work.
If they're safe, they're merged into `next`, and that branch is pushed so everyone can try the integrated topics.

[[merwf_f]]
.Managing a complex series of parallel contributed topic branches
image::images/large-merges-1.png[Managing a complex series of parallel contributed topic branches]

If the topics still need work, they're merged into `seen` instead.
When it's determined that they're totally stable, the topics are re-merged into `master`.
The `next` and `seen` branches are then rebuilt from the `master`.
This means `master` almost always moves forward, `next` is rebased occasionally, and `seen` is rebased even more often:

.Merging contributed topic branches into long-term integration branches
image::images/large-merges-2.png[Merging contributed topic branches into long-term integration branches]

When a topic branch has finally been merged into `master`, it's removed from the repository.
The Git project also has a `maint` branch that's forked off from the last release to provide backported patches in case a maintenance release is required.
Thus, when you clone the Git repository, you have four branches you can check out to evaluate the project in different stages of development, depending on how cutting edge you want to be or how you want to contribute. The maintainer has a structured workflow to help them vet new contributions.

The Git project's workflow is unusual.
To clearly understand it study the https://github.com/git/git/blob/master/Documentation/howto/maintain-git.txt[Git Maintainer's guide^].

[[_rebase_cherry_pick]]
===== Rebasing and Cherry-Picking Workflows

(((workflows, rebasing and cherry-picking)))
Other maintainers prefer to rebase or cherry-pick contributed work on top of their `master`, rather than merging it in, to keep a mostly linear history.
When you have work in a topic branch and want to integrate it, move to that branch and
run `git rebase` to rebuild the changes on top of `master` (or `develop`, and so on).
If that works well, you can fast-forward `master`, and you end up with a linear project history.

(((git commands, cherry-pick)))
The other way to move introduced work from one branch to another is to cherry-pick it.
A cherry-pick in Git is like a rebase for a single commit.
It takes the patch that was introduced in a commit and tries to reapply it on the branch you're currently on.
This is useful if you have a number of commits on a topic branch and you want to integrate only one of them, or if you only have one commit on a topic branch and you'd prefer to cherry-pick it rather than rebasing.
For example, suppose you have a project that looks like

.Example history before a cherry-pick
image::images/rebasing-1.png[Example history before a cherry-pick]

To pull commit `e43a6` into `master`, run

[source,console]
----
$ git cherry-pick e43a6
Finished one cherry-pick.
[master]: created a0a41a9: "More friendly message when locking the index fails."
 3 files changed, 17 insertions(+), 3 deletions(-)
----

This pulls the same change introduced in `e43a6`, but you get a new commit hash, because the date applied is different.
Now your history looks like

.History after cherry-picking a commit on a topic branch
image::images/rebasing-2.png[History after cherry-picking a commit on a topic branch]

Now you can remove your topic branch and drop the commits you didn't want to pull.

===== Rerere

(((git commands, rerere)))(((rerere)))
If you're doing lots of merging and rebasing, or you're maintaining a long-lived topic branch, Git has a feature called "`rerere`" that can help.

Rerere stands for `reuse recorded resolution`. It's a way of shortcutting manual conflict resolution.
When rerere is enabled, Git keeps a set of pre- and post-images from successful merges,
and if it notices that there's a conflict that looks exactly like one you've already fixed,
it just uses the fix from last time, without bothering you to do it again.

This feature comes in two parts: a configuration setting and a command.
The configuration setting is `rerere.enabled`, and it's handy enough to put in your global config:

[source,console]
----
$ git config --global rerere.enabled true
----

Now, whenever you do a merge that resolves conflicts, the resolution will be recorded in the cache in case you need it in the future.

You interact with the rerere cache by running `git rerere`.
Git checks its repository for resolutions and tries to find a match with any current merge
conflicts and resolve them (this is done automatically if `rerere.enabled` is `true`).
There are also options to see what's recorded, to erase specific resolutions from the cache,
and to clear the entire cache.
We cover rerere in more detail in <<ch07-git-tools#ref_rerere>

[[_tagging_releases]]
==== Tagging Your Releases

(((tags)))(((tags, signing)))
When you've decided to cut a release, you probably want to create a tag so you can re-create
that release at any point in the future.
You can create a new tag as discussed in <<ch02-git-basics-chapter#ch02-git-basics-chapter>>.
If you decide to sign the tag as the maintainer, this may look something like

[source,console]
----
$ git tag -s v1.5 -m 'my signed 1.5 tag'
You need a passphrase to unlock the secret key for
user: "Scott Chacon <schacon@gmail.com>"
1024-bit DSA key, ID F721C45A, created 2009-02-09
----

If you do sign your tags, you may have the problem of distributing the public PGP key used.
The maintainer of the Git project has solved this issue by including their public key in the repository and then adding a tag that points directly to it.
You can figure out which key you want by running `gpg --list-keys`.

[source,console]
----
$ gpg --list-keys
/Users/schacon/.gnupg/pubring.gpg
---------------------------------
pub   1024D/F721C45A 2009-02-09 [expires: 2010-02-09]
uid                  Scott Chacon <schacon@gmail.com>
sub   2048g/45D02282 2009-02-09 [expires: 2010-02-09]
----

Then, you can directly import the key into Git by exporting it and piping that
through `git hash-object`, which writes a new entry in the Git repository with that content
and returns the hash of the entry

[source,console]
----
$ gpg -a --export F721C45A | git hash-object -w --stdin
659ef797d181633c87ec71ac3f9ba29fe5775b92
----

Now that your key is in Git, you can create a tag that points directly to it by specifying the
hash that `git hash-object` showed.

[source,console]
----
$ git tag -a maintainer-pgp-pub 659ef797d181633c87ec71ac3f9ba29fe5775b92
----

If you run `git push --tags`, the `maintainer-pgp-pub` tag will be shared with everyone.
If anyone wants to verify a tag, they can directly import your PGP key by pulling it directly out of the repository and importing it into GPG.

[source,console]
----
$ git show maintainer-pgp-pub | gpg --import
----

They can use that key to verify all your signed tags.
Also, if you include instructions in the tag message, running `git show <tag>` shows the end user
more specific instructions about tag verification.

[[_build_number]]
==== Generating a Build Number

(((build numbers)))(((git commands, describe)))
Because Git doesn't assign monotonically increasing numbers, like 'v123', to each commit,
to have a human-readable name to go with a commit, run `git describe` on that commit.
Git shows the name of the most recent tag with the number of commits since that tag, and a
partial hash of the commit you're describing (the "g" means "Git").

[source,console]
----
$ git describe master
v1.6.2-rc1-20-g8c5b85c
----

This way, you can export a build and name it something understandable to people.
In fact, if you build Git from source code cloned from the Git repository, `git --version` shows something like this.
If you're describing a commit that you have directly tagged, it just gives the tag name.

By default, `git describe` requires annotated tags (tags created with the `-a` or `-s` flag).
To take advantage of lightweight (non-annotated) tags as well, add the `--tags` flag to the command.
You can also pass this string to `git checkout` or `git show`,
although it relies on the abbreviated hash at the end, so it may not be valid forever.
For instance, the Linux kernel recently jumped from 8 to 10 characters to ensure hash uniqueness,
so older `git describe` output names are no longer valid.

[[_preparing_release]]
==== Preparing a Release

(((releasing)))(((git commands, archive)))
Now you want to release a build.
One thing to do is create an archive of the latest working directory of your code for those
poor souls who don't use Git. The command to run is `git archive`.

[source,console]
----
$ git archive master --prefix='project/' | gzip > `git describe master`.tar.gz
$ ls *.tar.gz
v1.6.2-rc1-20-g8c5b85c.tar.gz
----

The resulting tarball now contains the latest version of your project under a directory named `project`.
You can also create a zip archive in much the same way by passing the `--format=zip` flag
to `git archive`.

[source,console]
----
$ git archive master --prefix='project/' --format=zip > `git describe master`.zip
----

You now have a nice tarball and a zip archive of your project release that you can upload to your website or email to people.

[[_the_shortlog]]
==== The Shortlog

(((git commands, shortlog)))
It's time to email your mailing list of people who want to know what's happening in your project.
A nice way of quickly getting a sort of changelog describing what's changed in your project since your last
release is to run `git shortlog`. It summarizes all the commits in the range provided.
For example, the following gives a summary of all the commits since your last release,
if your last release was named v1.0.1.

[source,console]
----
$ git shortlog --no-merges master --not v1.0.1
Chris Wanstrath (6):
      Add support for annotated tags to Grit::Tag
      Add packed-refs annotated tag support.
      Add Grit::Commit#to_patch
      Update version and History.txt
      Remove stray `puts`
      Make ls_tree ignore nils

Tom Preston-Werner (4):
      fix dates in history
      dynamic version method
      Version bump to 1.0.2
      Regenerated gemspec for version 1.0.2
----

You get a clean summary of all the commits since `v1.0.1`, grouped by author, that you can email to your list.
