[[_git_branches_overview]]
=== Branches in a Nutshell

To really understand Git branching, we need to take a step back and examine how Git stores files
in a repository.

As you may remember from <<ch01-getting-started#ch01-getting-started>>, Git doesn't store files as a series of changes,
but instead as a series of copies, or _snapshots_, of what's in the staging area.

When you commit, Git creates a `commit object` and places it and the file(s) you're committing into the repository.
The commit object contains a pointer to what you're committing, a commit identifier, your name and email address,
a commit message, and the identifiers of the commit's parent commit(s) -- the commit(s) that came directly
before it, if any.
The first commit you make in a repository has no parents, regular commits have one parent,
and merge commits resulting from a merge of two or more branches have multiple parents.
The commit identifier is actually the SHA-1 hash of all the information in the commit,
and is guaranteed to be unique for each commit.

To visualize this, let's assume your working directory contains three files. You stage them and then commit.

[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'Initial commit'
----

When you run `git commit`, Git adds the information mentioned above to the repository.(((git commands, commit)))
Although this isn't strictly technically accurate, you can now visualize
your Git repository as follows (ignore the 'tree' entry for now and
remember `98ca9` is the abbreviated SHA-1 hash of the commit):

.A commit
image::images/commit-and-tree.png[A commit]

If you make some changes and commit again, the next commit stores a pointer to the commit that came immediately before it.
The same is true for any following commits.

.Commits and their parents
image::images/commits-and-parents.png[Commits and their parents]

A branch in Git is simply a pointer to one of these commits.
The default branch is `master`.
Every time you commit, `master` moves forward automatically to point to the
last commit you made. The illustration below shows this.

[NOTE]
====
`master` isn't a special branch.(((master)))
It's exactly like any other branch.
The only reason nearly every repository has one is that `git init` creates it by default,
and most people don't bother to change it.
====

.A branch and its commit history
image::images/branch-and-history.png[A branch and its commit history]

[[_create_new_branch]]
==== Creating a New Branch

(((branches, creating)))
What happens when you create a new branch?
This simply creates a new pointer.
Let's say you create a new branch called `testing`
by running `git branch`.(((git commands, branch)))

[source,console]
----
$ git branch testing
----

This creates a new pointer that points to the same branch you're currently on.

.Two branches pointing into the same series of commits
image::images/two-branches.png[Two branches pointing into the same series of commits]

How does Git know which branch you're currently on?
Git keeps a special pointer called `HEAD` that points to the branch you're currently on.
Note that this is a lot different than the concept of `HEAD` in other VCSs you may be used to, such as Subversion or CVS.
In this case, you're still on `master`.
`git branch` only _creates_ a new branch -- it doesn't switch you to that branch.

.HEAD pointing to a branch
image::images/head-to-master.png[HEAD pointing to a branch]

You can easily see your current branch by running `git log --oneline --decorate`.
This shows where the branch pointers are pointing. (The --oneline flag makes the output easier to read).

[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD -> master, testing) Add feature #32 - ability to add new formats to the central interface
34ac2 Fix bug #1328 - stack overflow under certain conditions
98ca9 Initial commit
----

`master` and `testing` both point to commit `f30ab`.

[[_switching_branches]]
==== Switching Branches

(((branches, switching)))
To switch branches, run `git checkout`.(((git commands, checkout)))
Let's switch to `testing`.

[source,console]
----
$ git checkout testing
----

This makes `HEAD` point to `testing`.

.HEAD points to the current branch
image::images/head-to-testing.png[HEAD points to the current branch]

What's the significance of that?
Well, let's make another commit:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'Make a change'
----

.HEAD moves forward when a commit is made
image::images/advance-testing.png[HEAD moves forward when a commit is made.]

This is interesting, because now `testing` has moved forward, but `master` still points to the commit
you were on when you ran `git checkout` to switch branches. Let's switch back to `master`.

[source,console]
----
$ git checkout master
----

[NOTE]
.`git log` doesn't show _all_ the branches _all_ the time
====
If you were to run `git log` right now, you might wonder where `testing` went, since it wouldn't appear in the output.

`testing` hasn't disappeared; Git just doesn't know that you're interested in it. Instead, it's trying to show you what it thinks you're interested in.
In other words, by default, `git log` only shows commit history below the branch you've checked out.

To show commit history for the desired branch you have to explicitly specify it, for example by running `git log testing`.
To show all of the branches, add `--all` to `git log`.
====

.HEAD moves when you checkout
image::images/checkout-master.png[HEAD moves when you checkout]

That command did two things.
It moved `HEAD` back to point to `master`, and it changed the files in your working directory back
to the snapshot pointed to by `master`.
The work you've done in `testing` isn't affected.

[NOTE]
.Switching branches changes files in your working directory
====
It's important to note that after switching branches, your working directory now contains the files from the
latest commit in the branch you just switched to. If you have uncommitted changes in your working directory
that can't be automatically merged into the branch you're attempting to switch to, Git doesn't let you switch.
====

Let's make a few changes and commit again. Remember, your current branch is `master`.

[source,console]
----
$ vim test.rb
$ git commit -a -m 'Make other changes'
----

Now your project history has diverged (see <<divergent_history>>).
You created and switched to `testing`, did some work on it, and then switched back to `master`
and did more work there.
You can switch back and forth between branches and merge them together when you're ready.
And you did all that with simple `git branch`, `git checkout`, and `git commit` commands.

[[divergent_history]]
.Divergent history
image::images/advance-master.png[Divergent history]

You can also easily see this by running `git log --oneline --decorate --graph --all`.
You see the history of your commits, showing where your branch pointers are and how your branches have diverged. 

[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) Make other changes
| * 87ab2 (testing) Make a change
|/
* f30ab Add feature #32 - ability to add new formats to the central interface
* 34ac2 Fix bug #1328 - stack overflow under certain conditions
* 98ca9 Initial commit of my project
----

Because a branch in Git is actually a small file that contains the 40-character SHA-1 hash of the
commit it points to, branches are cheap to create and destroy.
Creating a new branch is as quick and simple as creating a file containint an SHA-1 hash.

This is in sharp contrast to the way most older VCS tools implement branches, which involves copying
all of the project's files into a second directory.
This can take quite a while, depending on the size of the project. In Git this is always instantaneous
because only an SHA-1 hash has to be written.
This encourages developers to create and use branches often.

Let's see why.

[NOTE]
.Creating a new branch and switching to it at the same time
====
You often want to create a new branch and switch to it at the same time.
This can be done in one operation by running `git checkout -b <newbranchname>`.
====

[NOTE]
====
From Git version 2.23 onwards you can run `git switch` instead of `git checkout` to:

- Switch to an existing branch: `git switch testing-branch`.
- Create a new branch and switch to it: `git switch -c new-branch`.
  The `-c` flag stands for create, you can also use the full flag: `--create`.
- Return to your previously checked out branch: `git switch -`.
====
