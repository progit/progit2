=== Branching Workflows

You now have the basics of branching and merging down. In this section, we cover some common ways
they can make your job easier.

==== Long-Running Branches

(((branches, long-running)))
Because Git uses a simple three-way merge, frequent merging of one branch into another is generally easy to do.
This means you can have several active branches for different stages of your development cycle,
and merge regularly as your cycle progresses.

Many Git developers embrace this approach, and only have production code in `master` -- possibly
only code that has been or is about to be released. They have another branch named `develop` or `next`
that they work from to test stability. It isn't necessarily always stable, but whenever it
gets to a stable state, it can be merged into `master`. This test branch is used to pull in topic
branches (short-lived branches, like your earlier `iss53`) when they're ready, to make sure they
pass all tests and don't introduce bugs.

In reality, we're talking about pointers along the line of commits you're making.
The stable branches are farther to the left in your commit history, and the bleeding-edge branches
are farther to the right.

.A linear view of progressive-stability branching
image::images/lr-branches-1.png[A linear view of progressive-stability branching]

It's generally easier to think about them as paths, where commits graduate to a more stable
path when they're fully tested.

[[lrbranch_b]]
.A path view of progressive-stability branching
image::images/lr-branches-2.png[A path view of progressive-stability branching]

You can follow this approach for several levels of stability.
Some larger projects have a `proposed` or `pu` (proposed updates) branch that contains merged
branches that may not be ready to go into `next` or `master`. The idea is that your branches are
at various levels of stability. When they reach a more stable level, they're merged into the branch above them.
Again, having multiple long-running branches isn't necessary, but it's often helpful,
especially when you're dealing with very large or complex projects.

[[_topic_branch]]
==== Topic Branches

(((branches, topic)))
Topic branches, however, are useful in projects of any size.
A topic branch is a short-lived branch that you create for a single particular purpose, such as
fixing a bug or adding a feature. This is something you've likely never done with a VCS before
because it's generally too expensive to create and merge branches. But in Git it's common to create, work on,
merge, and delete branches several times a day.

You saw this in the last section with `iss53` and `hotfix`.
You deleted these branches right after merging them into your main branch.
This technique allows you to context-switch quickly and completely -- because your work is
separated into paths where all the changes for the branch's goal are done.
You can keep the changes there for minutes, days, or months, and merge them when they're ready,
regardless of the order in which they were created or worked on.

Consider an example of doing some work on `master`, creating `iss91` for an issue, working on it for a bit,
creating `iss91v2` to try another way of handling the same thing, going back to `master` and working there
for a while, and then creating `dumbidea` to do some work that you're not sure is a good idea. Your commit history
looks something like

.Multiple topic branches
image::images/topic-branches-1.png[Multiple topic branches]

Now, let's say you decide you like the solution in `iss91v2` best. You also showed `dumbidea` to your coworkers and they
think it's great. You can throw away the original `iss91` (losing commits `C5` and `C6`) and merge
in the other two branches. Your history then looks like

.History after merging `dumbidea` and `iss91v2`
image::images/topic-branches-2.png[History after merging `dumbidea` and `iss91v2`]

We go into more detail about the various possible workflows in
<<ch05-distributed-git#ch05-distributed-git>>, so before you decide which branching
scheme your next project will use, be sure to read that chapter.

It's important to remember that all these branches are completely local.
When you're branching and merging, everything is being done only in your Git repository -- no
communication with other servers is happening.
