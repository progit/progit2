[[_branch_management]]
=== Branch Management

(((branches, managing)))
Now that you've created, merged, and deleted some branches, let's look at some branch-management techniques that will come in handy when you begin using branches all the time.

`git branch` does more than just create and delete branches.(((git commands, branch)))
If you run it with no arguments, you see a simple listing of your branches.

[source,console]
----
$ git branch
  iss53
* master
  testing
----

The `*` character that prefixes `master` indicates the branch that you currently have checked out (i.e.,
the branch that `HEAD` points to). This means that if you commit now, `master` moves forward.
To see the last commit on each branch, run `git branch -v`.

[source,console]
----
$ git branch -v
  iss53   93b412c Fix javascript issue
* master  7a98805 Merge branch 'iss53'
  testing 782fd34 Add scott to the author list in the readme
----

The `--merged` and `--no-merged` flags are useful for filtering this list to contain only
branches that you have or haven't yet merged into the branch you're currently on.
To see which branches are already merged into the branch you're on, run `git branch --merged`.

[source,console]
----
$ git branch --merged
  iss53
* master
----

Because you already merged in `iss53` earlier, you see it in the output.
Branches in this list without the `*` in front of them are generally fine to delete
by running `git branch -d`. You've already merged them into another branch,
so you're not going to lose anything.

To see all the branches that contain changes you haven't yet merged in, run `git branch --no-merged`.

[source,console]
----
$ git branch --no-merged
  testing
----

Any branches it shows contain changes that haven't been merged in yet.
Trying to delete them with `git branch -d` fails.

[source,console]
----
$ git branch -d testing
error: The branch 'testing' is not fully merged.
If you are sure you want to delete it, run 'git branch -D testing'.
----

If you really do want to delete the branch and lose any unmerged changes, you can force the deletion with the `-D` flag to `git b ranch`, as the helpful message points out.

[TIP]
====
The options described above, `--merged` and `--no-merged`, if not given a commit or
branch name as an argument, show what is, respectively, merged or not merged into your
_current_ branch.

You can always provide an additional argument to show the merge state with respect
to some other branch without checking out that other branch first. For example, to show
what isn't merged into `master`

[source,console]
----
$ git checkout testing
$ git branch --no-merged master
  topicA
  featureB
----
====

==== Changing a branch name

[CAUTION]
====
Do not rename branches that are in use by other collaborators.
Do not rename a branch (like master, main, or mainline) without having read the section <<_changing_master>>.
====

Suppose you have a branch that's called `bad-branch-name` and you want to change it to `corrected-branch-name`, while keeping all commit history.
You also want to change the branch name on the remote (GitHub, GitLab, other server).
How do you do this?

Rename the branch locally by running `git branch --move`.

[source, console]
----
$ git branch --move bad-branch-name corrected-branch-name
----

This replaces `bad-branch-name` with `corrected-branch-name`, but this change is only local for now.
To let others see the corrected branch on the remote, push the branch.

[source,console]
----
$ git push --set-upstream origin corrected-branch-name
----

Now we take a brief look at where we are now.

[source, console]
----
$ git branch --all
* corrected-branch-name
  main
  remotes/origin/bad-branch-name
  remotes/origin/corrected-branch-name
  remotes/origin/main
----

Notice that you're on the branch `corrected-branch-name` and it's also available on the remote.
However, the branch with the bad name is also still there but you can delete it by running

[source,console]
----
$ git push origin --delete bad-branch-name
----

Now the bad branch name is fully replaced with the corrected branch name.

[[_changing_master]]
===== Changing the master branch name

[WARNING]
====
Changing the name of a branch will break the integrations, services, helper utilities and build/release scripts that your repository uses.
Before you do this, make sure you consult with your collaborators.
Also, make sure you do a thorough search through your repository and update any references to the old branch name in your code and scripts.
====

Rename your local `master` into `main` by running

[source,console]
----
$ git branch --move master main
----

There's no local `master` anymore, because it's been renamed to `main`.

For others see the new `main`, push it to the remote.
This makes the renamed branch available there.

[source,console]
----
$ git push --set-upstream origin main
----

Now we end up with the following state:

[source,console]
----
$ git branch --all
* main
  remotes/origin/HEAD -> origin/master
  remotes/origin/main
  remotes/origin/master
----

Your local `master` is gone, and has been replaced with `main`.
The `main` is present on the remote.
However, the old `master` is still present on the remote.
Other collaborators will continue to use the `master` branch as the base of their work, until you make some further changes.

There are a few more tasks to go to complete the transition:

* Any projects that depend on this one will need to update their code and/or configuration.
* Update any test-runner configuration files.
* Adjust build and release scripts.
* Redirect settings on your repository for things like the repository's default branch, merge rules, and other things that match branch names.
* Update references to the old branch in documentation.
* Close or merge any pull requests that target the old branch.

After you've done all these , and are certain `main` performs just as `master` , you can delete the `master` branch:

[source, console]
----
$ git push origin --delete master
----
