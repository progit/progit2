=== Basic Branching and Merging

Let's go through a simple example of branching and merging using a real-world workflow.
Follow these steps.

. Do some work on a website.
. Test and then commit the work to your production branch.
. Create a branch for a new story.
. Do some work in the new story branch.

At this point, you receive a call saying that there's a critical issue on the website
and you need to create a hotfix. Do the following:

. Switch to your production branch.
. Create a branch to add the hotfix.
. After the hotfix is tested, merge the hotfix branch into the production branch.
. Switch back to your new story branch and continue working.

[[_basic_branching]]
==== Basic Branching

(((branches, basic workflow)))
First, let's say you're working on your website and have a couple of commits already on `master`.

.A simple commit history
image::images/basic-branching-1.png[A simple commit history]

You've decided that you're going to work on issue #53 in your issue-tracking system.
To create a branch and switch to it at the same time, run `git checkout` with the `-b` flag.

[source,console]
----
$ git checkout -b iss53
Switched to a new branch "iss53"
----

This is shorthand for:

[source,console]
----
$ git branch iss53
$ git checkout iss53
----

.Creating a new branch pointer
image::images/basic-branching-2.png[Creating a new branch pointer]

Work on issue #53 and make a commit (C3).
This moves `iss53` forward, because that's the branch you're on (that is, `HEAD` is pointing to `iss53`).

[source,console]
----
$ vim index.html
$ git commit -a -m 'Create new footer [issue 53]'
----

.The `iss53` branch has moved forward with your work
image::images/basic-branching-3.png[The `iss53` branch has moved forward with your work]

Now you get a call saying that there's an issue with the website that's running the code from `master`,
and you need to fix it immediately.
When using Git you don't have to deploy your fix along with the changes you've made in `iss53`.
You also don't have to put a lot of effort into reverting the changes in `iss53` before you can work
on applying your fix to `master`. All you have to do is checkout `master`.

However, before doing so, note that if your working directory or staging area has uncommitted
changes that conflict with the branch you're checking out, Git doesn't let you switch branches.
It's best to have a clean working directory, that is a working directory with no uncommitted changes,
when you switch branches.
There are ways to get around this (namely, stashing, and commit amending) that we'll cover later on,
in <<ch07-git-tools#_git_stashing>>.
For now, let's assume you've committed all your changes in `iss53`, so you can switch to `master`.

[source,console]
----
$ git checkout master
Switched to branch 'master'
----

At this point, your working directory contains the state of the project that existed after you made commit `C2`.
This is exactly the way it was before you started working on issue #53.
This is an important point to remember. When you switch branches, Git automatically changes the content of
your working directory to look like it did the last time you committed on the branch you're switching to.

Next, create the hotfix. Start by creating a hotfix branch.

[source,console]
----
$ git checkout -b hotfix
Switched to a new branch 'hotfix'
$ vim index.html
$ git commit -a -m 'Fix broken email address'
[hotfix 1fb7853] Fix broken email address
 1 file changed, 2 insertions(+)
----

.Hotfix branch based on `master`
image::images/basic-branching-4.png[Hotfix branch based on `master`]

Run your tests, make sure the hotfix does what you want, and merge it back into `master` to deploy
to your production web server. Do this by running `git merge`.(((git commands, merge)))

[source,console]
----
$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward
 index.html | 2 ++
 1 file changed, 2 insertions(+)
----

Notice the term `Fast-forward`.
Because the commit (`C4`) pointed to by the branch you merged in (`hotfix`) is an
child of the commit (`C2`) you're on, Git simply moves `master` forward to point to
what `hotfix` is pointing to.

To put that another way, when merging one commit (`hotfix`) with another commit (`master`)
that can be reached by following the first commit's (`hotfix`) history, Git simplifies things
by moving the pointer (`master`) forward to
the value of the pointer (`hotfix`) being merged because there's nothing that actually needs merging -- this
is called a `fast-forward` merge.

Your change is now pointed to by `master`, and you can now deploy the fix.

.`master` is fast-forwarded to `hotfix`
image::images/basic-branching-5.png[`master` is fast-forwarded to `hotfix`]

After your super-important fix is deployed, you're ready to switch back to the work you
were doing before you were interrupted.
However, first delete `hotfix` because you no longer need it -- `master` points at the same place.
Delete it with the `-d` flag to `git branch`.

[source,console]
----
$ git branch -d hotfix
Deleted branch hotfix (3a0874c).
----

Remember, this just deletes a pointer -- none of your files are changed.

Now you can switch back to `iss53` and continue working on it.

[source,console]
----
$ git checkout iss53
Switched to branch "iss53"
$ vim index.html
$ git commit -a -m 'Finish the new footer [issue 53]'
[iss53 ad82d7a] Finish the new footer [issue 53]
1 file changed, 1 insertion(+)
----

.Work continues on `iss53`
image::images/basic-branching-6.png[Work continues on `iss53`]

It's worth noting here that the work you did in `hotfix` isn't contained in `iss53`.
If you need to pull the hotfix into `iss53`, merge `master` into `iss53` by running `git merge master`,
or wait to integrate the work until you decide to merge `iss53` back into `master` later.

[[_basic_merging]]
==== Basic Merging

(((branches, merging)))(((merging)))
Suppose you've decided that your work on `iss53` is complete and ready to be merged into `master`.
To do that, merge `iss53` into `master`, much like you merged `hotfix` into `master` earlier.
All you have to do is check out the branch you wish to merge into and then run `git merge`.

[source,console]
----
$ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.
index.html |    1 +
1 file changed, 1 insertion(+)
----

This looks a bit different than the `hotfix` merge you did earlier.
In this case, the branches being merged diverged from an older common commit (`C2`).
Because the latest commit (`C4`) on the branch you're on (`master`) isn't a direct ancestor of the
latest commit (`C5`) on the branch you're merging in (`iss53`), Git has some extra work to do.
In this case, Git does a three-way merge, using the two commits pointed to by the branch tips (`C4` and `C5`)
and their common ancestor (`C2`).

.Three snapshots used in a typical merge
image::images/basic-merging-1.png[Three snapshots used in a typical merge]

Instead of just moving `master` forward, Git creates a new snapshot that results
from this three-way merge and automatically creates a new commit (`C6`) that points to it.
This is referred to as a merge commit, and is special in that it has more than one parent.

.A merge commit
image::images/basic-merging-2.png[A merge commit]

Now that your work is merged, you have no further need for `iss53`
so you can delete it.

[source,console]
----
$ git branch -d iss53
----

[[_basic_merge_conflicts]]
==== Basic Merge Conflicts

(((merging, conflicts)))
Occasionally, this process doesn't go smoothly.
If you changed the same part of the same file differently in the two branches you're merging,
Git doesn't know how to merge them cleanly.  If your fix for issue #53 modified the same part
of a file as the `hotfix`, you get a merge conflict that looks something like

[source,console]
----
$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.
----

Git didn't automatically create a new merge commit.
It paused the process while you resolve the conflict.
To see which files are unmerged at any point after a merge conflict, run `git status`.

[source,console]
----
$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add <file>..." to mark resolution)

    both modified:      index.html

no changes added to commit (use "git add" and/or "git commit -a")
----

Anything with merge conflicts that haven't been resolved is listed as unmerged.
Git inserts standard conflict-resolution marker characters into the files containing conflicts to make it easier
to find and resolve those conflicts. Your file contains a section that looks something like

[source,html]
----
<<<<<<< HEAD:index.html
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
 please contact us at support@github.com
</div>
>>>>>>> iss53:index.html
----

This means the conflicts in index.html in `HEAD` (on `master`, because that was the branch
you had checked out when you ran `git merge`) are in the top part of that section
(everything above the `=======`), while the conflicts in `iss53` are in the bottom part.
In order to resolve the conflict, you have to either choose one side or the other,
or merge the content yourself. For instance, you might resolve this conflict by replacing
the entire block with

[source,html]
----
<div id="footer">
please contact us at email.support@github.com
</div>
----

This resolution has a little from each section, and you've removed the `<<<<<<<`, `=======`,
and `>>>>>>>` lines. After you've resolved all the conflicts, run `git add` on each
file to put their latest content in the staging area. You still have to run `git commit`
to actually commit the changes.

To use a graphical tool to resolve conflicts, run `git mergetool`, which fires up a visual
merge tool and walks you through resolving the conflicts.(((git commands, mergetool)))

[source,console]
----
$ git mergetool

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge
Merging:
index.html

Normal merge conflict for 'index.html':
  {local}: modified file
  {remote}: modified file
Hit return to start merge resolution tool (opendiff):
----

To use a merge tool other than the default (Git chose `opendiff` in this case because the command was
run on a Mac), pick one of the supported tools listed at the top after "one of the following tools."
Just type the name of the tool you'd rather use.

[NOTE]
====
If you need more advanced tools for resolving tricky merge conflicts, we cover more on merging in <<ch07-git-tools#_advanced_merging>>.
====

After you exit the merge tool, Git asks you if the merge was successful.
If say that it was, Git stages the file for you.
Run `git status` again to verify that all conflicts have been resolved.

[source,console]
----
$ git status
On branch master
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:

    modified:   index.html
----

If you're happy with that, and you verify that everything that had conflicts has been staged,
run `git commit` to finalize the merge commit.
The commit message by default looks something like

[source,console]
----
Merge branch 'iss53'

Conflicts:
    index.html
#
# It looks like you may be committing a merge.
# If this is not correct, please remove the file
#	.git/MERGE_HEAD
# and try again.


# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# All conflicts fixed but you are still merging.
#
# Changes to be committed:
#	modified:   index.html
#
----

If you think it would be helpful to others looking at this merge in the future, modify
this commit message to contain details about how you resolved the merge and explain why you made
the changes if it isn't obvious.
