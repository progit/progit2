[[_rebasing]]
=== Rebasing

(((rebasing)))
Git provides two ways to incorporate changes from one branch into another: merging and rebasing.
In this section you learn what rebasing is, how to do it, why it's an amazing tool, and when to not do it.

==== The Basic Rebase

If you go back to an earlier example from <<_basic_merging>>, you see that your work diverged and you made
commits on two different branches.

.Simple divergent history
image::images/basic-rebase-1.png[Simple divergent history]

The easiest way to combine the branches, as we've already seen, is by running `git merge`.
It performs a three-way merge of the two latest branch snapshots (`C3` and `C4`) and the most
recent common ancestor of the two (`C2`), creating a new commit (`C5`).

[[rebasing-merging-example]]
.Merging to integrate diverged work history
image::images/basic-rebase-2.png[Merging to integrate diverged work history]

However, there's another way. You can take the changes introduced in `C4` and reapply them on top of `C3`.
Git calls this _rebasing_.
With `git rebase`, all the changes that were committed on one branch are replayed on another
branch.(((git commands, rebase)))

In this example, run

[source,console]
----
$ git checkout experiment
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: added staged command
----

This works by going to the common ancestor (`C2`) of the two branches (your current
branch (`experiment`) and the one you're rebasing onto (`master`)),
getting the changes introduced by each commit (`C4`) of the branch you're on,
saving those changes to temporary files, resetting the current branch to the branch you're
rebasing onto (`master`), and finally applying each change in turn, resulting in `C4'`.

.Rebasing the change introduced in `C4` onto `C3`
image::images/basic-rebase-3.png[Rebasing the change introduced in `C4` onto `C3`]

At this point, go back to `master` and do a fast-forward merge.

[source,console]
----
$ git checkout master
$ git merge experiment
----

.Fast-forwarding the `master` branch
image::images/basic-rebase-4.png[Fast-forwarding the `master` branch]

Now the snapshot in `C4'` is exactly the same as the one in `C5` in <<rebasing-merging-example,the merge example>>.
There's no difference in the end result, but rebasing makes a cleaner history.
If you run `git log` on a rebased branch, it looks like all the commits happened in series,
even when they originally happened in parallel.

You often do this to make sure your commits apply cleanly on a remote branch -- perhaps in a project
to which you contribute but you don't maintain. In this case, you do your work in a branch and then
rebase your work onto `origin/master` when you're ready to submit your patches to the main project.
That way, the maintainer doesn't have to do any integration work -- just a fast-forward merge.

Note that the snapshot in the final commit you end up with, whether it's the last of the commits
for a rebase or the final merge commit after a merge, is the same -- it's only the history that's different.
Rebasing replays changes from one branch onto another in the order they were introduced,
whereas merging takes the endpoints and merges them together.

==== More Interesting Rebases

Your rebase can also replay on something other than the rebase target branch.
Take a history like <<rbdiag_e>>, for example.
You created a topic branch (`server`) to add some server-side features to your project,
and made a commit (`C3`). Then, you created a branch (`client`) to make some client-side
changes and committed a few times (`C8` and `C9`).
Finally, you went back to `server` and made a few more commits (`C4` and `C10`).

[[rbdiag_e]]
.A history with a topic branch off another topic branch
image::images/interesting-rebase-1.png[A history with a topic branch off another topic branch]

Suppose you decide to merge your client-side changes into your mainline, but you want to hold off on the
server-side changes until they've been tested further.
You can take the changes on `client` that aren't on `server` (`C8` and `C9`) and replay them
onto `master` by using the `--onto` flag of `git rebase`.

[source,console]
----
$ git rebase --onto master server client
----

This says check out `client`, figure out the patches from the common ancestor
of `client` and `server` (`C3`), and then replay them onto `master`.
It's a bit complex, but the result is very nice.

.Rebasing a topic branch off another topic branch
image::images/interesting-rebase-2.png[Rebasing a topic branch off another topic branch]

Now fast-forward `master` (see <<rbdiag_g>>).

[source,console]
----
$ git checkout master
$ git merge client
----

[[rbdiag_g]]
.Fast-forwarding your `master` branch to include the `client` branch changes
image::images/interesting-rebase-3.png[Fast-forwarding your `master` branch to include the `client` branch changes]

Let's say you decide to merge in `server` as well.
Rebase `server` onto `master` without checking out `server` first by running
`git rebase [basebranch] [topicbranch]` -- which checks out the topic branch (`server`)
and replays it onto the base branch (`master`).

[source,console]
----
$ git rebase master server
----

This replays `server` on top of `master`, as shown in <<rbdiag_h>>.

[[rbdiag_h]]
.Rebasing your `server` branch on top of your `master` branch
image::images/interesting-rebase-4.png[Rebasing your `server` branch on top of your `master` branch]

Then, fast-forward the base branch (`master`).

[source,console]
----
$ git checkout master
$ git merge server
----

You can remove `client` and `server` because their content is integrated and you don't need them anymore.
This leaves your history for this entire process looking like <<rbdiag_i>>.

[source,console]
----
$ git branch -d client
$ git branch -d server
----

[[rbdiag_i]]
.Final commit history
image::images/interesting-rebase-5.png[Final commit history]

[[_rebase_peril]]
==== The Perils of Rebasing

(((rebasing, perils of)))
Ahh, but the bliss of rebasing isn't without drawbacks, which can be summed up in a single line:

*Do not rebase commits that exist outside your repository on which people might have based work.*

If you follow that guideline, you'll be fine.
If you don't, people will hate you, and you'll be scorned by friends and family.

When you rebase, you're abandoning existing commits and creating new ones that are similar but different.
If you push commits somewhere and others pull them and base work on them, and then you rewrite those commits
with `git rebase` and push them again, your collaborators have to re-merge their work and things get messy
when you try to pull their work back into yours.

Let's look at an example of how rebasing that you've made public can cause problems.
Suppose you clone from a server and then do some work on the cloned repository.
Your commit history is

.Clone a repository, and base some work on it
image::images/perils-of-rebasing-1.png["Clone a repository, and base some work on it"]

Now, someone else does more work that includes a commit on master ('C4'), a branch (`C5`),
and a merge (`C6`), and then pushes that work to the server.
You fetch it and merge the new remote branch into your work as `C7`,
making your history look like

.Fetch more commits, and merge them into your work
image::images/perils-of-rebasing-2.png["Fetch more commits, and merge them into your work"]

Next, the person who pushed the merged work (`C6`) decides to go back and rebase their work instead.
They run `git push --force` to overwrite the history on the server.
You then fetch from that server, bringing down the new commits.

[[_pre_merge_rebase_work]]
.Someone pushes rebased commits, abandoning commits you've based your work on
image::images/perils-of-rebasing-3.png["Someone pushes rebased commits, abandoning commits you've based your work on"]

Now you're both in a pickle.
If you run `git pull`, you create a merge commit which includes both lines of history, and your repository looks like

[[_merge_rebase_work]]
.You merge in the same work again into a new merge commit
image::images/perils-of-rebasing-4.png[You merge in the same work again into a new merge commit]

If you run `git log` when your history looks like this, you see two commits (`C4'` and `C8`) that have the same author,
date, and message, which is confusing. Furthermore, if you push this history back to the server, you reintroduce 
all those rebased commits, which can further confuse people. It's pretty safe to assume that the
other developer doesn't want `C4` and `C6` to be in the history. That's why they rebased in the first place.

[[_rebase_rebase]]
==== Rebase When You Rebase

If you *do* find yourself in a situation like this, Git has some magic powers that might help you.
If someone on your team force pushes changes that overwrite work that you've based work on,
the challenge is to figure out what's yours and what they've rewritten.

It turns out that in addition to the commit SHA-1 hash, Git also calculates a checksum that's based on just
the patch introduced with the commit. This is called a `patch-id`.

If you pull work that was rewritten and rebase it on top of the new commits from your partner,
Git can often successfully figure out what's uniquely yours and apply the changes back on top of the new branch.

For instance, in the previous scenario, if instead of doing a merge when we're at <<_pre_merge_rebase_work>> we
run `git rebase teamone/master`, Git

* Determines what work is unique to our branch (`C2`, `C3`, `C4`, `C6`, `C7`)
* Determines which are not merge commits (`C2`, `C3`, `C4`)
* Determines which have not been rewritten into the target branch (just `C2` and `C3`, since `C4` is the same patch as `C4'`)
* Applies those commits to the top of `teamone/master`

So instead of the result we see in <<_merge_rebase_work>>, you'd end up with something more like <<_rebase_rebase_work>>.

[[_rebase_rebase_work]]
.Rebase on top of force-pushed rebase work
image::images/perils-of-rebasing-5.png[Rebase on top of force-pushed rebase work]

This only works if the `C4` and `C4'` commits your partner made are almost exactly the same patch.
Otherwise `git rebase` isn't able to tell that they're duplicates and adds another C4-like patch (which
probably fails to apply cleanly, since the changes would already be at least somewhat there).

You can also simplify this by running `git pull --rebase` instead of a normal `git pull`. Or, you could do
it manually by running `git fetch` followed by `git rebase teamone/master` in this case.

If you're running `git pull` and want to make `--rebase` the default, set the `pull.rebase` config value by
running `git config --global pull.rebase true`.

If you treat rebasing as a way to clean up commits before anyone could base work on them,
because either they aren't publicly available or you're the only one working on the commits, then you're fine.
If you rebase commits that have already been pushed publicly, and people may have based work
on those commits, then you may be in trouble.

If you have to go against this advice, make sure everyone knows to run `git pull --rebase` to
try to reduce the pain.

==== Rebase vs. Merge

(((rebasing, vs. merging)))(((merging, vs. rebasing)))
Now that you've seen rebasing and merging in action, you may be wondering which is better.
Before answering this, let's step back a bit and talk about what history means.

One point of view on this is that your repository's commit history is a *record of what actually happened.*
It's a historical document, valuable in its own right, and shouldn't be tampered with.
From this angle, changing the commit history is almost blasphemous; you're _lying_ about what actually transpired.
So what if there was a messy series of merge commits?
That's how it happened, and the repository should preserve that for posterity.

The opposing point of view is that the commit history is the *story of how your project was made.*
You wouldn't publish the first draft of a book since it deserves careful editing before being published.
This is the camp that uses tools like rebase to tell the story in the way that's best for future readers.

Now, to the question of whether merging or rebasing is better. Hopefully you see that it's not that simple.
Git is a powerful tool, and allows you to do many things to your history, but every team and every project is different.
Now that you know how both of these things work, it's up to you to decide which is best in your particular situation.
