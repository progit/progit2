[[_remote_branches]]
=== Remote Branches

(((branches, remote)))(((references, remote)))
Remote references are references (pointers) in a local repository that point to branches, tags,
and other things in remote repositories. You see a full list of remote references explicitly by
running `git ls-remote [remote]`, or `git remote show [remote]` for only remote branches.
These commands require online access because they contact remote repositories
to retrieve the information the commands display.

Another way of dealing with remote references is by using remote-tracking branches,
which are local references to remote branches.
They appear as local branches that you can't move. Instead, they're updated automatically whenever
you reference the remote branch. Remote-tracking branches act as bookmarks to remind you where the
branches in your remote repositories were the last time you contacted them.

They have names of the form `(remote)/(branch)`. For instance, to see what `master` on your `origin` remote
looked like the last time you contacted it, checkout `origin/master`. If you were working on an issue with
a partner and they made a change to `iss53` on the `origin` remote, you might have your own local `iss53`,
but the remote-tracking branch on the server would point to the commit at `origin/iss53`.

This may be a bit confusing, so let's look at an example.
Let's say you have a Git server on your network called `git.ourcompany.com`.
If you clone a repository from it, Git automatically creates an `origin` remote reference, copies all the data
from the remote repository into a local repository, and creates a local pointer called `origin/master` pointing
to `master` on the remote repository. Git also creates your own local `master` starting at
the same commit as origin's `master`, so you have something to work from.

[NOTE]
."`origin`" isn't a special name
====
Just like the branch name `master` doesn't have any special meaning in Git, neither does `origin`. `master` is
the default name for the initial branch created when you run `git init`, which is the reason it's widely
used. `origin` is the default name for a remote branch when you run `git clone`. If you run
`git clone -o booyah` instead, then `booyah/master` is your default remote branch.(((origin)))

====

.Server and local repositories after cloning
image::images/remote-branches-1.png[Server and local repositories after cloning]

If you do some work on your local `master`, and, in the meantime, someone else modifies `master`
on `git.ourcompany.com`, then the two `master` branches move forward independently.
Also, as long as you don't contact your origin server, your `origin/master` doesn't move.

.Local and remote work can diverge
image::images/remote-branches-2.png[Local and remote work can diverge]

To synchronize your repository with the remote repository, run `git fetch origin`.
This command fetches any commits from `origin/master` that you don't already have, and updates
your local repository, moving your `origin/master` pointer to its up-to-date position.

.`git fetch` updates your remote-tracking branches
image::images/remote-branches-3.png[`git fetch` updates your remote-tracking branches]

To demonstrate what having multiple remote branches looks like, let's assume you have another internal Git
server that's used only for development by one of your development teams.
This server is at `git.team1.ourcompany.com`.
Add it as a new remote reference to the project you're currently working on by running
`git remote add`, as we described in <<ch02-git-basics-chapter#ch02-git-basics-chapter>>.
Name this remote `teamone`, which is your shortname for that remote repository.

.Adding another server as a remote
image::images/remote-branches-4.png[Adding another server as a remote]

Now, run `git fetch teamone` to fetch everything on the remote `teamone` server that you don't have yet on your computer.
Because `teamone` has a subset of the data on your `origin` server, Git fetches no data but instead creates
a remote-tracking branch called `teamone/master` and points it to the commit that `teamone` has as its `master`.

.Remote-tracking branch for `teamone/master`
image::images/remote-branches-5.png[Remote-tracking branch for `teamone/master`]

[[_pushing_branches]]
==== Pushing

(((pushing)))
To share a branch with the world, push it to a remote server that you have write access to
and the rest of the world can read from.
Even after pushing, your local branches aren't automatically synchronized with the remote server you write to.
You have to explicitly push the local branches you want to share.

If you have a branch named `serverfix` that you want to share, push it the same way you pushed
your first branch. Run `git push <remote> <branch>`.(((git commands, push)))

[source,console]
----
$ git push origin serverfix
Counting objects: 24, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (15/15), done.
Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.
Total 24 (delta 2), reused 0 (delta 0)
To https://github.com/schacon/simplegit
 * [new branch]      serverfix -> serverfix
----

This is a bit of a shortcut.
This means take my `serverfix` local branch and sync it with the origin's `serverfix` branch.
You can also run `git push origin serverfix:serverfix`, which does the same thing. It says, take my
`serverfix` local branch and sync it with the remote's `serverfix` branch. Use this form to push a local branch
to a remote branch that has a different name than the local branch.
If you don't want the remote branch to be called `serverfix`, you could instead run
`git push origin serverfix:awesomebranch` to push your local `serverfix` to the remote `awesomebranch`.

[NOTE]
.Don't type your password every time
====
If you're using an HTTPS URL in the remote name, the Git server on the remote server prompts you for your
username and password.

If you don't want to enter them every time you push, set up a credential cache.
The simplest configuration is just to keep the cache in memory for a few minutes,
which you can easily do by running `git config --global credential.helper cache`.

For more information on the various credential caching options available, see <<ch07-git-tools#_credential_caching>>.
====

The next time one of your collaborators fetches from the server, they will get a reference to where the server's version of `serverfix` is under the remote branch `origin/serverfix`:

[source,console]
----
$ git fetch origin
remote: Counting objects: 7, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://github.com/schacon/simplegit
 * [new branch]      serverfix    -> origin/serverfix
----

It's important to note that fetching new remote-tracking branches doesn't automatically create local,
editable copies of the files in the remote branches.
In the example above, for example, you don't get a new `serverfix` branch -- you only have
an `origin/serverfix` pointer that you can't modify.

To merge this work into your current working directory, run `git merge origin/serverfix`.
If you want your own `serverfix` branch that you can work on, base it off your remote-tracking branch.

[source,console]
----
$ git checkout -b serverfix origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

This gives you a local branch that you can work on that starts where `origin/serverfix` points.

[[_tracking_branches]]
==== Tracking Branches

(((branches, tracking)))(((branches, upstream)))
Checking out a local branch from a remote-tracking branch automatically creates
what's called a `tracking branch` (and the branch it tracks is called an upstream branch).
Tracking branches are local branches that have a direct relationship to a remote branch.
If you're on a tracking branch and run `git pull`, Git automatically knows which server to fetch
from and which branch to merge into.

When you clone a repository, this generally automatically creates `master` that tracks `origin/master`.
However, you can set up other tracking branches -- ones that track branches on other remotes, or don't track `master`.
The simple case is the example you just saw: running `git checkout -b [branch] [remotename]/[branch]`.
This is a common enough operation that Git provides the `--track` flag.

[source,console]
----
$ git checkout --track origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

In fact, this is so common that there's even a shortcut for that shortcut.
If the branch name you're trying to checkout doesn't exist and exactly matches the name of only one remote,
Git creates a tracking branch for you.

[source,console]
----
$ git checkout serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

To set up a local branch with a different name than the remote branch,
you can easily use a different local branch name.

[source,console]
----
$ git checkout -b sf origin/serverfix
Branch sf set up to track remote branch serverfix from origin.
Switched to a new branch 'sf'
----

Now, your local `sf` automatically pulls from `origin/serverfix`.

If you already have a local branch and want to set it to a remote branch you just pulled, or want to
change the upstream branch you're tracking, use the `-u` or `--set-upstream-to` flag
to `git branch` to explicitly set what you're tracking.

[source,console]
----
$ git branch -u origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
----

[NOTE]
.Upstream shorthand
====
When you have a tracking branch set up, you can reference its upstream branch with the `@{upstream}` or `@{u}` shorthand.
So if you're on the `master` branch and it's tracking `origin/master`, run something like `git merge @{u}` instead of `git merge origin/master`.(((@{u})))(((@{upstream})))
====

To see what tracking branches you have set up, add the `-vv` flag to `git branch`.
This lists your local branches with extra information, including what each branch is tracking and if
your local branch is ahead, behind, or both compared to what you're tracking.

[source,console]
----
$ git branch -vv
  iss53     7e424c3 [origin/iss53: ahead 2] Add forgotten brackets
  master    1ae2a45 [origin/master] Deploy index fix
* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] This should do it
  testing   5ea463a Try something new
----

Here we see that `iss53` is tracking `origin/iss53` and is `ahead` by two, meaning that we have two
local commits that aren't pushed to the server. We also see that `master` is tracking `origin/master`
and is up to date. Next, we see that `serverfix` is tracking `server-fix-good` on the `teamone` server
and is ahead by three and behind by one, meaning there's one commit on the remote server we haven't merged in
yet and three local commits that we haven't pushed. Finally, we see that `testing` isn't
tracking any remote branch.

It's important to note that these numbers reflect what existed the last time you fetched from each server.
`git branch -vv` doesn't connect to the servers. It's showing what it has cached from these servers locally.
If you want totally up to date ahead and behind numbers, fetch from all your remotes before running this.
Do that by running

[source,console]
----
$ git fetch --all; git branch -vv
----

==== Pulling

(((pulling)))
While `git fetch` fetches all the changes on the server that you don't have yet, it doesn't modify your
working directory in any way.  It simply gets the data for you to merge yourself.
However, `git pull` is essentially `git fetch` immediately followed by `git merge`.
If you have a tracking branch set up as in the last section, either by explicitly setting it or by
creating it using `git clone` or `git checkout`, `git pull` looks up the server and branch your current
branch is tracking, fetches from that server, and then tries to merge that remote branch into your current branch.

Generally it's better to simply run `git fetch` and `git merge` explicitly as the magic of `git pull` can be confusing.

[[_delete_branches]]
==== Deleting Remote Branches

(((branches, deleting remote)))
Suppose you're done with a remote branch -- say you and your collaborators are finished with a feature and have merged it into your remote's `master` branch.
Delete the remote branch using the `--delete` flag to `git push`.
To delete `serverfix` from the server, run

[source,console]
----
$ git push origin --delete serverfix
To https://github.com/schacon/simplegit
 - [deleted]         serverfix
----

All this does is remove the remote branch from the server. Git generally keeps the data for
a while until garbage collection runs, so if the branch was accidentally deleted, it's easy to rec
