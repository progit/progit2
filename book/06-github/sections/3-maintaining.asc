[[_maintaining_gh_project]]
=== Maintaining a Project

Now that we're comfortable contributing to a project, let's look at creating, maintaining, and administering a project.

==== Creating a New Repository

Let's create a new repository to contain our shared project.
Start by clicking the "`New repository`" button on the right-hand side of the dashboard, or from the `+` button in the top toolbar next to your username as seen in <<_new_repo_dropdown>>.

.The "`Your repositories`" area
image::images/newrepo.png[The “Your repositories” area]

[[_new_repo_dropdown]]
.The "`New repository`" dropdown
image::images/new-repo.png[The “New repository” dropdown]

This takes you to the `new repository` form.

.The "`new repository`" form
image::images/newrepoform.png[The “new repository” form]

All you really have to do here is provide a repository name. The rest of the fields are optional.
For now, just click the `Create Repository` button, and boom -- you have a new repository on GitHub, named `<user>/<project_name>`.

Since your repository is empty, GitHub shows instructions for how to create a brand-new Git repository, or how to connect to an existing Git project.
We don't belabor this here. If you need a refresher, check out <<ch02-git-basics-chapter#ch02-git-basics-chapter>>.

Now that your project is hosted on GitHub, you can give the URL to anyone you want to share your project with.
Every project on GitHub is accessible over HTTPS as `\https://github.com/<user>/<project_name>`, and over SSH as `\git@github.com:<user>/<project_name>`.
Git can fetch from and push to both of these URLs, but it controlls access based on the credentials of the user connecting to them.

[NOTE]
====
It's often preferable to share the HTTPS-based URL for a public project, since the user doesn't need
a GitHub account to access it for cloning. Users need an account and an uploaded SSH key to
access your project if you give them the SSH-based URL. The HTTPS-based URL is also exactly the same
URL they would paste into a browser to view the project.
====

==== Adding Collaborators

If Ben, Jeff, and Louise all have accounts on GitHub, give them push access to your repository
by adding them to your project as `collaborators`. This gives them `push` access, which means they have both
read and write permission.

Click the `Settings` link at the bottom of the right-hand sidebar.

.The repository settings link
image::images/reposettingslink.png[The repository settings link]

Select `Collaborators` from the menu on the left-hand side.
Then, just enter a username into the box, and click `Add collaborator`.
Repeat this as many times as necessary to grant access to everyone you're working with.
To revoke access, just click the `X` on the right-hand side of a collaborator's row.

.The repository collaborators box
image::images/collaborators.png[The repository collaborators box]

==== Managing Pull Requests

Now that you have a project with some code in it and maybe even a few collaborators who also have push access, let's go over what to do when you get a Pull Request.

Pull Requests can either come from a branch in a fork of your repository or they can come from another
branch in the same repository. The only difference is that the ones from a fork are often from people
whose branch you can't push to, and who can't push to yours. With internal Pull Requests generally
both parties have push and pull access to the branch.

For these examples, let's assume you're `tonychacon` and you've created a new Arduino
code project named `fade`.

[[_email_notifications]]
===== Email Notifications

Someone comes along and makes a change to your code and sends you a Pull Request.
You should get an email notification that looks something like <<_email_pr>>

[[_email_pr]]
.Email notification of a new Pull Request
image::images/maint-01-email.png[Email notification of a new Pull Request]

There are a few things to notice about this email.
It shows a small diffstat -- a list of files that have changed in the Pull Request and by how much.
It also gives a link to the Pull Request on GitHub and
a few URLs to use from the command line.

Notice the line that says `git pull <url> patch-1`. This is a simple way to merge a remote
branch without having to add a remote. We went over this quickly in <<_checking_out_remotes>>.
You can create and switch to a topic branch and then run this command to merge the Pull Request.

The other interesting URLs are the `.diff` and `.patch` URLs, which, as you may guess,
provide unified diff and patch versions of the Pull Request.
You could technically merge the Pull Request by running something like

[source,console]
----
$ curl https://github.com/tonychacon/fade/pull/1.patch | git am
----

===== Collaborating on the Pull Request

As we covered in <<ch06-github#ch06-github_flow>>, you can now have a conversation with the person who opened the Pull Request.
You can comment on specific lines of code, comment on whole commits, or comment on the entire Pull Request itself, using GitHub Flavored Markdown.

Every time someone else comments on the Pull Request you continue to get email notifications so you know there's activity.
They each have a link to the Pull Request where the activity is happening. You can also directly respond to the email to comment on the Pull Request thread.

.Responses to emails are included in the thread
image::images/maint-03-email-resp.png[Responses to emails are included in the thread]

Once the code is the way you like and you want to merge it in, either pull the code and merge it locally, either with the `git pull <url> <branch>` syntax we saw earlier, or by adding the fork as a remote, then fetching and merging.

If the merge is trivial, you can also just click the `Merge` button on the GitHub site.
This will do a `non-fast-forward` merge, creating a merge commit even if a fast-forward merge was possible.
Remember, every time you click the merge button, a merge commit is created.
As you see in <<_merge_button>>, GitHub shows all of this information if you click the `Hint` link.

[[_merge_button]]
.Merge button and instructions for merging a Pull Request manually
image::images/maint-02-merge.png[Merge button and instructions for merging a Pull Request manually]

If you decide you don't want to merge the Pull Request, just close the Pull Request and the person who opened it is notified.

[NOTE]
====
I (JF) am not sure the following section will make sense to most readers new to Git.
I'm leaving it in the book in case I'm wrong. I welcome your opinion.
====

[[_pr_refs]]
===== Pull Request Refs

If you're dealing with a *lot* of Pull Requests and don't want to add a bunch of remotes or do a lot of one time pulls, there's a neat trick that GitHub allows.
This is a bit advanced, and we go over the details of this a bit more in <<ch10-git-internals#_refspec>>, but it can be pretty useful.

GitHub actually advertises the Pull Request branches for a repository as sort of pseudo-branches.
By default you don't get them when you clone, but they're there in an obscured way, which you can access pretty easily.

To demonstrate this, we use a low-level Git command (often referred to as a `plumbing` command, which we discribe more in <<ch10-git-internals#_plumbing_porcelain>>) called `git ls-remote`.
This command is generally not used in day-to-day Git operations but it's useful to show what references are present on the server.

If we run this command against the `blink` repository we were using earlier, we get a list of all the branches, tags, and other references in the repository.

[source,console]
----
$ git ls-remote https://github.com/schacon/blink
10d539600d86723087810ec636870a504f4fee4d	HEAD
10d539600d86723087810ec636870a504f4fee4d	refs/heads/master
6a83107c62950be9453aac297bb0193fd743cd6e	refs/pull/1/head
afe83c2d1a70674c9505cc1d8b7d380d5e076ed3	refs/pull/1/merge
3c8d735ee16296c242be7a9742ebfbc2665adec1	refs/pull/2/head
15c9f4f80973a2758462ab2066b6ad9fe8dcf03d	refs/pull/2/merge
a5a7751a33b7e86c5e9bb07b26001bb17d775d1a	refs/pull/4/head
31a45fc257e8433c8d8804e3e848cf61c9d3166c	refs/pull/4/merge
----

If the repository is on GitHub and you have any open Pull Requests, these references are prefixed with `refs/pull/`.
They're basically branches, but since they're not under `refs/heads/` you don't get them normally when you clone or fetch from the server. The process of fetching normally ignores them.

There are two references per Pull Request. The one ending in `/head` points to exactly the same
commit as the last commit in the Pull Request branch. So if someone opens a Pull Request in our
repository and their branch is named `bug-fix` and it points to commit `a5a775`,
then in *our* repository we don't have a `bug-fix` branch (since that's in their fork),
but we have `pull/<pr#>/head` that points to `a5a775`. This means that we can pretty easily
pull every Pull Request branch in one go without having to add a bunch of remotes.

Now, you could do something like fetching the reference directly.

[source,console]
----
$ git fetch origin refs/pull/958/head
From https://github.com/libgit2/libgit2
 * branch            refs/pull/958/head -> FETCH_HEAD
----

This tells Git to connect to the `origin` remote, and download the ref named `refs/pull/958/head`.
Git happily obeys, and downloads everything you need to construct that ref, and puts a pointer to the commit you want under `.git/FETCH_HEAD`.
You can follow that up by running `git merge FETCH_HEAD` into a branch you want to test it in, but that merge commit message looks a bit weird.
Also, if you're reviewing a *lot* of Pull Requests, this gets tedious.

There's also a way to fetch _all_ of the Pull Requests, and keep them up to date whenever you connect to the remote.
Open up `.git/config` in your favorite editor, and look for the `origin` remote.
It should look a bit like

[source,ini]
----
[remote "origin"]
    url = https://github.com/libgit2/libgit2
    fetch = +refs/heads/*:refs/remotes/origin/*
----

That line that begins with `fetch =` is a `refspec`.
It's a way of mapping names on the remote with names in your local repository.
This particular one tells Git "The things on the remote that are under `refs/heads` should go in my local repository under `refs/remotes/origin`".
You can modify this section to add another refspec

[source,ini]
----
[remote "origin"]
    url = https://github.com/libgit2/libgit2.git
    fetch = +refs/heads/*:refs/remotes/origin/*
    fetch = +refs/pull/*/head:refs/remotes/origin/pr/*
----

That last line tells Git all the refs that look like `refs/pull/123/head` should be stored locally like `refs/remotes/origin/pr/123`.
Now, save that file, and run `git fetch`.

[source,console]
----
$ git fetch
# …
 * [new ref]         refs/pull/1/head -> origin/pr/1
 * [new ref]         refs/pull/2/head -> origin/pr/2
 * [new ref]         refs/pull/4/head -> origin/pr/4
# …
----

Now all of the remote Pull Requests are represented locally with refs that act much like tracking branches. They're read-only, and they update when you run `git fetch`.
This makes it super easy to try the code from a Pull Request locally:

[source,console]
----
$ git checkout pr/2
Checking out files: 100% (3769/3769), done.
Branch pr/2 set up to track remote branch pr/2 from origin.
Switched to a new branch 'pr/2'
----

The eagle-eyed among you would note the `head` on the end of the remote portion of the refspec.
There's also a `refs/pull/#/merge` ref on the GitHub side, which represents the commit that would result if you click the `merge` button on the site.
This allows testing the merge before even clicking the button.

===== Pull Requests on Pull Requests

Not only can you open Pull Requests that target `master`, you can actually open a Pull Request targeting any branch on any Git server.
In fact, you can even target another Pull Request.

If you see a Pull Request that's moving in the right direction and you have an idea for a change that depends on it, you're not sure it's a good idea, or you just don't have push access to the target branch, you can open a Pull Request directly to it.

When you go to open a Pull Request, there's a box at the top of the page that specifies which branch you're requesting to push to and which you're requesting to pull from.
Click `Edit` at the right of that box to change not only the branches but also which target fork.

[[_pr_targets]]
.Manually change the Pull Request target fork and branch
image::images/maint-04-target.png[Manually change the Pull Request target fork and branch]

Here specify merging your new branch into another Pull Request or another fork of the project.

==== Mentions and Notifications

GitHub also has a pretty nice notifications system built in that can come in handy when you have questions or need feedback.

In any comment if you start typing a `@` character the form begins to autocomplete with the names and usernames of collaborators or contributors in the project.

.Start typing @ to mention someone
image::images/maint-05-mentions.png[Start typing @ to mention someone]

You can also mention a user who isn't in that dropdown.

When you post a comment mentioning a user, that user is notified. This means that this can be an
effective way of pulling people into conversations rather than forcing them to check back often.
Very often people pull in others to review a Pull Request.

If someone gets mentioned in a Pull Request, they're `subscribed` to the Pull Request and continue getting notifications any time activity occurs on it.
You're also subscribed if you opened the Pull Request, if you're watching the repository, or if you comment on something.
If you no longer wish to receive notifications, there's an `Unsubscribe` button on the page you can click to stop receiving updates.

.Unsubscribe from an Issue or Pull Request
image::images/maint-06-unsubscribe.png[Unsubscribe from an Issue or Pull Request]

===== The Notifications Page

When we mention `notifications` here, we mean a specific way that GitHub tries to get in touch
with you when something happens. There are several ways to configure notifications.
If you go to the `Notification center` tab from the settings page, you see some of the available options.

.Notification center options
image::images/maint-07-notifications.png[Notification center options]

The two choices are to get notifications over `Email` and over the `Web`.
You can choose either, neither, or both.

====== Web Notifications

Web notifications only exist on GitHub, which is the only place you can check them.
If you select this option in your preferences and a notification is triggered for you,
you see a small blue dot over the notifications icon at the top of the page, as seen in <<_not_center>>.

[[_not_center]]
.Notification center
image::images/maint-08-notifications-page.png[Notification center]

If you click the `Notifications` icon, you see a list of all the items you have been notified about,
grouped by project. You can filter by a specific project by clicking on its name in the left hand sidebar.
You can also acknowledge the notification by clicking the `Checkmark` icon next to any notification,
or acknowledge _all_ of the notifications in a project by clicking the `Checkmark` icon at the top of the
group. There's also a mute button next to each checkmark that you can click to stop receiving any
further notifications on that item.

All of these tools are very useful for handling large numbers of notifications.
Many GitHub power users simply turn off email notifications entirely and manage all of their
notifications through this page.

====== Email Notifications

Email notifications are the other way to handle notifications through GitHub.
If you have this turned on you get emails for each notification.
We saw examples of this in <<_email_notification>> and <<_email_pr>>.
The emails is also threaded properly, which is nice if you're using a threaded email client.

There's also a fair amount of metadata embedded in the headers of the email GitHub sends,
which can be really helpful for setting up custom filters and rules.

For instance, if we look at the actual email headers sent to Tony in the email shown in <<_email_pr>>, we see

[source,mbox]
----
To: tonychacon/fade <fade@noreply.github.com>
Message-ID: <tonychacon/fade/pull/1@github.com>
Subject: [fade] Wait longer to see the dimming effect better (#1)
X-GitHub-Recipient: tonychacon
List-ID: tonychacon/fade <fade.tonychacon.github.com>
List-Archive: https://github.com/tonychacon/fade
List-Post: <mailto:reply+i-4XXX@reply.github.com>
List-Unsubscribe: <mailto:unsub+i-XXX@reply.github.com>,...
X-GitHub-Recipient-Address: tchacon@example.com
----

There are a couple of interesting things here. To highlight or re-route email to this particular
project or even this Pull Request, the information in `Message-ID` gives all the data
in `<user>/<project>/<type>/<id>` format.

The `List-Post` and `List-Unsubscribe` fields mean that if you have an email client that understands
them, you can easily post to the list or `Unsubscribe` from the thread. That would be essentially
the same as clicking the `Mute` button on the web version of the notification or `Unsubscribe` on the
Pull Request page itself.

It's also worth noting that if you have both email and web notifications enabled, and you read
the email version of the notification, the web version also is marked as read
if your email client can display images.

==== Special Files

There are a couple of special files that GitHub notices if they're present in your repository.

==== README

The first is `README`, which can be in nearly any format that GitHub recognizes as prose.
For example, it could be `README`, `README.md`, `README.asciidoc`, etc. If GitHub sees a `README`
file in your top level directory, GitHub renders it on the landing page of the project.

Many teams use this file to hold all the relevant project information for someone who might be new to the project.
This generally includes things like

* What the project is for
* How to configure and install it
* An example of how to use it or get it running
* The license that the project is offered under
* How to contribute to it

Since GitHub renders this file, you can embed images or links in it.

==== CONTRIBUTING

The other special file that GitHub recognizes is `CONTRIBUTING`.
If you have a file named `CONTRIBUTING`, with any file extension, GitHub shows this when
anyone starts creating a Pull Request.

[[_contrib_file]]
.Opening a Pull Request when a CONTRIBUTING file exists
image::images/maint-09-contrib.png[Opening a Pull Request when a CONTRIBUTING file exists]

The idea here is that you specify specific things in a CONTRIBUTING file you do or don't want in a
Pull Request sent to your project. This way people may actually read the guidelines before creating
the Pull Request.

==== Project Administration

Generally there aren't many administrative things you can do in a single project,
but there are a couple of items that might be of interest.

===== Changing the Default Branch

If you're using a default branch other than `master` for people to create Pull Requests on or see by default,
you can change the default branch in your repository's settings page under the `Options` tab.

[[_default_branch]]
.Change the default branch for a project
image::images/maint-10-default-branch.png[Change the default branch for a project]

Simply change the default branch in the dropdown and then that's the default branch for all major operations,
including which branch is checked out when someone clones the repository.

===== Transferring a Project

To transfer a project to another user or organization at GitHub, there's a `Transfer ownership` option
at the bottom of the same `Options` tab of your repository settings page.

[[_transfer_project]]
.Transfer a project to another GitHub user or Organization
image::images/maint-11-transfer.png[Transfer a project to another GitHub user or Organization]

This is helpful if you're abandoning a project and want to give ownership away.

Not only does this move the repository, along with all its watchers, to another place,
it also sets up a redirect from your URL to the new location. It also redirect clones and fetches from Git,
not just web requests.
