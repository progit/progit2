=== Scripting GitHub

We've covered all of the major features and workflows of GitHub, but any large group or project
has their own customizations to make or external services to integrate.

Luckily for us, GitHub is really quite scriptable. In this section we cover how to use the
GitHub webhooks system and its API to make GitHub work the way we want.

==== Services and Hooks

Webhooks and Services are the easiest ways for GitHub users to interact with external systems.

===== Services

First we'll take a look at Services.
Both the Webhooks and Services integrations can be found in the Settings section of your repository, where we previously looked to add Collaborators and to change the default branch of your project.
Under the "`Webhooks and Services`" tab you will see something like <<_services_hooks>>.

[[_services_hooks]]
.Services and Hooks configuration section
image::images/scripting-01-services.png[Services and Hooks configuration section]

There are dozens of services you can choose from, most of them integrations into other commercial and open source systems.
Most are for Continuous Integration services, bug and issue trackers, chat rooms, and documentation generators.
We walk through setting up a very simple one, the Email webhook.
If you choose `email` from the `Add Service` dropdown, you get a configuration page like <<_service_config>>.

[[_service_config]]
.Email service configuration
image::images/scripting-02-email-service.png[Email service configuration]

In this case, if we click `Add service`, the email address we specify gets an email message every time
someone pushes to the repository. Services can listen for lots of different types of events,
but most only listen for push events and then respond appropriately.

If there's a system you're using that you'd like to integrate with GitHub, check here to see
if there's an existing service integration available. For example, if you're using Jenkins to
run tests on your codebase, enable the Jenkins builtin service integration to kick off a
test run every time someone pushes to your repository.

===== Webhooks

For something more specific or to integrate with a service that isn't included in this list,
instead use the more generic webhooks system. GitHub repository webhooks are pretty simple.
Specify a URL and GitHub posts an HTTP payload to that URL whenever any event you select occurs.

Generally the way this works is that you create a small web service to receive a GitHub webhook
payload and then have the service do something with the data in the payload.

To enable a webhook, click the `Add webhook` button in <<_services_hooks>>.
This shows a page that looks like <<_webhook>>.

[[_web_hook]]
.Web hook configuration
image::images/scripting-03-webhook.png[Web hook configuration]

The configuration for a webhook is pretty simple.
In most cases simply enter a URL and a secret key and click `Add webhook`.
There are a few options for the events you want GitHub to send you a payload for. The default is to only get a payload for the `push` event, when someone pushes new code to any branch of your repository.

Let's see a small example of a web service that can handle a webhook. We use the Sinatra Ruby web
framework since it's fairly concise and you should be able to easily see what we're doing.

Let's say we want to get an email message if a specific person pushes to a specific branch of our
project when modifying a specific file. We could fairly easily do that with code like

[source,ruby]
----
require 'sinatra'
require 'json'
require 'mail'

post '/payload' do
  push = JSON.parse(request.body.read) # parse the JSON

  # gather the data we're looking for
  pusher = push["pusher"]["name"]
  branch = push["ref"]

  # get a list of all the files touched
  files = push["commits"].map do |commit|
    commit['added'] + commit['modified'] + commit['removed']
  end
  files = files.flatten.uniq

  # check for our criteria
  if pusher == 'schacon' &&
     branch == 'ref/heads/special-branch' &&
     files.include?('special-file.txt')

    Mail.deliver do
      from     'tchacon@example.com'
      to       'tchacon@example.com'
      subject  'Scott Changed the File'
      body     "ALARM"
    end
  end
end
----

Here we're taking the JSON payload that GitHub delivers and looking up who pushed it, what branch they pushed to, and what files were touched in all the commits that were pushed.
Then we check what we found against our criteria and send an email message if anything matches.

In order to develop and test something like this, there's a nice developer console on the same
page where you set up the webhook. You can see the last few deliveries that GitHub tried to make.
For each webhook you can dig down into when it was delivered, if it was successful, and the
body and headers for both the request and the response. This makes it incredibly easy to test
and debug your webhooks.

[[_web_hook_debug]]
.Web hook debugging information
image::images/scripting-04-webhook-debug.png[Web hook debugging information]

Another great feature is that you can redeliver any of the payloads.

For more information on how to write webhooks and all the event types you can listen for,
go to the GitHub Developer documentation at https://developer.github.com/webhooks/

==== The GitHub API

(((GitHub, API)))
Services and webhooks provide a way to receive push notifications about events that happen in your repositories, but what if you need more information?
What if you need to automate something like adding collaborators or labeling issues?

This is where the GitHub API comes in handy.
GitHub has tons of API endpoints for doing nearly anything you can do on the website in an automated fashion.
In this section we learn how to authenticate and connect to the API, how to comment on an issue, and how to change the status of a Pull Request through the API.

==== Basic Usage

The most basic thing you can do is a simple GET request on an endpoint that doesn't require authentication.
This could get information about a user or an open source project.
For example, to find out more about a user named `schacon`, run

[source,javascript]
----
$ curl https://api.github.com/users/schacon
{
  "login": "schacon",
  "id": 70,
  "avatar_url": "https://avatars.githubusercontent.com/u/70",
# …
  "name": "Scott Chacon",
  "company": "GitHub",
  "following": 19,
  "created_at": "2008-01-27T17:19:28Z",
  "updated_at": "2014-06-10T02:37:23Z"
}
----

There are tons of endpoints like this to get information about organizations, projects, issues, and commits -- just about anything you can publicly see on GitHub.
You can even use the API to render arbitrary Markdown or find a `.gitignore` template.

[source,javascript]
----
$ curl https://api.github.com/gitignore/templates/Java
{
  "name": "Java",
  "source": "*.class

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.ear

# virtual machine crash logs, see https://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
"
}
----

==== Commenting on an Issue

However, you need to authenticate to do things on the website such as comment on an Issue or Pull Request, or to view or interact with private content.

There are several ways to authenticate.
You can use basic authentication with just your username and password, but generally it's a better idea to use a personal access token.
You can generate this from the `Applications` tab of your settings page.

[[_access_token]]
.Generate your access token from the "`Applications`" tab of your settings page
image::images/scripting-05-access-token.png[Generate your access token from the “Applications” tab of your settings page]

It asks if you want to limit how this token is used.
Make sure to use a good description so you feel comfortable removing the token when your script or application is no longer used.

GitHub only shows the token once, so be sure to copy it.
You can now use the token to authenticate instead of using a username and password.
This is nice because the token is revocable.

This also has the added advantage of increasing your rate limit.
Without authenticating, you're limited to 60 requests per hour.
If you authenticate you can make up to 5,000 requests per hour.

So let's use it to make a comment on one of our issues.
Let's say we want to leave a comment on a specific issue, Issue #6.
To do so we have to send an HTTP POST request to `repos/<user>/<repo>/issues/<num>/comments` with the token we just generated in an Authorization header.

[source,javascript]
----
$ curl -H "Content-Type: application/json" \
       -H "Authorization: token TOKEN" \
       --data '{"body":"A new comment, :+1:"}' \
       https://api.github.com/repos/schacon/blink/issues/6/comments
{
  "id": 58322100,
  "html_url": "https://github.com/schacon/blink/issues/6#issuecomment-58322100",
  ...
  "user": {
    "login": "tonychacon",
    "id": 7874698,
    "avatar_url": "https://avatars.githubusercontent.com/u/7874698?v=2",
    "type": "User",
  },
  "created_at": "2014-10-08T07:48:19Z",
  "updated_at": "2014-10-08T07:48:19Z",
  "body": "A new comment, :+1:"
}
----

Now if you go to that issue, you see the comment that we just successfully posted as in <<_api_comment>>.

[[_api_comment]]
.A comment posted from the GitHub API
image::images/scripting-06-comment.png[A comment posted from the GitHub API]

You can use the API to do just about anything you can do on the website -- creating and setting milestones, assigning people to Issues and Pull Requests, creating and changing labels, accessing commit data, creating new commits and branches, opening, closing or merging Pull Requests, creating and editing teams, commenting on lines of code in a Pull Request, searching the site, and on and on.

==== Changing the Status of a Pull Request

Our final example is how to change the status of a Pull Request. Each commit can have one or more
statuses associated with it. There's an API to add and query that status.

Most of the Continuous Integration and testing services make use of this API to react to pushes by testing the code that was pushed, and then report back if that commit has passed all the tests.
You could also use this to check if the commit message is properly formatted, if the submitter followed all your contribution guidelines, if the commit was validly signed, and any number of things.

Let's say you set up a webhook on your repository that hits a small web service that checks for a `Signed-off-by` string in the commit message.

[source,ruby]
----
require 'httparty'
require 'sinatra'
require 'json'

post '/payload' do
  push = JSON.parse(request.body.read) # parse the JSON
  repo_name = push['repository']['full_name']

  # look through each commit message
  push["commits"].each do |commit|

    # look for a Signed-off-by string
    if /Signed-off-by/.match commit['message']
      state = 'success'
      description = 'Successfully signed off!'
    else
      state = 'failure'
      description = 'No signoff found.'
    end

    # post status to GitHub
    sha = commit["id"]
    status_url = "https://api.github.com/repos/#{repo_name}/statuses/#{sha}"

    status = {
      "state"       => state,
      "description" => description,
      "target_url"  => "http://example.com/how-to-signoff",
      "context"     => "validate/signoff"
    }
    HTTParty.post(status_url,
      :body => status.to_json,
      :headers => {
        'Content-Type'  => 'application/json',
        'User-Agent'    => 'tonychacon/signoff',
        'Authorization' => "token #{ENV['TOKEN']}" }
    )
  end
end
----

This should be fairly simple to follow. In this webhook handler we look through each newly pushed commit,
looking for the string 'Signed-off-by' in the commit message. Finally we send a POST to
the `/repos/<user>/<repo>/statuses/<commit_sha>` API endpoint with the status.

In this case you send a state ('success', 'failure', 'error'), a description of what happened,
a target URL the user can go to for more information, and a `context` in case there are multiple
statuses for a single commit. For example, a testing service or a validation service
may also provide a status -- the `context` field is how they're differentiated.

If someone opens a new Pull Request on GitHub and this webhook is set up,
you see something like <<_commit_status>>

[[_commit_status]]
.Commit status via the API
image::images/scripting-07-status.png[Commit status via the API]

You now see a little green check mark next to the commit that has a `Signed-off-by` string in the message and a red cross through the one where the author forgot to sign off.
You also see that the Pull Request takes the status of the last commit on the branch and warns if it's a failure.
This is really useful if you're using this API for test results so you don't accidentally merge a commit that failed its tests.

==== Octokit

Although these examples have used `curl` and simple HTTP requests for nearly everything,
several open-source libraries exist that make this API available in a more idiomatic way.
One such example is the Octokit project. At the time of writing, supported languages include Go,
Objective-C, Ruby, and .NET. Check out https://github.com/octokit[] for more information.

Hopefully these tools help you customize and modify GitHub to work better with your specific workflows.
For complete documentation on the entire API, as well as guides for common tasks,
check out https://developer.github.com[].
