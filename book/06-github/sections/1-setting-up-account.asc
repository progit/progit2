=== Account Setup and Configuration

(((GitHub, user accounts)))
The first thing you need to do is set up a free user account.
Simply visit https://github.com[^], choose a user name that isn't already taken, provide an email address and a password, and click the big green "`Sign up for GitHub`" button.

.The GitHub sign-up form
image::images/signup.png[The GitHub sign-up form]

The next thing you see is the pricing page for paid plans, but it's safe to ignore this for now.
GitHub sends you an email message to verify the address you provided.
Go ahead and do what it says. This is pretty important, as we see later.

[NOTE]
====
GitHub provides almost all of its functionality with free accounts, except some advanced features.

GitHub's paid plans include advanced tools and features as well as increased limits over free services, but we aren't covering those in this book.
To get more information about available plans and their comparison, visit https://github.com/pricing[^].
====

Clicking the Octocat logo at the top-left of the screen will take you to dashboard.
You're now ready to use GitHub.

==== SSH Access

(((SSH keys, with GitHub)))
As of right now, can access Git repositories using the `https://` protocol,
authenticating with the username and password you just provided. However, to simply clone public projects,
you don't even need to sign up. We use the account we just created when we fork projects and push
to these forks a bit later.

To access remotes using SSH, configure a public key.
(If you don't already have one, see <<ch04-git-on-the-server#_generate_ssh_key>>.)
Open up your account settings using the icon at the top-right of the window.

.The "`Account settings`" link
image::images/account-settings.png[The “Account settings” link]

Then select the `SSH keys` section along the left-hand side.

.The "`SSH keys`" link
image::images/ssh-keys.png[The “SSH keys” link]

From there, click the "`Add an SSH key`" button, give your key a name, paste the contents of your `~/.ssh/id_rsa.pub` (or whatever you named it) public-key file into the text area, and click "`Add key`".

[NOTE]
====
Be sure to name your SSH key something you can remember.
You can name each of your keys (e.g. "My Laptop" or "Work Account") so that if you need to revoke a key later, you can easily tell which one you're looking for.
====

[[_personal_avatar]]
==== Your Avatar

Next, if you wish, you can replace the avatar that is generated for you with an image of your choosing.
First go to the `Profile` tab (above the SSH Keys tab) and click `Upload new picture`.

.The "`Profile`" link
image::images/your-profile.png[The “Profile” link]

We'll choose a copy of the Git logo that's on our hard drive. Then we crop it.

.Crop your uploaded avatar
image::images/avatar-crop.png[Crop your uploaded avatar]

Now people see your avatar next to your username.

If you happen to have uploaded an avatar to the popular Gravatar service (often used for WordPress accounts), that avatar will be used by default and you don't need to do this step.

==== Your Email Addresses

The way that GitHub maps your Git commits to your user is by email address.
If you use multiple email addresses in your commits and you want GitHub to link them up properly, you need to add all the email addresses you have used to the Emails section.

[[_add_email_addresses]]
.Add all your email addresses
image::images/email-settings.png[Add all your email addresses]

In <<_add_email_addresses>> we see some of the possible states.
The top address is verified and set as the primary address, meaning that's where you'll get any notifications and receipts.
The second address is verified and so can be set as the primary.
The final address is unverified, meaning that it can't be your primary address.
If GitHub sees any of these in commit messages in any repository on the site, they're associated with your account.

==== Two Factor Authentication

Finally, for extra security, you should definitely set up Two-factor Authentication or `2FA`.
Two-factor Authentication is an authentication mechanism that's become more and more popular recently to mitigate the risk of your account being compromised if your password is stolen.
Turning it on makes GitHub ask for two different methods of authentication, so that if one of them is compromised, an attacker still can't access your account.

You can find the Two-factor Authentication setup under the Security tab of your Account settings.

.2FA in the Security Tab
image::images/2fa-1.png[2FA in the Security Tab]

If you click on the `Set up two-factor authentication` button, it takes you to a configuration page where you can choose to use a phone app to generate your secondary code (a `time based one-time password`), or you can have GitHub send you a code via SMS each time you need to log in.

After you choose which method you prefer and follow the instructions, your account is then a little more secure and you will have to provide a code in addition to your password whenever you log into GitHub.
