=== Contributing to a Project

Now that your account is set up, let's walk through some details of how to contribute to an existing project.

==== Forking Projects

(((forking)))
To contribute to an existing project to which you don't have push access, `fork` the project.
This means GitHub makes a copy of the project that is entirely yours. It lives in your namespace, and since you own it, you can push to it.

[NOTE]
====
Historically, the term `fork` has a somewhat negative context, meaning that someone took an
open source project and created a competing project.
In GitHub, a `fork` is simply a way to copy a project into your own account,
allowing you to make changes with the intention of contributing them back.
====

This way, projects don't have to worry about adding users as collaborators to give them push access.
People can fork a project, push changes to the forked repository, and contribute their changes back to the original
repository by creating what's called a Pull Request, which we cover next.
This opens a discussion thread on GitHub for reviewing the change, and the project owner and the
contributor can then discuss the change until the owner is happy with it,
at which point the owner can merge it.

To fork a project, visit the project page and click the `Fork` button at the top-right of the page.

.The "`Fork`" button
image::images/forkbutton.png[The “Fork” button]

After a few seconds, you're taken to your new project page, with your own writeable copy
of the original project.

[[ch06-github_flow]]
==== The GitHub Flow

(((GitHub, Flow)))
GitHub is designed around a particular collaboration workflow, centered on Pull Requests.
This works whether you're collaborating with a tightly-knit team in a single shared repository,
or a globally-distributed collection of strangers, each of whom have their own fork.
It's centered on the <<ch03-git-branching#_topic_branch>> workflow covered in <<ch03-git-branching#ch03-git-branching>>.

Here's how it generally works.

1. Fork the project to get your own copy.
2. Clone your forked copy to a local repository.
3. Create a topic branch from `master`.
4. Make commits to the topic branch.
5. Push this topic branch to your GitHub repository.
6. Open a Pull Request on GitHub.
7. Continue discussing and committing until the project owner is satisfied.
7. The project owner merges or closes the Pull Request.
8. Sync the updated `master` back to your fork.
9. Sync the changes in your `master` back to your fork on GitHub.

This is basically the Integration Manager workflow covered in <<ch05-distributed-git#_integration_manager>>, but instead of using email to communicate and review changes, teams use GitHub's web based tools.

Let's walk through an example of proposing a change to an open source project hosted on GitHub using this flow.

[TIP]
====
You can use the official *GitHub CLI* tool on Windows, macOS, and Linux instead of the GitHub web interface for most things.
See https://cli.github.com/[GitHub CLI homepage^] for installation instructions and documentation.
====

===== Creating a Pull Request

Tony is looking for code to run on his Arduino programmable microcontroller and has found a great program on GitHub at https://github.com/schacon/blink[^].

.The project we want to contribute to
image::images/blink-01-start.png[The project we want to contribute to]

The only problem is that the blinking rate is too fast.
We think it's much nicer to wait 3 seconds instead of 1 second in between each state change.
So let's improve the program and submit it back to the project as a proposed change.

First, we click the 'Fork' button to get our own copy of the project.
Our user name here is "`tonychacon`" so our copy of this project is at `https://github.com/tonychacon/blink`.
We clone it locally, create a topic branch, make the code change, and finally push that change back up to our GitHub fork.

[source,console]
----
$ git clone https://github.com/tonychacon/blink <1>
Cloning into 'blink'...

$ cd blink
$ git checkout -b slow-blink <2>
Switched to a new branch 'slow-blink'

$ sed -i '' 's/1000/3000/' blink.ino (macOS) <3>
# If you're on a Linux system, do this instead:
# $ sed -i 's/1000/3000/' blink.ino <3>

$ git diff --word-diff <4>
diff --git a/blink.ino b/blink.ino
index 15b9911..a6cc5a5 100644
--- a/blink.ino
+++ b/blink.ino
@@ -18,7 +18,7 @@ void setup() {
// the loop routine runs over and over again forever:
void loop() {
  digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
  [-delay(1000);-]{+delay(3000);+}               // wait for a second
  digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW
  [-delay(1000);-]{+delay(3000);+}               // wait for a second
}

$ git commit -a -m 'Change delay to 3 seconds' <5>
[slow-blink 5ca509d] Change delay to 3 seconds
 1 file changed, 2 insertions(+), 2 deletions(-)

$ git push origin slow-blink <6>
Username for 'https://github.com': tonychacon
Password for 'https://tonychacon@github.com':
Counting objects: 5, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 340 bytes | 0 bytes/s, done.
Total 3 (delta 1), reused 0 (delta 0)
To https://github.com/tonychacon/blink
 * [new branch]      slow-blink -> slow-blink
----

<1> Clone our fork of the project locally.
<2> Create a descriptive topic branch.
<3> Make our change to the code.
<4> Check that the change is good.
<5> Commit our change to the topic branch.
<6> Push our new topic branch back up to our GitHub fork.

Now if we go back to our fork on GitHub, we see that GitHub noticed that we pushed a new topic branch and presents us with a big green button to check out our changes and open a Pull Request to the original project.

You can alternatively go to the `Branches` page at `\https://github.com/<user>/<project>/branches` to locate your branch and open a new Pull Request from there.

.Pull Request button
image::images/blink-02-pr.png[Pull Request button]

(((GitHub, pull requests)))
If we click that green button, we'll see a page where we create a title and description for the change.
It's generally a good idea to spend some effort on this, since a good description helps the owner of the original project determine what you're trying to do, whether your proposed changes are correct, and whether accepting the changes would improve the original project.

We also see a list of the commits in our topic branch that are `ahead` of the `master` branch (in this case, just the one) and a unified diff of all the changes that will be made should this branch get merged by the project owner.

.Pull Request creation page
image::images/blink-03-pull-request-open.png[Pull Request creation page]

When you click the 'Create pull request' button on this screen, the owner of the project you forked gets notified that someone is suggesting a change. The owner also gets a link to a page containing information
about the change.

[NOTE]
====
Though Pull Requests are used commonly for public projects when the contributor change is ready, they're also often used in internal projects _at the beginning_ of the development cycle.
Since you can keep pushing to the topic branch even *after* the Pull Request is opened, it's often opened early and used as a way to work as a team, rather than being opened at the very end of the process when the change is complete.
====

===== Iterating on a Pull Request

At this point, the project owner can look at the suggested change and merge it, reject it, or comment on it.
Let's say that he likes the idea, but would prefer a slightly longer time for the light to be off.

Where this conversation may take place over email in the workflows presented in <<ch05-distributed-git#ch05-distributed-git>>, on GitHub this happens online.
The project owner can review the changes and leave a comment by clicking on any of the lines.

.Comment on a specific line of code in a Pull Request
image::images/blink-04-pr-comment.png[Comment on a specific line of code in a Pull Request]

Once the maintainer makes a comment, the person who opened the Pull Request (and indeed, anyone else watching the repository) gets notified.
We go over customizing this later, but if he had email notifications turned on, Tony would get an email like

[[_email_notification]]
.Comments sent as email notifications
image::images/blink-04-email.png[Comments sent as email notifications]

Anyone can also leave general comments on the Pull Request.
In <<_pr_discussion>> we see an example of the project owner both commenting on a line of code and then leaving a general comment in the discussion section.
Code comments are brought into the conversation as well.

[[_pr_discussion]]
.Pull Request discussion page
image::images/blink-05-general-comment.png[Pull Request discussion page]

Now the contributor can see what they need to do in order to get their change accepted.
Luckily this is very straightforward.
Where over email you may have to reorganize your patches and resubmit them to the mailing list, with GitHub you simply commit to the topic branch again and push, which automatically updates the Pull Request.
In <<_pr_final>> you also see that the old code comment has been collapsed in the updated Pull Request, since it was made on a line that has since been changed.

Adding commits to an existing Pull Request doesn't trigger a notification, so once Tony has pushed his corrections he decides to leave a comment to inform the project owner that he made the requested change.

[[_pr_final]]
.Pull Request final
image::images/blink-06-final.png[Pull Request final]

An interesting thing to notice is that if you click the `Files Changed` tab on this Pull Request,
you see the "unified" diff -- that is, all the changes that would be introduced to your main branch
if this topic branch was merged in. In `git diff` terms, it automatically shows the output
of `git diff master...<branch>` for the branch this Pull Request is based on.
See <<ch05-distributed-git#_what_is_introduced>> for more about this type of diff.

The other thing you'll notice is that GitHub checks if the Pull Request merges cleanly and provides a button to do the merge for you on the server.
This button only shows up if you have write access to the repository and a trivial merge is possible.
Clicking it performs a `non-fast-forward` merge, meaning that even if the merge *could* be a fast-forward,
it still creates a merge commit.

If you prefer, simply pull the branch and merge it locally. If you merge this branch into `master` and
push it to GitHub, the Pull Request automatically is closed.

This is the basic workflow that most GitHub projects use.
Topic branches are created, Pull Requests are opened on them, a discussion ensues, possibly more work is done on the branch, and eventually the request is either closed or merged.

[NOTE]
.Not Only Forks
====
It's important to note that you can also open a Pull Request between two branches in the same repository.
If you're working on a feature with someone, and you both have write access to the project, you can push a topic branch to the repository and open a Pull Request on it to master` of that same project to initiate the code review and discussion process.
No forking necessary.
====

==== Advanced Pull Requests

Now that we've covered the basics of contributing to a project on GitHub, let's cover a few interesting tips and tricks about Pull Requests so you can be more effective in using them.

===== Pull Requests as Patches

It's important to understand that many projects don't really think of Pull Requests as queues of perfect patches that should apply cleanly in order, as most mailing list-based projects think of patch series contributions.
Most GitHub projects think about Pull Request branches as iterative conversations around a proposed change, culminating in a unified diff that's applied by merging.

This is an important distinction, because generally the change is suggested before the code is thought to be complete and working, which is far rarer with mailing list based patch series contributions.
This enables an earlier conversation with the maintainers so that arriving at the proper solution is more of a community effort.
When code is proposed with a Pull Request and the maintainers or community suggest a change, the patches are generally not recreated, but instead the difference is pushed as a new commit, moving the conversation forward with the previous work still visible.

For instance, if you go back and look again at <<_pr_final>>, you notice that the contributor didn't
rebase his commit and send another Pull Request. Instead he added new commits and pushed them to the
existing branch. This way if you go back and look at this Pull Request in the future, you can easily
find all of the context of why decisions were made. Clicking the `Merge` button purposefully creates a
merge commit that references the Pull Request so that it's easy to go back and research the original
conversation, if necessary.

===== Keeping up with Upstream

If your Pull Request becomes out of date or otherwise doesn't merge cleanly, fix it so the maintainer can easily merge it.
GitHub tests this for you and lets you know at the bottom of every Pull Request if the merge is trivial or not.

[[_pr_fail]]
.Pull Request does not merge cleanly
image::images/pr-01-fail.png[Pull Request does not merge cleanly]

If you see something like <<_pr_fail>>, fix your branch so that the icon turns green and the maintainer doesn't have to do extra work.

You have two main options to do this.
You can either rebase your branch on top of whatever the target branch is (normally `master` in the repository you forked), or you can merge the target branch into your branch.

Most developers on GitHub choose to do the latter, for the same reasons we just went over in the previous section.
What matters is the history and the final merge, so rebasing doesn't result in much more than a slightly cleaner history, and in return is *far* more difficult and error prone.

To merge in the target branch to make your Pull Request mergeable, add the original repository as a new remote, fetch from it, merge the main branch of that repository into your topic branch, fix any issues, and finally push it back to the same branch you opened the Pull Request on.

For example, let's say that in the `tonychacon` example we were using before, the original author made a change that would create a conflict in the Pull Request.
Let's go through those steps.

[source,console]
----
$ git remote add upstream https://github.com/schacon/blink <1>

$ git fetch upstream <2>
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (3/3), done.
Unpacking objects: 100% (3/3), done.
remote: Total 3 (delta 0), reused 0 (delta 0)
From https://github.com/schacon/blink
 * [new branch]      master     -> upstream/master

$ git merge upstream/master <3>
Auto-merging blink.ino
CONFLICT (content): Merge conflict in blink.ino
Automatic merge failed; fix conflicts and then commit the result.

$ vim blink.ino <4>
$ git add blink.ino
$ git commit
[slow-blink 3c8d735] Merge remote-tracking branch 'upstream/master' \
    into slower-blink

$ git push origin slow-blink <5>
Counting objects: 6, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 682 bytes | 0 bytes/s, done.
Total 6 (delta 2), reused 0 (delta 0)
To https://github.com/tonychacon/blink
   ef4725c..3c8d735  slower-blink -> slow-blink
----

<1> Add the original repository as a remote named `upstream`.
<2> Fetch the newest work from that remote.
<3> Merge the main branch of that repository into your topic branch.
<4> Fix the conflict that occurred.
<5> Push back up to the same topic branch.

Once you do that, the Pull Request is automatically updated and re-checked to see if it merges cleanly.

[[_pr_merge_fix]]
.Pull Request now merges cleanly
image::images/pr-02-merge-fix.png[Pull Request now merges cleanly]

One of the great things about Git is that you can follow these steps as many times as necessary.
If you have a very long-running project, you can easily merge from the target branch over and over
again, and only have to deal with conflicts that have arisen since the last time you merged.

If you absolutely must rebase the branch to clean it up, you can certainly do so,
but it's highly encouraged that you not force pushing over the branch that the Pull Request is already opened on.
If other people have pulled it and done more work on it, you run into all of the issues outlined
in <<ch03-git-branching#_rebase_peril>>. Instead, push the rebased branch to a new branch on GitHub
and open a brand new Pull Request referencing the old one, then close the original.

===== References

You may be wondering how to reference an old Pull Request. It turns out there are
many ways to reference things almost anywhere you can provide input in GitHub.

Let's start with how to cross-reference another Pull Request.
All Pull Requests and Issues are assigned numbers unique within the project.
To reference any Pull Request from within any other one, simply put `+#<num>+` in any comment or description.
You can also be more specific if the Issue or Pull request lives somewhere else. Use `username#<num>` if you're referring to a Pull Request in a fork of the repository you're in, or `username/repo#<num>` to reference something in another repository.

Let's look at an example. Say we rebase the branch in the previous example, create a new
Pull Request for it, and now want to reference the old Pull Request from the new one.
Fill out the description just like <<_pr_references>>.

[[_pr_references]]
.Cross references in a Pull Request
image::images/mentions-01-syntax.png[Cross references in a Pull Request]

When we submit this pull request, we see all of that rendered like <<_pr_references_render>>.

[[_pr_references_render]]
.Cross references rendered in a Pull Request
image::images/mentions-02-render.png[Cross references rendered in a Pull Request]

Notice that the full GitHub URL we entered was shortened.

Now if Tony goes back and closes out the original Pull Request, we see that by mentioning it in the new one, GitHub has automatically created a trackback event in the Pull Request timeline.
This means that anyone who visits this Pull Request and sees that it's closed can easily link back to the one that superseded it.
The link looks something like <<_pr_closed>>.

[[_pr_closed]]
.Link back to the new Pull Request in the closed Pull Request timeline
image::images/mentions-03-closed.png[Link back to the new Pull Request in the closed Pull Request timeline]

In addition to issue numbers, you can also reference a specific commit by its hash. 
You have to specify a full 40 character SHA-1, but if GitHub sees that in a comment, it links directly to the commit.
Again, you can reference commits in forks or other repositories the same way you did with Pull Requests.

==== GitHub Flavored Markdown

Linking to other Pull Requests is just the beginning of the interesting things you can do with almost any text box on GitHub.
In Pull Request descriptions, comments, code comments, and more, you can use what's called `GitHub Flavored Markdown`.
Markdown is like writing in plain text but which is rendered on a web page.

See <<_example_markdown>> for an example of how comments or text can be written and then rendered using Markdown.

[[_example_markdown]]
.An example of GitHub Flavored Markdown as written and as rendered
image::images/markdown-01-example.png[An example of GitHub Flavored Markdown as written and as rendered]

The GitHub flavor of Markdown adds to the basic Markdown syntax. This can all be really useful when creating useful Pull Request comments or descriptions.
===== Task Lists

The first really useful GitHub specific Markdown feature, especially for use in Pull Requests, is the Task List.
A Task List is a list of checkboxes of things to get done.
Putting them into a Pull Request normally indicates things that you want to get done before you consider the item complete.

Create a Task List like this:

[source,text]
----
- [X] Write the code
- [ ] Write all the tests
- [ ] Document the code
----

If we include this in the description of our Pull Request, we see it rendered like <<_eg_task_lists>>

[[_eg_task_lists]]
.Task lists rendered in a Markdown comment
image::images/markdown-02-tasks.png[Task lists rendered in a Markdown comment]

This is often used in Pull Requests to indicate what you'd like to get done on the branch before the Pull Request is ready to merge.
The really cool part is that you can simply click the checkboxes to update the comment -- you don't have to edit the Markdown directly to check tasks off.

What's more, GitHub will look for Task Lists in your Pull Requests and shows them as metadata on the pages that contain them out.
For example, if you have a Pull Request with tasks and you look at the overview page of all Pull Requests, you see how far done it is.
This helps people break down Pull Requests into subtasks and helps track the progress of the branch.
An example of this in <<_task_list_progress>>.

[[_task_list_progress]]
.Task list summary in the Pull Request list
image::images/markdown-03-task-summary.png[Task list summary in the Pull Request list]

These are incredibly useful when you open a Pull Request early and use it to track your progress through the implementation of the feature.

===== Code Snippets

You can also add code snippets to comments.
This is especially useful when presenting something that you _could_ try to do before actually implementing it.
This is also often used to add example code of what isn't working or what this Pull Request could implement.

To add a snippet of code, `fence` it in backticks.

[source,text]
----
```java
for(int i=0 ; i < 5 ; i++)
{
   System.out.println("i is : " + i);
}
```
----

If you add a language name like we did there with 'java', GitHub also tries to syntax highlight the snippet.
In the case of the above example, it would end up looking like <<_md_code>>.

[[_md_code]]
.Rendered fenced code example
image::images/markdown-04-fenced-code.png[Rendered fenced code example]

===== Quoting

If you're responding to a small part of a long comment, you can selectively quote from the other comment by preceding the lines with the `>` character.
In fact, this is so common and so useful that there is a keyboard shortcut for it.
If you highlight text in a comment that you want to directly reply to and hit the `r` key, you see the quoted text in the comment box.

The quotes look something like

[source,text]
----
> Whether 'tis Nobler in the mind to suffer
> The Slings and Arrows of outrageous Fortune,

How big are these slings and in particular, these arrows?
----

Once rendered, the comment will look like <<_md_quote>>

[[_md_quote]]
.Rendered quoting example
image::images/markdown-05-quote.png[Rendered quoting example]

===== Emoji

Finally, you can also use emoji in your comments.
This is actually used quite extensively in comments you see on many GitHub Pull Requests.
There's even an emoji helper in GitHub.
If you're typing a comment and you start with a `:` character, an autocompleter helps you find what you're looking for.

[[_md_emoji_auto]]
.Emoji autocompleter in action
image::images/markdown-06-emoji-complete.png[Emoji autocompleter in action]

Emojis take the form of `:<name>:` anywhere in the comment.
For instance, you could write something like

[source,text]
----
I :eyes: that :bug: and I :cold_sweat:.

:trophy: for :microscope: it.

:+1: and :sparkles: on this :ship:, it's :fire::poop:!

:clap::tada::panda_face:
----

When rendered, it would look something like <<_md_emoji>>

[[_md_emoji]]
.Heavy emoji commenting
image::images/markdown-07-emoji.png[Heavy emoji commenting]

Not that this is incredibly useful, but it does add an element of fun and emotion to a medium that is otherwise hard to convey emotion in.

[NOTE]
====
There are actually quite a number of web services that make use of emoji characters these days.
A great cheat sheet to reference to find emoji that expresses what you want to say can be found at:

https://www.webfx.com/tools/emoji-cheat-sheet/[^]
====

===== Images

This isn't technically GitHub Flavored Markdown, but it's incredibly useful.
In addition to adding Markdown image links to comments, which can be difficult to find and embed URLs in, GitHub allows you to drag and drop images into text areas to embed the images.

[[_md_drag]]
.Drag and drop images to upload them and auto-embed them
image::images/markdown-08-drag-drop.png[Drag and drop images to upload them and auto-embed them]

If you look at <<_md_drag>>, you see a small `Parsed as Markdown` hint above the text area.
Clicking on that shows a full cheat sheet of everything you can do with GitHub Flavored Markdown.

[[_fetch_and_push_on_different_repositories]]
==== Keep your GitHub public repository up-to-date

Once you've forked a GitHub repository, your repository (your "fork") exists independently from the original.
In particular, when the original repository gets new commits, GitHub informs you by a message like:

[source,text]
----
This branch is 5 commits behind progit:master.
----

But your GitHub repository will never be automatically updated by GitHub. This is something that you must do yourself.
Fortunately, it's very easy to do.

One way of doing this requires no configuration changes.
For example, if you forked from `https://github.com/progit/progit2.git`,
you can keep your `master` branch up-to-date by running

[source,console]
----
$ git checkout master <1>
$ git pull https://github.com/progit/progit2.git <2>
$ git push origin master <3>
----

<1> If you were on another branch, return to `master`.
<2> Fetch changes from `https://github.com/progit/progit2.git` and merge them into `master`.
<3> Push your `master` branch to `origin`.

This works, but it's a little tedious having to type the fetch URL every time.
You can automate this work with a bit of configuration.

[source,console]
----
$ git remote add progit https://github.com/progit/progit2.git <1>
$ git fetch progit <2>
$ git branch --set-upstream-to=progit/master master <3>
$ git config --local remote.pushDefault origin <4>
----

<1> Add the source repository and give it a name.
    Here, I have chosen to call it `progit`.
<2> Get a reference on progit's branches, in particular `master`.
<3> Set your `master` branch to fetch from the `progit` remote.
<4> Define the default push repository to `origin`.

Once this is done, the workflow becomes much simpler.

[source,console]
----
$ git checkout master <1>
$ git pull <2>
$ git push <3>
----

<1> If you were on another branch, return to `master`.
<2> Fetch changes from `progit` and merge changes into `master`.
<3> Push your `master` branch to `origin`.

This approach can be useful, but it's not without downsides.
Git will happily do this work for you silently, but it won't warn you if you make a commit to `master`, pull from `progit`, then push to `origin` -- all of those operations are valid with this setup.
So you have to take care never to commit directly to `master`, since that branch effectively belongs to the upstream repository.
