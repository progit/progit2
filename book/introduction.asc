[preface]
== Introduction

You're about to spend several hours of your life reading about Git.
Let's take a minute to explain what we have in store for you.
Here's a quick summary of the ten chapters and two appendices of this book.

*Chapter 1*, covers Version Control Systems (VCSs) and Git basics -- no technical stuff, just what Git is, why it came about in a world full of VCSs, what sets it apart from other VCSs, and why so many people use it.
Then, this chapter explains how to download Git and set it up for the first time, if it's not already installed on your system.

*Chapter 2* goes over basic Git usage -- how to use Git in the cases you encounter most often.
After reading this chapter, you should be able to clone a repository, see the history of a project, modify files, and contribute changes.
If the book spontaneously combusts at this point, you should already be pretty useful wielding Git in the time it takes to pick up another copy.

*Chapter 3* is about Git's branching model, often described as Git's killer feature.
Here you learn what truly sets Git apart from the pack.
When you're done, you may feel the need to spend a quiet moment pondering how you lived before Git branching was part of your life.

*Chapter 4* covers Git on the server.
This chapter is for those who want to install Git inside your organization or on your own personal server.
We also explore various hosted options if you prefer to let someone else handle that for you.

*Chapter 5* goes over in full detail various distributed workflows and how to accomplish them with Git.
When you're done with this chapter, you should be able to work expertly with multiple remote repositories, use Git over email, and deftly juggle numerous remote branches and contributed patches.

*Chapter 6* covers the GitHub hosting service and tooling in depth.
We cover signing up for and managing a GitHub account, creating and using Git repositories on GitHub, common workflows to contribute to projects and to accept contributions to your own project, GitHub's programmatic interface, and lots of little tips to make your life easier.

*Chapter 7* is about advanced Git commands.
Here you learn about topics like mastering the scary `git reset` command, using binary search to identify bugs, editing history, revision selection in detail, and a lot more.
This chapter rounds out your knowledge of Git so that you're truly a master.

*Chapter 8* is about configuring your Git environment.
This includes setting up hook scripts to enforce or encourage customized policies and using environment configuration settings so you can work the way you want.
We also cover building your own set of scripts to enforce a custom committing policy.

*Chapter 9* deals with Git and other VCSs.
This includes using Git in a Subversion (SVN) world and converting projects from other VCSs to Git.
A lot of organizations still use SVN and aren't about to change, but by this point you'll have learned the incredible power of Git. This chapter shows how to cope if you still have to use SVN.
We also cover how to import projects from several other VCSs in case you do convince everyone to make the plunge.

*Chapter 10* dives into the murky yet beautiful depths of Git internals.
Now that you know all about Git and can wield it with power and grace, you can move on to learn how Git stores the objects it manages, what the object model is, details of packfiles, server protocols, and more.
Throughout the book, we refer to sections of this chapter in case you feel like diving deep early. But if you're like us and want to get straight into the technical details, you may want to read Chapter 10 first.
We leave that up to you.

*Appendix A* looks at a number of examples of using Git in various specific environments.
We cover a number of different GUIs and IDEs.
If you're interested in an overview of using Git in your shell, your IDE, or your text editor, take a look here.

Finally, *Appendix B*, explores scripting and extending Git through tools like libgit2 and JGit.
If you're interested in writing complex and fast custom tools and need low-level Git access, this shows you what's available.

Let's get started.
