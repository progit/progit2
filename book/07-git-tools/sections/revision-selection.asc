[[_revision_selection]]
=== Revision Selection

Git allows you to specify a specific commit, a set of commits, or a range of commits in a number of ways.
They aren't necessarily obvious but are helpful to know.

==== Single Revisions

You can obviously refer to any single commit by its hash, but there are more human-friendly ways.
This section presents various examples.

==== Short Hash

Git is smart enough to figure out the commit you're referring to if you provide the first four characters of the hash, as long as those characters are unambiguous -- that is, only one thing in your repository begins with those four characters.

For example, suppose you run `git log` and find a specific commit you're interested in
examining in more detail.

[source,console]
----
$ git log
commit 734713bc047d87bf7eac9674765ae793478c50d3
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri Jan 2 18:32:33 2009 -0800

    Fix refs handling, add gc auto, update tests

commit d921970aadf03b3cf0e71becdaab3147ba71cdef
Merge: 1c002dd... 35cfb2b...
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 15:08:43 2008 -0800

    Merge commit 'phedders/rdocs'

commit 1c002dd4b536e7479fe34593e72e6c6c1819e53b
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 14:58:32 2008 -0800

    Add some blame and merge stuff
----

In this case, let's look at `1c002dd...`. The following commands are equivalent (again assuming
the shorter strings are unambiguous):

[source,console]
----
$ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b
$ git show 1c002dd4b536e7479f
$ git show 1c002d
----

Git can display a short, unique abbreviation for a hash value.
If you pass `--abbrev-commit` to `git log`, the output will contain unique short hashes
which default to seven characters but can be longer if necessary to be unambiguous.


[source,console]
----
$ git log --abbrev-commit --pretty=oneline
ca82a6d Change the version number
085bb3b Remove unnecessary test code
a11bef0 Initial commit
----

Generally, eight to ten characters are more than enough to display a unique hash within a project.
As an example, as of February 2019, the Linux kernel, which is a large project with over 875,000 commits and 7 million objects,
contains no two objects whose SHA-1 hashes overlap over more than the first 12 characters.

[NOTE]
.A Short Note About SHA-1 Hashes
====

Many people are concerned that at some point, by random happenstance,
multiple objects in their repository might have the same SHA-1 hash. What then?

If you do try to commit an object that hashes to the same value as something already in your repository, Git 
doesn't actually save the object because it sees the new and existing
objects are identical, so there would be no point in saving the new object.
If you try to look at an object with that hash later, you always get the content of the original object.

However, you should be aware of how ridiculously unlikely this scenario is.
An SHA-1 hash, which is the current hashing method in Git, is 20 bytes or 160 bits.
The number of randomly hashed objects needed to ensure a 50% probability of a single collision is about 2^80^ (the formula for determining collision probability is `p = (n(n-1)/2) * (1/2^160)`).
2^80^ is 1.2 x 10^24^ or 1 million billion billion.
That's 1,200 times the number of grains of sand on the earth.

Here's an example that gives an idea of what it would take to get an SHA-1 hash collision.
If all 6.5 billion humans on Earth were programmers, and every second each person produced the same
amount of code that's in the entire Linux kernel history (6.5 million Git objects) and pushed it
into one enormous Git repository, it would take roughly 2 years until that repository contained enough
objects to have a 50% probability of a single SHA-1 hash collision.
There's a higher probability that every member of your programming team is attacked and killed by
wolves in unrelated incidents during the same night than an SHA-1 collision.

If you dedicate several thousands of dollars' worth of computing power to the task, it's possible to create two different files with the same hash, as proven on https://shattered.io/[^] in February 2017.
Git is moving towards using SHA256 as the default hashing algorithm, which is much more resilient to collision attacks, and has code in place to help prevent this attack from happening (although it cannot completely eliminate it).
====

[[_branch_references]]
==== Branch References

The easiest way to reference a commit requires that it have a branch reference pointing to it.
Then, you can use a branch name in any Git command that expects a hash.
For instance, to show the last commit on a branch, the following commands are equivalent,
assuming that `topic1` points to `ca82a6d`:

[source,console]
----
$ git show ca82a6dff817ec66f44342007202690a93763949
$ git show topic1
----

To see the SHA-1 hash a branch points to, use the Git plumbing tool `git rev-parse`.
(See <<ch10-git-internals#ch10-git-internals>> for more information about plumbing tools.)
Basically, `git rev-parse` exists for low-level operations and isn't designed to be used on the command line.
However, it can sometimes be helpful to see what's really going on. Here we run `git rev-parse` on a branch.

[source,console]
----
$ git rev-parse topic1
ca82a6dff817ec66f44342007202690a93763949
----

[[_git_reflog]]
==== RefLog Shortnames

One of the things Git does in the background is keeping a `reflog` -- a log
of where your `HEAD` and branch references have been for the last few months.

You can see your reflog by running `git reflog`.

[source,console]
----
$ git reflog
734713b HEAD@{0}: commit: Fix refs handling, add gc auto, update tests
d921970 HEAD@{1}: merge phedders/rdocs: Merge made by the 'recursive' strategy.
1c002dd HEAD@{2}: commit: Add some blame and merge stuff
1c36188 HEAD@{3}: rebase -i (squash): updating HEAD
95df984 HEAD@{4}: commit: # This is a combination of two commits.
1c36188 HEAD@{5}: rebase -i (squash): updating HEAD
7e05da5 HEAD@{6}: rebase -i (pick): updating HEAD
----

Every time a branch is updated for any reason, Git stores the change in the reflog.
This shows older commits, as well. For example, to see the fifth prior commit in your repository,
use the `@{5}` reference that you see in the reflog output.

[source,console]
----
$ git show HEAD@{5}
----

Also use this syntax to see where a branch was some specific amount of time ago.
For instance, to see where `master` was yesterday, run

[source,console]
----
$ git show master@{yesterday}
----

That would show you where the tip of your `master` branch was yesterday.
This technique only works for data that's still in your reflog, so you can't use it to look
for commits older than a few months.

To see reflog information formatted like `git log` output, run `git log -g`

[source,console]
----
$ git log -g master
commit 734713bc047d87bf7eac9674765ae793478c50d3
Reflog: master@{0} (Scott Chacon <schacon@gmail.com>)
Reflog message: commit: Fix refs handling, add gc auto, update tests
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri Jan 2 18:32:33 2009 -0800

    Fix refs handling, add gc auto, update tests

commit d921970aadf03b3cf0e71becdaab3147ba71cdef
Reflog: master@{1} (Scott Chacon <schacon@gmail.com>)
Reflog message: merge phedders/rdocs: Merge made by recursive.
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 15:08:43 2008 -0800

    Merge commit 'phedders/rdocs'
----

It's important to note that the reflog information is strictly local -- it's a log of what
you've done in your repository. The references won't be the same on someone else's copy of the repository.
Right after you initially clone a repository, you have an empty reflog, since no activity has occurred
yet in your repository. Running `git show HEAD@{2.months.ago}` works only if you cloned the project
at least two months ago -- if you cloned it five minutes ago, you see nothing.

[TIP]
.Think of the reflog as Git's version of shell history
====
If you have a UNIX or Linux background, you can think of the reflog as Git's version of shell history, which
is one specific user's history. It's
clearly relevant only for you in your current shell session, and has nothing to do with anyone else who might be logged in on the same machine.
====

[NOTE]
.Escaping braces in PowerShell
====

When using PowerShell, braces like `{` and `}` are special characters and must be escaped
with a backtick ` or by putting the commit reference in quotes.

[source,console]
----
$ git show HEAD@{0}     # will NOT work
$ git show HEAD@`{0`}   # OK
$ git show "HEAD@{0}"   # OK
----

====

==== Ancestry References

The other main way to specify a commit is via its ancestry.
If you place a `^` (caret) at the end of a reference, Git interprets it to mean the parent of that commit.
Suppose you look at the history of your project.

[source,console]
----
$ git log --pretty=format:'%h %s' --graph
* 734713b Fix refs handling, add gc auto, update tests
*   d921970 Merge commit 'phedders/rdocs'
|\
| * 35cfb2b Some rdoc changes
* | 1c002dd Add some blame and merge stuff
|/
* 1c36188 Ignore *.gem
* 9b29157 Add open3_detach to gemspec file list
----

Then, you can specify the previous commit by the name `HEAD^`, which means `the parent of HEAD`.

[source,console]
----
$ git show HEAD^
commit d921970aadf03b3cf0e71becdaab3147ba71cdef
Merge: 1c002dd... 35cfb2b...
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 15:08:43 2008 -0800

    Merge commit 'phedders/rdocs'
----

[NOTE]
.Escaping the caret on Windows
====

On Windows, `^` is a special character to `cmd.exe` and needs to be treated specially.
Either double it or put the commit reference in quotes.

[source,console]
----
$ git show HEAD^     # will NOT work on Windows
$ git show HEAD^^    # OK
$ git show "HEAD^"   # OK
----

====

You can also specify a number after the `^` to show _which_ parent you want. For example, `d921970^2` means `the second parent of d921970`.
This syntax is useful only for merge commits, which have more than one parent. The _first_ parent of a merge commit is from the branch you were on when you merged (frequently `master`), while the _second_ parent is from the branch that you merged in.

[source,console]
----
$ git show d921970^
commit 1c002dd4b536e7479fe34593e72e6c6c1819e53b
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 14:58:32 2008 -0800

    Add some blame and merge stuff

$ git show d921970^2
commit 35cfb2b795a55793d7cc56a6cc2060b4bb732548
Author: Paul Hedderly <paul+git@mjr.org>
Date:   Wed Dec 10 22:22:03 2008 +0000

    Some rdoc changes
----

The other main ancestry notation is `~` (tilde).
This also refers to the first parent, so `HEAD~` and `HEAD^` are equivalent.
The difference becomes apparent when you specify a number.
`HEAD~2` means `the first parent of the first parent,` or `the grandparent` -- it traverses
the first parents the number of times you specify.
For example, in the history listed earlier, `HEAD~3` would be

[source,console]
----
$ git show HEAD~3
commit 1c3618887afb5fbcbea25b7c013f4e2114448b8d
Author: Tom Preston-Werner <tom@mojombo.com>
Date:   Fri Nov 7 13:47:59 2008 -0500

    Ignore *.gem
----

This can also be written `HEAD\~~~`, which again is the first parent of the first parent of the first parent.

[source,console]
----
$ git show HEAD~~~
commit 1c3618887afb5fbcbea25b7c013f4e2114448b8d
Author: Tom Preston-Werner <tom@mojombo.com>
Date:   Fri Nov 7 13:47:59 2008 -0500

    Ignore *.gem
----

You can also combine these syntaxes. For example, you can specify the second parent of the
previous reference (assuming it was a merge commit) by using `HEAD~3^2`, and so on.

[[_commit_ranges]]
==== Commit Ranges

Now that you know how to specify individual commits, let's see how to specify ranges of commits.
This is particularly useful for managing branches. If you have a lot of branches,
you can use range specifications to answer questions like what work is on this branch
that I haven't merged into my main branch yet?

===== Double Dot

The most common range specification is the double-dot syntax.
This specifies a range of commits that are reachable from one commit but not another.
For example, say you have a commit history that looks like <<double_dot>>

[[double_dot]]
.Example history for range selection
image::images/double-dot.png[Example history for range selection]

`master..experiment` shows the commits in `experiment` that haven't been merged into `master` yet.
This means all commits reachable by `experiment` that aren't reachable by `master`.
For the sake of brevity and clarity in these examples, we use the letters of the commits from the diagram in
place of the actual `git log` output in the order that they would be displayed.

[source,console]
----
$ git log master..experiment
D
C
----

On the other hand, to see the opposite -- all commits in `master` that aren't
in `experiment` -- reverse the branch names.
`experiment..master` shows everything in `master` not reachable from `experiment`.


[source,console]
----
$ git log experiment..master
F
E
----

This is useful for keeping `experiment` up to date and previewing what you're about to merge in.
Another very frequent use of this syntax is to see what you're about to push to a remote.

[source,console]
----
$ git log origin/master..HEAD
----

This shows any commits in your current branch that aren't in `master` on the `origin` remote.
If you run `git push` and your current branch is tracking `origin/master`,
the commits shown by running `git log origin/master..HEAD` are the commits that are transferred to `origin`.
You can also leave off one side of the specification as an abreviation for `HEAD`.
For example, you get the same results as in the previous example by running `git log origin/master..`. Git
substitutes `HEAD` if one side is missing.

===== Multiple Points

The double-dot syntax is a useful shorthand but perhaps you want to specify more than two branches
to specify your revision, such as showing what commits are in any of several branches that aren't
in the branch you're currently on. Do this by using either the `^` character or the `--not` flag
before any reference from which you don't want to see reachable commits.
Thus, the following three commands are equivalent:

[source,console]
----
$ git log refA..refB
$ git log ^refA refB
$ git log refB --not refA
----

This is nice because you can specify more than two references in your query,
which you can't do with the double-dot syntax.
For instance, to see all commits reachable from `refA` or `refB`, but not from `refC`, run one of

[source,console]
----
$ git log refA refB ^refC
$ git log refA refB --not refC
----

This makes for a very powerful revision query language that should help show what's in your branches.

[[_triple_dot]]
===== Triple Dot

The last major range-selection syntax is the triple-dot syntax, which specifies all the commits
reachable by either of two references, but not by both of them. Look back at the example commit history
in <<double_dot>> To see what's in `master` or `experiment`, but not in both, run

[source,console]
----
$ git log master...experiment
F
E
D
C
----

Again, this shows normal `git log` output but only for those four commits,
appearing in the traditional commit date order.

A common flag to use with `git log` in this case is `--left-right`, which shows which
side of the range each commit is in. This helps make the output more useful.

[source,console]
----
$ git log --left-right master...experiment
< F
< E
> D
> C
----

With these tools, you can easily specify the commit or commits to inspect.
