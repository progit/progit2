[[_bundling]]
=== Bundling

Though we've covered the common ways (HTTP, SSH, etc) to transfer and sync Git repositories over a network,
there's actually one more way that isn't common but can actually be quite useful.

Git is capable of bundling data into a single file. This can be useful in various scenarios.
Maybe your network is down and you want to send changes to your co-workers.
Perhaps you're working somewhere offsite and don't have access to the Internet for security reasons.
Maybe your network card just broke. Maybe you don't have access to a shared server for the moment,
and you want to email someone updates but you don't want to transfer 40 commits by running `git format-patch`.

This is where `git bundle` can be helpful. It packages up everything that `git push` would normally
send over the network into a file that you can email to someone or put on a flash drive,
then unbundle into another repository.

Let's see a simple example. Say you have a repository with two commits.

[source,console]
----
$ git log
commit 9a466c572fe88b195efd356c3f2bbeccdb504102
Author: Scott Chacon <schacon@gmail.com>
Date:   Wed Mar 10 07:34:10 2010 -0800

    Second commit

commit b1ec3248f39900d2a406049d762aa68e9641be25
Author: Scott Chacon <schacon@gmail.com>
Date:   Wed Mar 10 07:34:01 2010 -0800

    First commit
----

To send that repository to someone and you don't have access to a repository to push to,
or are simply too lazy to set one up, bundle it by running `git bundle create`.

[source,console]
----
$ git bundle create repo.bundle HEAD master
Counting objects: 6, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (6/6), 441 bytes, done.
Total 6 (delta 0), reused 0 (delta 0)
----

Now you have a file named `repo.bundle` that has all the data needed to re-create the repository's
`master` branch. When running `git bundle` specify every reference or specific range of commits that you want
to be included. If you intend for what's in this bundle to be cloned somewhere else after it's extracted,
add `HEAD` as a reference as well, as we've done here.  

You can email this `repo.bundle` file to someone else, or put it on a USB drive and walk it over.

On the other side, say you receive `repo.bundle` and want to work on the project.
Clone from the bundle file into a directory, much like you would from a URL.

[source,console]
----
$ git clone repo.bundle repo
Cloning into 'repo'...
...
$ cd repo
$ git log --oneline
9a466c5 Second commit
b1ec324 First commit
----

If you don't include `HEAD` in the references, you have to also specify `-b master` or whatever
branch is included because otherwise Git doesn't know what branch to check out.

Now let's say you make three commits and want to send the new commits back in a bundle.


[source,console]
----
$ git log --oneline
71b84da Last commit - second repo
c99cf5b Fourth commit - second repo
7011d3d Third commit - second repo
9a466c5 Second commit
b1ec324 First commit
----

First determine the range of commits to include. Unlike the network protocols,
which figure out the minimum amount of data to transfer, we have to figure this out manually.
You could just do the same thing and bundle the entire repository, which does work.
But it's better to just bundle up the difference - just the three commits we made locally.

To do that, you have to calculate the difference. As we described in <<_commit_ranges>>,
you can specify a range of commits in a number of ways. To specify the three commits that we have
in our `master` that weren't in the branch we originally cloned, use something
like `origin/master..master` or `master ^origin/master`. You can test the specification by running `git log`.

[source,console]
----
$ git log --oneline master ^origin/master
71b84da Last commit - second repo
c99cf5b Fourth commit - second repo
7011d3d Third commit - second repo
----

So now that we can specify the range of commits to include in the bundle, let's bundle them up.
We do that by running `git bundle create`, giving the filename for our bundle and the range of commits to include

[source,console]
----
$ git bundle create commits.bundle master ^9a466c5
Counting objects: 11, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (9/9), 775 bytes, done.
Total 9 (delta 0), reused 0 (delta 0)
----

Now we have a `commits.bundle` file in our directory. If send it to our partner,
she can then import it into the original repository, even if more work has been done there in the meantime.

When she gets the bundle, she can inspect it to see what it contains before she imports it
into her repository. The first command to run is `git bundle verify` which makes sure the file
is actually a valid Git bundle and that you have all the necessary ancestors to reconstitute it properly.

[source,console]
----
$ git bundle verify ../commits.bundle
The bundle contains 1 ref
71b84daaf49abed142a373b6e5c59a22dc6560dc refs/heads/master
The bundle requires these 1 ref
9a466c572fe88b195efd356c3f2bbeccdb504102 second commit
../commits.bundle is okay
----

If the bundler had created a bundle of just the last two commits, rather than all three,
the original repository wouldn't be able to import it, since it's missing requisite history.
The output of `git bundle verify` would have looked like this instead.

[source,console]
----
$ git bundle verify ../commits-bad.bundle
error: Repository lacks these prerequisite commits:
error: 7011d3d8fc200abe0ad561c011c3852a4b7bbe95 Third commit - second repo
----

However, our first bundle is valid, so we can fetch commits from it.
If see the branches in the bundle that can be imported, there's also a command to just list the heads.

[source,console]
----
$ git bundle list-heads ../commits.bundle
71b84daaf49abed142a373b6e5c59a22dc6560dc refs/heads/master
----

The `verify` subcommand shows the heads as well. The point is to see what can be pulled in,
so run `git fetch` or `git pull` to import commits from this bundle. Here we fetch `master` in the
bundle to `other-master` in our repository.

[source,console]
----
$ git fetch ../commits.bundle master:other-master
From ../commits.bundle
 * [new branch]      master     -> other-master
----

Now we see that we have the imported commits on `other-master` as well as any commits we've done in the meantime in our `master`.

[source,console]
----
$ git log --oneline --decorate --graph --all
* 8255d41 (HEAD, master) Third commit - first repo
| * 71b84da (other-master) Last commit - second repo
| * c99cf5b Fourth commit - second repo
| * 7011d3d Third commit - second repo
|/
* 9a466c5 Second commit
* b1ec324 First commit
----

`git bundle` can be really useful for sharing or doing network-type operations when
there's no network available.
