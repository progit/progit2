[[_replace]]
=== Replace

The objects in a Git repository are immutable, but there's an interesting way to pretend to replace objects with
other objects.

`git replace` lets you specify an object and say "every time you see this object,
pretend it's this other object". This is most commonly used for replacing one commit in your
history with another one.

For example, let's say you have a huge history and want to split your repository into one short
history for new developers and one much longer and larger history for people interested in data mining.
You can graft one history onto the other by running `git replace` on the earliest commit in the new
repository with the latest commit on the older one. This is nice because it means that you don't
actually have to rewrite every commit in the new repository, as you'd normally have to do to join
them (because the parentage affects the SHA-1 hashes).

Let's try this out. Let's take an existing repository, split it into two repositories,
one recent and one historical, and then recombine them by running `git replace` without modifying
the recent repository's SHA-1 hashes.

We use a simple repository with five commits.

[source,console]
----
$ git log --oneline
ef989d8 Fifth commit
c6e1e95 Fourth commit
9c68fdc Third commit
945704c Second commit
c1822cf First commit
----

We want to break this up into two lines of history. One line goes from commit one to commit
four -- that's the historical one. The second line is just commits four and five -- that's the recent history.

.Example Git history
image::images/replace1.png[Example Git history]

Creating the historical history is easy. Just put a branch in the local repository and then push that branch
to `master` in a new remote repository.

[source,console]
----
$ git branch history c6e1e95
$ git log --oneline --decorate
ef989d8 (HEAD, master) Fifth commit
c6e1e95 (history) Fourth commit
9c68fdc Third commit
945704c Second commit
c1822cf First commit
----

.Creating a new `history` branch
image::images/replace2.png[Creating a new `history` branch]

Now push the new `history` to `master` in our new repository.

[source,console]
----
$ git remote add project-history https://github.com/schacon/project-history
$ git push project-history history:master
Counting objects: 12, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (12/12), 907 bytes, done.
Total 12 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (12/12), done.
To git@github.com:schacon/project-history.git
 * [new branch]      history -> master
----

Our history is published. Now the harder part is truncating our recent history so it's shorter.
We need an overlap to replace a commit in one branch with an equivalent commit in the other,
so we're going to truncate this to just commits four and five (so commit four overlaps).

[source,console]
----
$ git log --oneline --decorate
ef989d8 (HEAD, master) Fifth commit
c6e1e95 (history) Fourth commit
9c68fdc Third commit
945704c Second commit
c1822cf First commit
----

It's useful in this case to create a base commit that has instructions on how to expand the history, so other developers know what to do if they hit the first commit in the truncated history and need more.
So, create an initial commit object as our base point with instructions, then rebase the remaining commits (four and five) on top of it.

To do that, choose a point to split at, which for us is the third commit (`9c68fdc`).
So, our base commit is based off of that tree. We can create our base commit by running `git commit-tree`,
which just takes a tree and gives a brand new, parentless commit object hash back.

[source,console]
----
$ echo 'Get history from blah blah blah' | git commit-tree 9c68fdc^{tree}
622e88e9cbfbacfb75b5279245b9fb38dfea10cf
----

[NOTE]
=====
`git commit-tree` is one of a set of commands that are commonly referred to as 'plumbing' commands.
These are commands that aren't generally meant to be used directly, but instead are used by other
Git commands to do smaller jobs. When we're doing weird things like this, they allow us to do
really low-level things not meant for daily use. Read more about plumbing commands
in <<ch10-git-internals#_plumbing_porcelain>>
=====

.Creating a base commit using `commit-tree`
image::images/replace3.png[Creating a base commit using `commit-tree`]

OK, so now that we have a base commit, rebase the rest of our history on top of that by
running `git rebase --onto`. The `--onto` flag gets the SHA-1 hash we just got back from
running `git commit-tree`, and the rebase point is the third commit (the parent of the first
commit we want to keep, `9c68fdc`).

[source,console]
----
$ git rebase --onto 622e88 9c68fdc
First, rewinding head to replay your work on top of it...
Applying: fourth commit
Applying: fifth commit
----

.Rebasing the history on top of the base commit
image::images/replace4.png[Rebasing the history on top of the base commit]

We've re-written our recent history on top of a throw away base commit that now contains
instructions on how to reconstitute the entire history. We can push that new history to a new
project so that now when people clone that repository, they only see the most recent two commits and
then a base commit with instructions.

Let's now switch roles to someone cloning the project for the first time who wants the entire history.
To get the history data after cloning this truncated repository, they'd have to add a second
remote for the historical repository and then run `git fetch`.

[source,console]
----
$ git clone https://github.com/schacon/project
$ cd project

$ git log --oneline master
e146b5f Fifth commit
81a708d Fourth commit
622e88e Get history from blah blah blah

$ git remote add project-history https://github.com/schacon/project-history
$ git fetch project-history
From https://github.com/schacon/project-history
 * [new branch]      master     -> project-history/master
----

Now the collaborator has their recent commits in `master` and the historical
commits in `project-history/master`.


[source,console]
----
$ git log --oneline master
e146b5f Fifth commit
81a708d Fourth commit
622e88e Get history from blah blah blah

$ git log --oneline project-history/master
c6e1e95 Fourth commit
9c68fdc Third commit
945704c Second commit
c1822cf First commit
----

To combine them, simply run `git replace` with the commit you want to replace followed by
the commit you want to replace it with. So, to replace the "fourth" commit in `master` with
the "fourth" commit in `project-history/master`, run

[source,console]
----
$ git replace 81a708d c6e1e95
----

Now, if you look at the history of `master`, you see

[source,console]
----
$ git log --oneline master
e146b5f Fifth commit
81a708d Fourth commit
9c68fdc Third commit
945704c Second commit
c1822cf First commit
----

Cool, right? Without having to change all the hashes upstream, we were able to replace
one commit in our history with an entirely different commit. All the normal
tools (`git bisect`, `git blame`, etc) work as we'd expect.

.Combining the commits with `git replace`
image::images/replace5.png[Combining the commits with `git replace`]

Interestingly, it still shows `81a708d` as the SHA-1 hash, even though it's actually using
the `c6e1e95` commit data that we replaced it with. Even if you run a command like `git cat-file`,
you see the replaced data.

[source,console]
----
$ git cat-file -p 81a708d
tree 7bc544cf438903b65ca9104a1e30345eee6c083d
parent 9c68fdceee073230f19ebb8b5e7fc71b479c0252
author Scott Chacon <schacon@gmail.com> 1268712581 -0700
committer Scott Chacon <schacon@gmail.com> 1268712581 -0700

fourth commit
----

Remember that the actual parent of `81a708d` is our placeholder commit (`622e88e`), not `9c68fdce` as it states here.

Another interesting thing is that this data is kept in our references.

[source,console]
----
$ git for-each-ref
e146b5f14e79d4935160c0e83fb9ebe526b8da0d commit	refs/heads/master
c6e1e95051d41771a649f3145423f8809d1a74d4 commit	refs/remotes/history/master
e146b5f14e79d4935160c0e83fb9ebe526b8da0d commit	refs/remotes/origin/HEAD
e146b5f14e79d4935160c0e83fb9ebe526b8da0d commit	refs/remotes/origin/master
c6e1e95051d41771a649f3145423f8809d1a74d4 commit	refs/replace/81a708dd0e167a3f691541c7a6463343bc457040
----

This means that it's easy to share our replacement with others, because we can push this to our server
where other people can easily pull it. This isn't that helpful in the history grafting scenario
we've gone over here (since everyone would be pulling both histories anyhow, so why separate them?)
but it can be useful in other circumstances.
