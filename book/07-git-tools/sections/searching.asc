[[_searching]]
=== Searching

You often need to find where a function is called or defined,
or find the history of a method. Git provides a couple of useful tools for searching the code
and commits stored in a repository quickly and easily. We go through a few of them.

[[_git_grep]]
==== Git Grep

Git includes a subcommand called `grep` that searches any committed tree, the working
directory, or even the index for a string or regular expression. In these examples, we look through the Git source code itself.

By default, `git grep` looks through the files in your working directory.
Pass `-n` to print out the line numbers where Git finds matches.

[source,console]
----
$ git grep -n gmtime_r
compat/gmtime.c:3:#undef gmtime_r
compat/gmtime.c:8:      return git_gmtime_r(timep, &result);
compat/gmtime.c:11:struct tm *git_gmtime_r(const time_t *timep, struct tm *result)
compat/gmtime.c:16:     ret = gmtime_r(timep, result);
compat/mingw.c:826:struct tm *gmtime_r(const time_t *timep, struct tm *result)
compat/mingw.h:206:struct tm *gmtime_r(const time_t *timep, struct tm *result);
date.c:482:             if (gmtime_r(&now, &now_tm))
date.c:545:             if (gmtime_r(&time, tm)) {
date.c:758:             /* gmtime_r() in match_digit() may have clobbered it */
git-compat-util.h:1138:struct tm *git_gmtime_r(const time_t *, struct tm *);
git-compat-util.h:1140:#define gmtime_r git_gmtime_r
----

There are a number of interesting flags you can provide `git grep`.

For instance, instead of the previous command, if you add the `--count` to `git grep`, Git can
summarize the output by just showing which files matched and how many matches were in each file.

[source,console]
----
$ git grep --count gmtime_r
compat/gmtime.c:4
compat/mingw.c:1
compat/mingw.h:1
date.c:3
git-compat-util.h:2
----

To see the method or function where the match was found, add the `-p` or `--show-function` flag.

[source,console]
----
$ git grep -p gmtime_r *.c
date.c=static int match_multi_number(timestamp_t num, char c, const char *date,
date.c:         if (gmtime_r(&now, &now_tm))
date.c=static int match_digit(const char *date, struct tm *tm, int *offset, int *tm_gmt)
date.c:         if (gmtime_r(&time, tm)) {
date.c=int parse_date_basic(const char *date, timestamp_t *timestamp, int *offset)
date.c:         /* gmtime_r() in match_digit() may have clobbered it */
----

Here we see that `gmtime_r` is called in the `match_multi_number` and `match_digit` functions
in `date.c`.

You can also look for complex combinations of strings with the `--and` flag, which requires that the strings
that appear on both sides of the flag appear on the current line. For instance, let's look for any lines that define
a constant containing either the strings `LINK` or `BUF_MAX` in the Git codebase in Git version 1.8.0.

Here we also use the `--break` and `--heading` flags which help split up the output into a more readable format.

[source,console]
----
$ git grep --break --heading \
    -n -e '#define' --and \( -e LINK -e BUF_MAX \) v1.8.0
v1.8.0:builtin/index-pack.c
62:#define FLAG_LINK (1u<<20)

v1.8.0:cache.h
73:#define S_IFGITLINK  0160000
74:#define S_ISGITLINK(m)       (((m) & S_IFMT) == S_IFGITLINK)

v1.8.0:environment.c
54:#define OBJECT_CREATION_MODE OBJECT_CREATION_USES_HARDLINKS

v1.8.0:strbuf.c
326:#define STRBUF_MAXLINK (2*PATH_MAX)

v1.8.0:symlinks.c
53:#define FL_SYMLINK  (1 << 2)

v1.8.0:zlib.c
30:/* #define ZLIB_BUF_MAX ((uInt)-1) */
31:#define ZLIB_BUF_MAX ((uInt) 1024 * 1024 * 1024) /* 1GB */
----

`git grep` has several advantages over normal searching commands like `grep` and `ack`.
The first is that it's really fast. The second is that you can search anywhere in a Git repository,
not just the working directory. As we saw in the above example, we looked for terms in an older
version of the Git source code, not just in the version that was currently checked out.

==== Git Log Searching

Perhaps you're not looking for *where* a term exists, but *when* it was introduced.
`git log` has a number of powerful options for finding specific commits by the content of their
commit messages or even by the changes they introduce.

To find, for example, when the `ZLIB_BUF_MAX` constant was originally introduced, `git log`
only shows the commits that either added or removed that string if we add the `-S` flag.

[source,console]
----
$ git log -S ZLIB_BUF_MAX --oneline
e01503b zlib: allow feeding more than 4GB in one go
ef49a7a zlib: zlib can only process 4GB at a time
----

If we look at the changes in those commits we see that in `ef49a7a` the constant was introduced
and in `e01503b` it was modified.

To be more specific, provide a regular expression to search for with the `-G` flag.

===== Line Log Search

Another fairly advanced log search technique that's insanely useful is the line history search.
This is a fairly recent addition and not very well known, but it can be really helpful.
Add the `-L` flag to `git log` to show the history of a function or line of code.

For example, to see every change made to the function `git_deflate_bound` in `zlib.c`,
run `git log -L :git_deflate_bound:zlib.c`. Git tries to figure out what the bounds of that function
are and then looks through the history and shows every change that was made to the function
as a series of patches back to when the function was first created.

[source,console]
----
$ git log -L :git_deflate_bound:zlib.c
commit ef49a7a0126d64359c974b4b3b71d7ad42ee3bca
Author: Junio C Hamano <gitster@pobox.com>
Date:   Fri Jun 10 11:52:15 2011 -0700

    zlib: zlib can only process 4GB at a time

diff --git a/zlib.c b/zlib.c
--- a/zlib.c
+++ b/zlib.c
@@ -85,5 +130,5 @@
-unsigned long git_deflate_bound(z_streamp strm, unsigned long size)
+unsigned long git_deflate_bound(git_zstream *strm, unsigned long size)
 {
-       return deflateBound(strm, size);
+       return deflateBound(&strm->z, size);
 }


commit 225a6f1068f71723a910e8565db4e252b3ca21fa
Author: Junio C Hamano <gitster@pobox.com>
Date:   Fri Jun 10 11:18:17 2011 -0700

    zlib: wrap deflateBound() too

diff --git a/zlib.c b/zlib.c
--- a/zlib.c
+++ b/zlib.c
@@ -81,0 +85,5 @@
+unsigned long git_deflate_bound(z_streamp strm, unsigned long size)
+{
+       return deflateBound(strm, size);
+}
+
----

If Git can't figure out how to match a function or method in your programming language,
you can also provide a regular expression. For example, the following would do the same thing:

`git log -L '/unsigned long git_deflate_bound/',/^}/:zlib.c`

You could also give a range of lines or a single line number to get the same sort of output.
