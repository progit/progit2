[[_git_reset]]
=== Reset Demystified

Before moving on to more specialized tools, let's talk about `git reset` and `git checkout`.
These commands are two of the most confusing parts of Git when you first encounter them.
They do so many things that it seems hopeless to actually understand them and employ them properly.
For this, we recommend a simple metaphor.

==== The Three Trees

An easy way to think about `git reset` and `git checkout` is through the illusion of Git being
a content manager of three different trees. By tree we really mean a collection of files,
which we call a snapshot.

Git manages and manipulates these three trees.

[cols="1,2",options="header"]
|================================
| Tree              | Role
| HEAD              | Last commit snapshot, next parent
| Index             | Proposed next commit snapshot
| Working Directory | Sandbox
|================================

===== The HEAD

`HEAD` is the pointer to the current branch reference, which is in turn a pointer to the last commit made on that branch.
That means `HEAD` is the parent of the next commit that's created.
It's generally simplest to think of `HEAD` as *your last commit on that branch*.

In fact, it's pretty easy to see what that commit looks like.
Here's an example of showing the actual directory listing and hash for each file in the HEAD commit.

[source,console]
----
$ git cat-file -p HEAD
tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf
author Scott Chacon  1301511835 -0700
committer Scott Chacon  1301511835 -0700

initial commit

$ git ls-tree -r HEAD
100644 blob a906cb2a4a904a152...   README
100644 blob 8f94139338f9404f2...   Rakefile
040000 tree 99f1a6d12cb4b6f19...   lib
----

`git cat-file` and `git ls-tree` are plumbing commands used for lower level things and aren't
really used in day-to-day work, but they help us see what's going on here.

[[_the_index]]
===== The Index

The _index_ is your *proposed next commit*. We've also been referring to this concept as
Git's staging area since this is where Git gets the list of files to commit when you run `git commit`.

Git populates this index with a list of all the files that were last checked out into your working
directory and what they looked like when they were originally checked out. You then modify some of
those files, and `git commit` converts them into a tree for a new commit.

[source,console]
----
$ git ls-files -s
100644 a906cb2a4a904a152e80877d4088654daad0c859 0	README
100644 8f94139338f9404f26296befa88755fc2598c289 0	Rakefile
100644 47c6340d6459e05787f644c2447d2595f5d3a54b 0	lib/simplegit.rb
----

Again, here we're running `git ls-files`, which shows what's currently in the index.

===== The Working Directory

Finally, you have your _working directory_.
The other two trees store their content in an efficient but inconvenient format, inside the `.git` folder.
The working directory is where actual files are stored, which makes them much easier to edit.
Think of the working directory as a sandbox, where you can try changes out before putting them
into the index, and then committing them into the repository.

[source,console]
----
$ tree
.
├── README
├── Rakefile
└── lib
    └── simplegit.rb

1 directory, 3 files
----

==== The Workflow

Git's main purpose is to record snapshots of your project by manipulating these three trees.

.Git's typical workflow
image::images/reset-workflow.png[Git's typical workflow]

Let's visualize this process. Say you go into a new directory with a single file in it.
We call this `v1` of the file, and we indicate it in blue.
Now we run `git init`, which creates a Git repository with a `HEAD` reference that doesn't point
to a branch yet (`master` doesn't exist).

.Newly-initialized Git repository with unstaged file in the working directory
image::images/reset-ex1.png[Newly-initialized Git repository with unstaged file in the working directory]

At this point, only the working directory tree has any content.

Now we want to commit this file, so we run `git add` to copy what's in the working directory
into the index.

.File is copied to index on `git add`
image::images/reset-ex2.png[File is copied to index on `git add`]

Then we run `git commit`, which takes the content of the index and saves it in the repository,
creates a commit, and updates `master` to point to that commit.

.The `git commit` step
image::images/reset-ex3.png[The `git commit` step]

If we run `git status`, we see no changes, because all three trees are the same.

Now we want to make a change to `v1` of that file and commit it.
We go through almost the same process. First, we change the file in our working directory.
Let's call this `v2` of the file, and indicate it in red.

.Git repository with changed file in the working directory
image::images/reset-ex4.png[Git repository with changed file in the working directory]

If we run `git status` right now, we see the file in red in the `Changes not staged for commit`
section because the version of the file in the working directory and that in the index are different.
Next, we run `git add file1.txt` to add `v2` to the index.

.Staging change to index
image::images/reset-ex5.png[Staging change to index]

At this point running `git status` shows the file in green
under `Changes to be committed` because the index and `HEAD` differ -- that is,
our proposed next commit is now different from our last commit.
Finally, we run `git commit` to create the commit.

.The `git commit` step with changed file
image::images/reset-ex6.png[The `git commit` step with changed file]

Now `git status` shows nothing because all three trees are the same again.

Switching branches or cloning goes through a similar process.
When you checkout a branch, Git changes `HEAD` to point to the new branch, populates the index
with a snapshot of the last commit in that branch, then copies the content of the index into your working directory.

==== The Role of Reset

`git reset` makes more sense when viewed this way.

For the purposes of these examples, let's say that we've modified `file.txt` again and committed
it a third time. So now our history looks like

.Git repository with three commits
image::images/reset-start.png[Git repository with three commits]

Let's now walk through exactly what `reset` does when you call it.
It directly manipulates these three trees in a simple and predictable way.
It does up to three basic things.

===== Step 1: Move HEAD

The first thing `git reset` does is move what `HEAD` points to.
This isn't the same as changing `HEAD` itself (which is what running `git checkout` does).
`git reset` moves the branch that `HEAD` points to.
This means if `HEAD` points to `master` (i.e. you're currently on `master`),
running `git reset 9e5e6a4` makes `master` point to `9e5e6a4`.

.Soft reset
image::images/reset-soft.png[Soft reset]

No matter what form of `git reset` you run, this is the first thing Git always does.
If you run `git reset --soft`, Git simply stops there.

Now take a second to look at that diagram and realize what happened. This essentially undid the last commit.
When you run `git commit`, Git creates a new commit and moves the branch that `HEAD` points to
to point to the new commit. When you run `git reset --soft HEAD~`, you're moving the branch to
the parent of `HEAD`, which is back to where it was, without changing the index or working directory.
You could now update the index and run `git commit` again to accomplish what `git commit --amend`
would do (see <<_git_amend>>).

===== Step 2: Updating the Index (`--mixed`)

Note that if you run `git status` now you see in green the difference between the index and what the new HEAD is.

The next thing `git reset` does is to update the index with the contents of whatever snapshot `HEAD` now points to.

.Mixed reset
image::images/reset-mixed.png[Mixed reset]

If you specify the `--mixed` flag, `git reset` stops at this point.
This is also the default, so if you specify no flag at all (just `git reset HEAD~` in this case),
this is where the command stops.

Now take another second to look at that diagram and realize what happened. Git still undid your last commit,
but also _unstaged_ everything.
You rolled back to the state that existed before you ran `git add` and `git commit`.

===== Step 3: Updating the Working Directory (`--hard`)

The third thing that `git reset` does is to make the working directory look like the index.
If you use the `--hard` flag, `git reset` continues to this stage.

.Hard reset
image::images/reset-hard.png[Hard reset]

So let's think about what just happened.
You undid your last commit, the results of `git add` and `git commit`, *and* all the work you did in
your working directory.

It's important to note that this flag (`--hard`) is the only way to make `git reset` dangerous,
and one of the very few cases where Git actually destroys data.
Any other invocation of `git reset` can be pretty easily undone, but the `--hard` flag can't,
since it forcibly overwrites files in the working directory.
In this particular case, we still have the `v3` version of our file in a commit in our repository,
and we could get it back by doing something we'll describe in a later chapter, but if we hadn't committed the file,
Git still would have overwritten it, making it unrecoverable.


===== Recap

`git reset` overwrites these three trees in order, stopping when you tell it.

1. Move the branch `HEAD` points to _(stop here if `--soft`)_.
2. Make the index look like `HEAD` _(stop here unless `--hard`)_.
3. Make the working directory look like the Index.

==== Reset With a Path

That covers the behavior of `reset` in its basic form, but you can also provide it with a path to act upon.
If you specify a path, `reset` will skip step 1, and limit the remainder of its actions to a specific file or set of files.
This actually sort of makes sense -- HEAD is just a pointer, and you can't point to part of one commit and part of another.
But the index and working directory _can_ be partially updated, so reset proceeds with steps 2 and 3.

That covers the behavior of `git reset` in its basic form, but you can also provide it with a path.
If you do, `git reset` skips step 1, and limits the remainder of its actions to a specific file
or set of files. This actually sort of makes sense -- `HEAD` is just a pointer, and you can't point
to part of one commit and part of another. But the index and working directory _can_ be partially updated,
so `git reset` proceeds with steps 2 and 3.

So, assume we run `git reset file.txt`.
This form (since you didn't specify a commit SHA-1 hash or branch, and you didn't
specify `--soft` or `--hard`) is shorthand for `git reset --mixed HEAD file.txt`, which

So it essentially just copies `file.txt` from `HEAD` to the index.

.Mixed reset with a path
image::images/reset-path1.png[Mixed reset with a path]

This has the practical effect of _unstaging_ the file.
If we look at the diagram and think about what `git add` does, they're exact opposites.

.Staging file to index
image::images/reset-path2.png[Staging file to index]

This is why the output of `git status` suggests that you run this to unstage a file (see <<ch02-git-basics-chapter#_unstaging>> for more on this).

We could just as easily not let Git assume we mean "pull the data from `HEAD`" by specifying a
specific commit to pull that file version from.
We'd just run something like `git reset eb43bf file.txt`.

.Soft reset with a path to a specific commit
image::images/reset-path3.png[Soft reset with a path to a specific commit]

This effectively does the same thing as if we had reverted the content of the file to *v1* in the working directory, ran `git add` on it, then reverted it back to *v3* again (without actually going through all those steps).
If we run `git commit` now, it records a commit that reverts that file
back to `v1`, even though we never actually had it in our working directory again.

It's also interesting to note that like `git add`, `git reset` accepts a `--patch` flag to
unstage content on a hunk-by-hunk basis. So you can selectively unstage or revert content.

==== Squashing

Let's look at how to do something interesting with this newfound power -- squashing commits.

Maybe you have a series of commits with messages like `oops.`, `WIP`, and `forgot this file`.
Run `git reset` to quickly and easily squash them into a single commit that makes you look really smart.
(<<_squashing>> shows another way to do this, but in this example it's simpler to run `git reset`.)

Let's say you have a project where the first commit contained one file, the second commit added a new file
and changed the first, and the third commit changed the first file again.
The second commit was a work in progress and you want to squash it.

.Git repository
image::images/reset-squash-r1.png[Git repository]

Run `git reset --soft HEAD~2` to move the `HEAD` branch back to an older commit (the first commit you
want to keep).

.Moving HEAD with soft reset
image::images/reset-squash-r2.png[Moving HEAD with soft reset]

And then simply run `git commit` again.

.Git repository with squashed commit
image::images/reset-squash-r3.png[Git repository with squashed commit]

You see that your reachable history, the history you would push, now looks like you had
one commit with `file-a.txt` `v1`, then a second that both modified `file-a.txt` to `v3` and
added `file-b.txt`. The commit with the `v2` version of the file is no longer in the history.

==== Check It Out

Finally, you may wonder what the difference is between `git checkout` and `git reset`.
Like `git reset`, `git checkout` manipulates the three trees, and it works differently depending
on whether you give the command a path.

===== Without Paths

First, unlike `git reset --hard`, `git checkout` is working directory safe. It checks to make sure it's
not blowing away files that contain changes. Actually, it's a bit smarter than that -- it tries
to do a trivial merge in the working directory, so all of the files you _haven't_ changed are updated.
`git reset --hard`, on the other hand, simply replaces everything across the board without checking.

The second important difference is how `git checkout` updates `HEAD`.
Where `git reset` moves the branch that `HEAD` points to, `git checkout` moves `HEAD` itself to
point to another branch.

For instance, say we have `master` and `develop` which point to different commits, and we're
currently on `develop` (so `HEAD` points to it). If we run `git reset master`, `develop` itself now
points to the same commit as `master`. If we instead run `git checkout master`, `develop` doesn't
move but `HEAD` does, which now points to `master`.

So, in both cases we're moving `HEAD` to point to commit A, but _how_ we do so is very different.
`git reset` moves the branch `HEAD` points to, whereas `git checkout` moves `HEAD` itself.

.`git checkout` and `git reset`
image::images/reset-checkout.png[`git checkout` and `git reset`]

===== With Paths

The other way to run `git checkout` is with a path, which, like `git reset`, doesn't move `HEAD`.
It's just like `git reset [branch] file` in that it updates the index with that file, but it also
overwrites the file in the working directory. It would be exactly like `git reset --hard [branch] file`
(if `git reset` would let you do that) -- it's not working-directory safe, and it doesn't move `HEAD`.

Also, like `git reset` and `git add`, `git checkout` accepts a `--patch` flag to allow you to
selectively revert file content on a hunk-by-hunk basis.

==== Summary

Hopefully now you understand and feel more comfortable with `git reset`, but you're probably still a
little confused about exactly how it differs from `git checkout`. Plus, you're probably feeling
that you couldn't possibly remember all the rules of the different invocations.

Here's a cheat-sheet showing which commands affect which trees.
The `HEAD` column contains `REF` if that command moves the reference (branch) that `HEAD` points to,
and `HEAD` if it moves `HEAD` itself.
Pay especial attention to the `wd safe?` column -- if it contains *NO*, take a second to think
before running that command.

[options="header", cols="3,1,1,1,1"]
|================================
| | HEAD | Index | Workdir | WD Safe?
| *Commit Level* | | | |
| `reset --soft [commit]` | REF | NO | NO | YES
| `reset [commit]` | REF | YES | NO | YES
| `reset --hard [commit]` | REF | YES | YES | *NO*
| `checkout <commit>` | HEAD | YES | YES | YES
| *File Level* | | | |
| `reset [commit] <paths>` | NO | YES | NO | YES
| `checkout [commit] <paths>` | NO | YES | YES | *NO*
|================================
