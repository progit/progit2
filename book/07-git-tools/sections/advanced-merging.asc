[[_advanced_merging]]
=== Advanced Merging

Merging in Git is typically fairly easy. Git makes it easy to merge branches multiple times,
meaning that you can have a very long lived branch that you keep up to date as you go,
solving small conflicts often, rather than being surprised by one enormous conflict when you're
done with the branch.

However, sometimes tricky conflicts do occur. Unlike some other VCSs, Git doesn't try to be overly
clever about merge conflict resolution. Git's philosophy is to be smart about determining when a
merge resolution is unambiguous. But, if there's a conflict, Git doesn't try to be clever by
automatically resolving it. Therefore, if you wait too long to merge branches that diverge,
you can quickly run into issues.

In this section, we go over what some of those issues might be and what tools Git provides to help
handle these tricky situations. We also cover some of the different, non-standard types of merges,
as well as see how to back out of merges that didn't work out right.

==== Merge Conflicts

While we covered some basics on resolving merge conflicts in <<ch03-git-branching#_basic_merge_conflicts>>, for more complex conflicts, Git provides a few tools to help figure out what's going on and how to better deal with the conflicts.

First of all, if at all possible, make sure your working directory is clean before doing a merge that may have conflicts.
If you have work in progress, either commit it to a temporary branch or stash it.
This makes it so that you can undo *anything* you try here.
If you have unsaved changes in your working directory when you try a merge, some of these tips may help preserve that work.

Let's walk through a very simple example.
We have a super simple Ruby program that prints 'hello world'.

[source,ruby]
----
#! /usr/bin/env ruby

def hello
  puts 'hello world'
end

hello()
----

We create a new branch named `whitespace` and proceed to change all the Unix line endings (LF)
to DOS line endings (CRLF), essentially changing every line of the file, but just with whitespace changes.
Then we change the line `hello world` to `hello mundo`.

[source,console]
----
$ git checkout -b whitespace
Switched to a new branch 'whitespace'

$ unix2dos hello.rb
unix2dos: converting file hello.rb to DOS format ...
$ git commit -am 'Convert hello.rb to DOS'
[whitespace 3270f76] Convert hello.rb to DOS
 1 file changed, 7 insertions(+), 7 deletions(-)

$ vim hello.rb
$ git diff -b
diff --git a/hello.rb b/hello.rb
index ac51efd..e85207e 100755
--- a/hello.rb
+++ b/hello.rb
@@ -1,7 +1,7 @@
 #! /usr/bin/env ruby

 def hello
-  puts 'hello world'
+  puts 'hello mundo'^M
 end

 hello()

$ git commit -am 'Use Spanish instead of English'
[whitespace 6d338d2] Use Spanish instead of English
 1 file changed, 1 insertion(+), 1 deletion(-)
----

Now we switch back to `master` and add some documentation.

[source,console]
----
$ git checkout master
Switched to branch 'master'

$ vim hello.rb
$ git diff
diff --git a/hello.rb b/hello.rb
index ac51efd..36c06c8 100755
--- a/hello.rb
+++ b/hello.rb
@@ -1,5 +1,6 @@
 #! /usr/bin/env ruby

+# prints out a greeting
 def hello
   puts 'hello world'
 end

$ git commit -am 'Add comment documenting the function'
[master bec6336] Add comment documenting the function
 1 file changed, 1 insertion(+)
----

Now we try to merge in `whitespace` and we get conflicts.

[source,console]
----
$ git merge whitespace
Auto-merging hello.rb
CONFLICT (content): Merge conflict in hello.rb
Automatic merge failed; fix conflicts and then commit the result.
----

[[_abort_merge]]
===== Aborting a Merge

We now have a few options.
First, let's cover how to get out of this situation.
If you perhaps weren't expecting conflicts and don't want to deal with the situation yet, simply back out of the merge by running `git merge --abort`.

[source,console]
----
$ git status -sb
## master
UU hello.rb

$ git merge --abort

$ git status -sb
## master
----

Running `git merge --abort` tries to revert back to the state that existed before you ran the merge.
The only cases where it might not work would be if you had unstashed uncommitted changes in your
working directory. Otherwise it should work fine.

If, for some reason, you just want to start over, you can also run `git reset --hard HEAD`,
and your repository is back to the last committed state. Remember that any uncommitted work is lost.

===== Ignoring Whitespace

In this specific case, the conflicts are whitespace related. We know this because we deliberately
created the conflicts, but it's also pretty easy to tell in real cases when looking at the conflicts
because every line is removed on one side and added again on the other. By default, Git sees all
of these lines as changed, so it can't merge the files.

The default merge strategy can take arguments though, and a few of them handle ignoring whitespace changes.
If you see that you have a lot of whitespace issues in a merge, simply abort it and do it again,
this time running `git merge` with either `-Xignore-all-space` or `-Xignore-space-change`.
The first flag ignores whitespace *completely* when comparing lines.
The second treats sequences of one or more whitespace characters as equivalent.

[source,console]
----
$ git merge -Xignore-space-change whitespace
Auto-merging hello.rb
Merge made by the 'recursive' strategy.
 hello.rb | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
----

Since in this case the actual file changes didn't conflict, once we ignore the whitespace changes,
everything merges just fine.

This is a lifesaver if you have someone on your team who likes to occasionally reformat everything from spaces to tabs, or vice-versa.

[[_manual_remerge]]
===== Manual File Re-merging

Though Git handles whitespace changes pretty well, there are other types of changes that perhaps Git
can't handle automatically, but for which there are scriptable fixes. As an example,
let's pretend that Git couldn't handle the whitespace change and we need to resolve it by hand.

What we really need to do is run the file we're trying to merge through a `dos2unix` program before
trying the actual file merge. How would we do that?

First, we get into the merge conflict state. Then we get copies of my version of the file,
the other version (from the branch we're merging in), and the common version (from where both
sides branched off). Then we fix up either the other side or our side and try the merge
again for just this single file.

Getting the three file versions is actually pretty easy. Git stores all of these versions
in stages which each have a number associated with them.
Stage 1 is the common ancestor, stage 2 is your version, and stage 3 is from the `MERGE_HEAD`,
the version you're merging in (`theirs`).

You can extract a copy of each of these versions of the conflicted file by running `git show` and
using a special syntax.

[source,console]
----
$ git show :1:hello.rb > hello.common.rb
$ git show :2:hello.rb > hello.ours.rb
$ git show :3:hello.rb > hello.theirs.rb
----

To get a little more hard core, you can also run `git ls-files -u` to see the actual hashes of each file.

[source,console]
----
$ git ls-files -u
100755 ac51efdc3df4f4fd328d1a02ad05331d8e2c9111 1	hello.rb
100755 36c06c8752c78d2aff89571132f3bf7841a7b5c3 2	hello.rb
100755 e85207e04dfdd5eb0a1e9febbc67fd837c44a1cd 3	hello.rb
----

`:1:hello.rb` is just a shorthand for looking up that file's SHA-1 hash.

Now that we have the content of all three stages in our working directory, we can manually
fix up the whitespace issue and re-merge the file by running the little-known `git merge-file` command
which does just that.

[source,console]
----
$ dos2unix hello.theirs.rb
dos2unix: converting file hello.theirs.rb to Unix format ...

$ git merge-file -p \
    hello.ours.rb hello.common.rb hello.theirs.rb > hello.rb

$ git diff -b
diff --cc hello.rb
index 36c06c8,e85207e..0000000
--- a/hello.rb
+++ b/hello.rb
@@@ -1,8 -1,7 +1,8 @@@
  #! /usr/bin/env ruby

 +# prints out a greeting
  def hello
-   puts 'hello world'
+   puts 'hello mundo'
  end

  hello()
----

At this point we've nicely merged the file. In fact, this actually works better than
the `--ignore-space-change` flag to `git diff` because this actually fixes the whitespace changes before
the merge instead of simply ignoring them. In the `--ignore-space-change` merge, we actually
ended up with a few lines with DOS line endings.

To get an idea before finalizing this commit about what was actually changed between one side
or the other, run `git diff` to compare what's in your working director that you're about to commit
as the result of the merge, to any of these stages. Let's go through them all.

To compare your result to what you had in your branch before the merge (to see what
the merge introduced) run `git diff --ours`.

[source,console]
----
$ git diff --ours
* Unmerged path hello.rb
diff --git a/hello.rb b/hello.rb
index 36c06c8..44d0a25 100755
--- a/hello.rb
+++ b/hello.rb
@@ -2,7 +2,7 @@

 # prints out a greeting
 def hello
-  puts 'hello world'
+  puts 'hello mundo'
 end

 hello()
----

Here we easily see what happened in our branch. What we're actually introducing to this file
with this merge is a chang to that single line.

To see how the result of the merge differs from what was on their side, run `git diff --theirs`.
In this and the following example, include the `-b` flag to strip out the whitespace because we're comparing
it to what's in the repository, not to what's in our cleaned up `hello.theirs.rb`.

[source,console]
----
$ git diff --theirs -b
* Unmerged path hello.rb
diff --git a/hello.rb b/hello.rb
index e85207e..44d0a25 100755
--- a/hello.rb
+++ b/hello.rb
@@ -1,5 +1,6 @@
 #! /usr/bin/env ruby

+# prints out a greeting
 def hello
   puts 'hello mundo'
 end
----

Finally, see how the file has changed from both sides by running `git diff --base`.

[source,console]
----
$ git diff --base -b
* Unmerged path hello.rb
diff --git a/hello.rb b/hello.rb
index ac51efd..44d0a25 100755
--- a/hello.rb
+++ b/hello.rb
@@ -1,7 +1,8 @@
 #! /usr/bin/env ruby

+# prints out a greeting
 def hello
-  puts 'hello world'
+  puts 'hello mundo'
 end

 hello()
----

At this point we can run `git clean` to clear out the extra files we created to do the manual
merge but no longer need.

[source,console]
----
$ git clean -f
Removing hello.common.rb
Removing hello.ours.rb
Removing hello.theirs.rb
----

[[_checking_out_conflicts]]
===== Checking Out Conflicts

Perhaps we're not happy with the resolution at this point for some reason, or maybe manually editing one or both sides still didn't work well and we need more context.

Let's change the example. For this example, we have two longer lived branches that each have a few
commits in them but create a legitimate conflict when merged.

[source,console]
----
$ git log --graph --oneline --decorate --all
* f1270f7 (HEAD, master) Update README
* 9af9d3b Create README
* 694971d Update phrase to 'hola world'
| * e3eb223 (mundo) Add more tests
| * 7cff591 Create initial testing script
| * c3ffff1 Change text to 'hello mundo'
|/
* b7dcc89 Initial hello world code
----

We now have three unique commits that live only on `master` and three others that live on `mundo`.
If we try to merge `mundo`, we get a conflict.

[source,console]
----
$ git merge mundo
Auto-merging hello.rb
CONFLICT (content): Merge conflict in hello.rb
Automatic merge failed; fix conflicts and then commit the result.
----

We'd like to see the merge conflict. If we open the file, we see

[source,ruby]
----
#! /usr/bin/env ruby

def hello
<<<<<<< HEAD
  puts 'hola world'
=======
  puts 'hello mundo'
>>>>>>> mundo
end

hello()
----

Both sides of the merge added content to this file, but some of the commits modified the file in
the same place, causing the conflict.

Let's explore a couple of tools to determine how this conflict came to be.
Perhaps it's not obvious how exactly you should fix it. You need more context.

One helpful tool is `git checkout` with the `--conflict` flag. This re-checksout the file
and replaces the merge conflict markers. This can be useful to reset the markers to try
resolving the conflicts again.

You can pass the `--conflict` flag either `diff3` or `merge` (the default). If you pass `diff3`,
Git uses a slightly different version of conflict markers, not only giving you the `ours`
and `theirs` versions, but also the `base` version inline for more context.

[source,console]
----
$ git checkout --conflict=diff3 hello.rb
----

Once we run that, the file looks like this instead.

[source,ruby]
----
#! /usr/bin/env ruby

def hello
<<<<<<< ours
  puts 'hola world'
||||||| base
  puts 'hello world'
=======
  puts 'hello mundo'
>>>>>>> theirs
end

hello()
----

If you like this format, set it as the default for future merge conflicts by setting
the `merge.conflictstyle` setting to `diff3`.

[source,console]
----
$ git config --global merge.conflictstyle diff3
----

`git checkout` can also take the `--ours` and `--theirs` flags, which can be a really fast way
of choosing just one side or the other without merging at all.

This can be particularly useful for conflicts of binary files where you can simply choose one side,
or where you only want to merge certain files from another branch.
You can do the merge and then checkout certain files from one side or the other before committing.

[[_merge_log]]
===== Merge Log

Another useful tool when resolving merge conflicts is `git log`.
This can help show context on what may have contributed to the conflicts.
Reviewing a little bit of history to remember why two lines of development were touching the same
area of code can be really helpful.

To see a full list of all of the unique commits included in either branch involved in this merge,
use the `triple dot` syntax we learned in <<ch07-git-tools#_triple_dot>>.

[source,console]
----
$ git log --oneline --left-right HEAD...MERGE_HEAD
< f1270f7 Update README
< 9af9d3b Create README
< 694971d Update phrase to 'hola world'
> e3eb223 Add more tests
> 7cff591 Create initial testing script
> c3ffff1 Change text to 'hello mundo'
----

That's a nice list of all six commits involved, as well as which line of development each commit was on.

We can further simplify this to give much more specific context. If we add the `--merge` flag to `git log`,
it only shows the commits in either side of the merge that touch a file that's currently conflicted.

[source,console]
----
$ git log --oneline --left-right --merge
< 694971d Update phrase to 'hola world'
> c3ffff1 Change text to 'hello mundo'
----

If you run that with the `-p` flag instead, you see just the diffs to the file that ended up in conflict.
This can be *really* helpful in quickly showing the context you need to help understand why
something conflicts and how to more intelligently resolve it.

===== Combined Diff Format

Since Git stages any successful merge results, when you run `git diff` while in a conflicted merge state,
you only see what's currently still in conflict. This can help show what you still have to resolve.

When you run `git diff` right after a merge conflict, you see information in a rather unique diff output
format.

[source,console]
----
$ git diff
diff --cc hello.rb
index 0399cd5,59727f0..0000000
--- a/hello.rb
+++ b/hello.rb
@@@ -1,7 -1,7 +1,11 @@@
  #! /usr/bin/env ruby

  def hello
++<<<<<<< HEAD
 +  puts 'hola world'
++=======
+   puts 'hello mundo'
++>>>>>>> mundo
  end

  hello()
----

The format is called `Combined Diff`, and includes two columns of data at the beginning of each line.
The first column shows if that line is different (added or removed) between `ours` and the file in
your working directory. The second column does the same between `theirs` and your working directory copy.

So, in that example you see that the `<<<<<<<` and `>>>>>>>` lines are in the working directory copy but aren't
in either side of the merge. This makes sense because the merge tool stuck them in there to show
the conflicts, but we're expected to remove them.

If we resolve the conflicts and run `git diff` again, we see the same thing, but it's a little more useful.


[source,console]
----
$ vim hello.rb
$ git diff
diff --cc hello.rb
index 0399cd5,59727f0..0000000
--- a/hello.rb
+++ b/hello.rb
@@@ -1,7 -1,7 +1,7 @@@
  #! /usr/bin/env ruby

  def hello
-   puts 'hola world'
 -  puts 'hello mundo'
++  puts 'hola mundo'
  end

  hello()
----

This shows that `hola world` was in our side but not in the working copy, that `hello mundo` was
in their side but not in the working copy, and finally that `hola mundo` wasn't in either side
but is now in the working directory copy. This can be useful to review before committing the resolution.

You also get this from `git log` for any merge to see how something was resolved after the fact.
Git outputs this format if you run `git show` on a merge commit, or if you add a `--cc` flag
to `git log -p` (which by default only shows patches for non-merge commits).

[source,console]
----
$ git log --cc -p -1
commit 14f41939956d80b9e17bb8721354c33f8d5b5a79
Merge: f1270f7 e3eb223
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri Sep 19 18:14:49 2014 +0200

    Merge branch 'mundo'

    Conflicts:
        hello.rb

diff --cc hello.rb
index 0399cd5,59727f0..e1d0799
--- a/hello.rb
+++ b/hello.rb
@@@ -1,7 -1,7 +1,7 @@@
  #! /usr/bin/env ruby

  def hello
-   puts 'hola world'
 -  puts 'hello mundo'
++  puts 'hola mundo'
  end

  hello()
----

[[_undoing_merges]]
==== Undoing Merges

Now that you know how to create a merge commit, what happens if you make a mistake making one?
One of the great things about working with Git is that it's OK to make mistakes,
because it's possible (and in many cases easy) to fix them.

Merge commits are no different.
Let's say you start working on a topic branch and accidentally merge it into `master`.
Now your commit history looks like

.Accidental merge commit
image::images/undomerge-start.png[Accidental merge commit]

There are two ways to approach this problem, depending on your desired outcome.

===== Fix the references

If the unwanted merge commit only exists in your local repository, the easiest and best
solution is to move the branches to point where you want them to.
In most cases, if you follow the errant `git merge` with `git reset --hard HEAD~`,
this resets the branch pointers so they look like

.History after `git reset --hard HEAD~`
image::images/undomerge-reset.png[History after `git reset --hard HEAD~`]

We covered `git reset` back in <<ch07-git-tools#_git_reset>>, so it shouldn't be too hard to figure out what's going on here.
Here's a quick refresher.

`git reset --hard` performs these three steps.

. Move the branch `HEAD` points to.
  In this case, move `master` to where it was before the merge commit (`C6`).
. Make the index look like `HEAD`.
. Make the working directory look like what's in the index.

The downside of this approach is that it's rewriting history, which can be problematic with a shared repository.

Check out <<ch03-git-branching#_rebase_peril>> for more on what can happen.
The short version is that if other people's repositories have the commits you're rewriting,
you should probably avoid `git reset`.
This approach also doesn't work if any other commits have been created since the merge,
which you'd effectively lose.

[[_reverse_commit]]
===== Reverse the commit

If moving the branch pointers around isn't going to work, Git lets you make a new commit which
undoes all the changes in an existing commit.
Git calls this operation a `revert`, and in this particular scenario, you invoke it by running

[source,console]
----
$ git revert -m 1 HEAD
[master b1d8379] Revert "Merge branch 'topic'"
----

The `-m 1` flag indicates which parent is the `mainline` and should be kept.
When you invoke a merge into `HEAD` (`git merge topic`), the new commit has two parents -- the first
one is `HEAD` (`C6`), and the second is the tip of the branch being merged (`C4`).
In this case, we want to undo all the changes introduced by merging parent #2 (`C4`),
while keeping all the content from parent #1 (`C6`).

The history with the revert commit looks like

.History after `git revert -m 1`
image::images/undomerge-revert.png[History after `git revert -m 1`]

The new commit `^M` has exactly the same contents as `C6`, so starting from here is as if the merge never happened, except that the now-unmerged commits are still there.
Git gets confused if you try to merge `topic` into `master` again.

[source,console]
----
$ git merge topic
Already up-to-date.
----

There's nothing in `topic` that isn't already reachable from `master`.
What's worse, if you add work to `topic` and merge again, Git only brings in the changes made _since_ the reverted merge.

.History with a bad merge
image::images/undomerge-revert2.png[History with a bad merge]

The best way around this is to un-revert the original merge, since now you want to bring in the changes that were reverted, *then* create a new merge commit.

[source,console]
----
$ git revert ^M
[master 09f0126] Revert "Revert "Merge branch 'topic'""
$ git merge topic
----

.History after re-merging a reverted merge
image::images/undomerge-revert3.png[History after re-merging a reverted merge]

In this example, `M` and `^M` cancel out.
`^^M` effectively merges in the changes from `C3` and `C4`, and `C8` merges in the changes from `C7`, so now `topic` is fully merged.

==== Other Types of Merges

So far we've covered the normal merge of two branches, normally handled by what's called
the `recursive` strategy of merging. There are also other ways to merge branches. Let's cover a few of them.

===== Our or Theirs Preference

First of all, there's another useful thing we can do with the normal `recursive` strategy.
We've already seen the `--ignore-all-space` and `--ignore-space-change` flags but we can also tell
Git to favor one side or the other when it sees a conflict.

By default, when Git sees a conflict when merging two branches, it adds merge conflict markers into your
file and marks it as conflicted for you to resolve. If you'd prefer for Git to simply choose a
specific side and ignore the other side instead of letting you manually resolve the conflict,
pass `git merge` either  `-Xours` or `-Xtheirs`.

In this case, Git doesn't add conflict markers. Any differences that are mergeable, it merges.
If any differences conflict, it simply completely chooses the side you specify, including binary files.

If we go back to the `hello world` example we were using before, we see that merging our branch
causes conflicts.

[source,console]
----
$ git merge mundo
Auto-merging hello.rb
CONFLICT (content): Merge conflict in hello.rb
Resolved 'hello.rb' using previous resolution.
Automatic merge failed; fix conflicts and then commit the result.
----

However if we run `git merge` with `-Xours` or `-Xtheirs` it doesn't.

[source,console]
----
$ git merge -Xours mundo
Auto-merging hello.rb
Merge made by the 'recursive' strategy.
 hello.rb | 2 +-
 test.sh  | 2 ++
 2 files changed, 3 insertions(+), 1 deletion(-)
 create mode 100644 test.sh
----

In that case, instead of putting conflict markers in the file with `hello mundo` on one side
and `hola world` on the other, it simply picks `hola world`. However, all the other non-conflicting
changes on that branch are successfully merged in.

This option can also be passed to `git merge-file`, as we saw earlier, by running something
like `git merge-file --ours` for individual file merges.

To do something like this but not have Git even try to merge changes from the other side,
there's a more draconian option, which is the `ours` merge _strategy_. This is different from
the `ours` recursive merge _option_.

This basically does a fake merge. It records a new merge commit with both branches as parents,
but it doesn't even look at the branch you're merging. It simply records the exact code in your
current branch as the result of the merge.

[source,console]
----
$ git merge -s ours mundo
Merge made by the 'ours' strategy.
$ git diff HEAD HEAD~
$
----

You can see that there is no difference between the branch we were on and the result of the merge.

This can often be useful to basically trick Git into thinking that a branch is already merged
when doing a merge later on. For example, say you branched off `release` and you've done some work
on it that you want to merge back into `master` at some point. In the meantime, a bugfix
on `master` needs to be backported into `release`. You can merge the bugfix branch into `release` and
also run `git merge -s ours` the same branch into `master` (even though the fix is already there)
so when you later merge `release` again, there are no conflicts from the bugfix.

include::subtree-merges.asc[]
