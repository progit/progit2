=== Debugging with Git

Git also provides tools to help fix bugs in your projects.
Because Git is designed to work with nearly any type of project, these tools are generic,
but they can often help hunt for a bug or culprit when things go wrong.

[[_file_annotation]]
==== File Annotation

If you track down a bug in your code and want to know when it was introduced and why, file annotation is often your best tool.
It shows the commit that was the last to modify each line of any file.
So if you see that a method in your code is buggy, you can annotate the file by running `git blame`
to determine which commit was responsible for the introduction of that line.

The following example shows the output of `git blame` to determine which commit and committer was
responsible for lines in the Linux kernel `Makefile`. It uses the `-L` flag to restrict the output
to lines 69 through 82 of that file.

[source,console]
----
$ git blame -L 69,82 Makefile
b8b0618cf6fab (Cheng Renquan  2009-05-26 16:03:07 +0800 69) ifeq ("$(origin V)", "command line")
b8b0618cf6fab (Cheng Renquan  2009-05-26 16:03:07 +0800 70)   KBUILD_VERBOSE = $(V)
^1da177e4c3f4 (Linus Torvalds 2005-04-16 15:20:36 -0700 71) endif
^1da177e4c3f4 (Linus Torvalds 2005-04-16 15:20:36 -0700 72) ifndef KBUILD_VERBOSE
^1da177e4c3f4 (Linus Torvalds 2005-04-16 15:20:36 -0700 73)   KBUILD_VERBOSE = 0
^1da177e4c3f4 (Linus Torvalds 2005-04-16 15:20:36 -0700 74) endif
^1da177e4c3f4 (Linus Torvalds 2005-04-16 15:20:36 -0700 75)
066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 76) ifeq ($(KBUILD_VERBOSE),1)
066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 77)   quiet =
066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 78)   Q =
066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 79) else
066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 80)   quiet=quiet_
066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 81)   Q = @
066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 82) endif
----

Notice that the first field is the partial SHA-1 hash of the commit that last modified that line.
The next two fields are values extracted from that commit -- the author's name and the date
of that commit -- so you can easily see who modified that line and when.
After that come the line number and the content of the line.
Also note the lines starting with `^`. These are the lines that were in this file's original commit.
This is when this file was first added to this project, and those lines have been unchanged since.
This is a tad confusing, because now you've seen at least three different ways that Git
uses `^` to modify a commit SHA-1 hash.

Another cool thing about Git is that it doesn't track file renames explicitly.
It records snapshots and then tries to figure out what was renamed, after the fact.
Git can recognize all sorts of code movement.
If you pass `-C` to `git blame`, Git analyzes the file you're annotating and tries to figure
out where snippets of code it contains originally came from if they were copied from elsewhere.
For example, say you're refactoring a file named `GITServerHandler.m` into multiple files,
one of which is `GITPackUpload.m`. By running `git blame -C GITPackUpload.m`,
you can see the origin of sections of the code.

[source,console]
----
$ git blame -C -L 141,153 GITPackUpload.m
f344f58d GITServerHandler.m (Scott 2009-01-04 141)
f344f58d GITServerHandler.m (Scott 2009-01-04 142) - (void) gatherObjectShasFromC
f344f58d GITServerHandler.m (Scott 2009-01-04 143) {
70befddd GITServerHandler.m (Scott 2009-03-22 144)         //NSLog(@"GATHER COMMI
ad11ac80 GITPackUpload.m    (Scott 2009-03-24 145)
ad11ac80 GITPackUpload.m    (Scott 2009-03-24 146)         NSString *parentSha;
ad11ac80 GITPackUpload.m    (Scott 2009-03-24 147)         GITCommit *commit = [g
ad11ac80 GITPackUpload.m    (Scott 2009-03-24 148)
ad11ac80 GITPackUpload.m    (Scott 2009-03-24 149)         //NSLog(@"GATHER COMMI
ad11ac80 GITPackUpload.m    (Scott 2009-03-24 150)
56ef2caf GITServerHandler.m (Scott 2009-01-05 151)         if(commit) {
56ef2caf GITServerHandler.m (Scott 2009-01-05 152)                 [refDict setOb
56ef2caf GITServerHandler.m (Scott 2009-01-05 153)
----

This is really useful.
Normally, your original commit is when you copied the code into Git, because that's the first
time you touched those lines in this file. Git shows the original commit where you wrote those lines.

[[_binary_search]]
==== Binary Search

Annotating a file helps if you know where the issue is to begin with.
If you don't know what's breaking, and there have been dozens or hundreds of commits since
the last time you know the code worked, turn to `git bisect` for help.
`git bisect` does a binary search through your commit history to help identify which commit
introduced the bug as quickly as possible.

Let's say you just pushed out a release of your code to a production environment,
you're getting bug reports about something that wasn't happening in your development environment,
and you can't imagine why the code is doing that. You go back to your code, and it turns out
you can reproduce the bug, but you can't figure out what's going wrong.
You can bisect the code to find out.
First run `git bisect start` to get things going, and then run `git bisect bad` to tell Git
that the commit you're on is broken.
Then, tell `git bisect` when the last known good state was by running `git bisect good [good_commit]`.

[source,console]
----
$ git bisect start
$ git bisect bad
$ git bisect good v1.0
Bisecting: 6 revisions left to test after this
[ecb6e1bc347ccecc5f9350d878ce677feb13d3b2] Error handling on repo
----

Git figured out that about 12 commits exist between the commit you marked as the last good commit (v1.0)
and the current bad version, and it checked out the commit roughly in the middle for you.
At this point, you can run your test to see if the bug exists in this commit.
If it does, then it was introduced sometime before this middle commit. If it doesn't,
then the problem was introduced sometime after the middle commit.
It turns out there's no bug here, and you notify Git by running `git bisect good` and continue your journey.

[source,console]
----
$ git bisect good
Bisecting: 3 revisions left to test after this
[b047b02ea83310a70fd603dc8cd7a6cd13d15c04] Secure this thing
----

Now you're on another commit, halfway between the one you just tested and your bad commit.
You run your test again and find that this commit is broken, so you notify Git by running `git bisect bad`.

[source,console]
----
$ git bisect bad
Bisecting: 1 revisions left to test after this
[f71ce38690acf49c1f3c9bea38e09d82a5ce6014] Drop exceptions table
----

This commit is fine, and now Git has all the information it needs to determine the commit in
which the bug was introduced. It shows the hash of the first bad commit and shows
some of the commit information and which files were modified in that commit so you can figure
out what happened that may have introduced this bug.

[source,console]
----
$ git bisect good
b047b02ea83310a70fd603dc8cd7a6cd13d15c04 is first bad commit
commit b047b02ea83310a70fd603dc8cd7a6cd13d15c04
Author: PJ Hyett <pjhyett@example.com>
Date:   Tue Jan 27 14:48:32 2009 -0800

    Secure this thing

:040000 040000 40ee3e7821b895e52c1695092db9bdc4c61d1730
f24d3c6ebcfc639b1a3814550e62d60b8e68a8e4 M  config
----

When you're finished, run `git bisect reset` to reset `HEAD` to where it was before you started
otherwise you end up in a weird state.

[source,console]
----
$ git bisect reset
----

This is a powerful tool that can check hundreds of commits for a bug in minutes.
In fact, if you have a script that exits with a 0 value if the project is good or non-0 if
the project is bad, you can fully automate the bisect process.
First, you again tell Git the scope of the bisect by providing the known bad and good commits.
You do this by listing them by running `git bisect start`, listing the known bad commit first
and the known good commit second.

[source,console]
----
$ git bisect start HEAD v1.0
$ git bisect run test-error.sh
----

Doing so automatically runs `test-error.sh` on each checked-out commit until Git finds the first broken commit.
