[[_rewriting_history]]
=== Rewriting History

When working with Git, you may want to revise your commit history for some reason.
One of the great things about Git is that it allows making decisions at the last possible moment.
You can decide what files go into a commit by what you put into the staging area,
you can easily change what you're working on with `git stash`, and you can rewrite
commits that already happened so they look like they happened in a different way.
This can involve changing the order of the commits, changing messages or modifying files in a commit,
squashing together or splitting apart commits, or removing commits entirely -- all before you share your work.

In this section, we cover how to make your commit history look the way you want.

[NOTE]
.Don't push your work until you're happy with it
====
One of the cardinal rules of Git is that since so much work is in a local repository,
you can easily choose to rewrite your history _locally_.
However, once you push your work, things change. You should consider
anything you've pushed as final unless you have good reason to change it.
In short, you should avoid pushing your work until you're happy with it and ready to share
it with the rest of the world.
====

[[_git_amend]]
==== Changing the Last Commit

Changing your last commit is probably the most common rewriting of history that you do.
You often want to do two basic things to your last commit: modify the commit message,
or change what you just committed.

It's simple to only modify your last commit message.

[source,console]
----
$ git commit --amend
----

That starts your text editor, with your last commit message already in the editor's buffer,
ready for you to modify. When you save and exit the editor, Git creates a commit containing
the new message. This is your new last commit.

If you've committed and then want to change what you saved by adding or changing files,
the process works basically the same. Stage the changes you want to commit by running `git add` on
the files containing the changes, or `git rm` a tracked file. Then running `git commit --amend`
changes what's in your staging area and adds it to the next commit.

Be careful with this technique because both of these change the SHA-1 hash of the commit.
It's like a very small rebase -- don't amend your last commit if you've already pushed it.

[TIP]
.An amended commit may (or may not) need an amended commit message
====
When you amend a commit, you can change both the commit message and the content of the commit.
If you amend the content of the commit substantially, you should probably update the commit message
to reflect that amended content.

On the other hand, if your amendments are suitably trivial (fixing a silly typo or adding a file
you simply forgot to stage) such that the earlier commit message is still relevant, simply make the changes,
stage them, and avoid an unnecessary editor session entirely by running

[source,console]
----
$ git commit --amend --no-edit
----

====

[[_changing_multiple]]
==== Changing Multiple Commit Messages

To modify a commit that's farther back in history, you must use more complex tools.
Git doesn't have a modify-history tool, but you can use rebasing as a way of changing a series
of commits instead of moving them to another branch. With the interactive rebase tool,
you can then stop after each commit you want to modify to change the message, add files,
or do whatever you wish. You rebase interactively by running `git rebase -i`.
You must indicate how far back you want to rewrite commits by specifying the commit to start with.

For example, to change any or all of the last three commit messages,
supply as an argument to `git rebase -i` the parent of the last commit you want to edit,
which is `HEAD~2^` or `HEAD~3`. It may be easier to remember `HEAD~3` because you're trying
to edit the last three commits. But keep in mind that you're actually designating a point four
commits ago, which is the parent of the last commit you want to edit.

[source,console]
----
$ git rebase -i HEAD~3
----

Remember again that this is a rebasing command -- every commit included in the range `HEAD~3..HEAD` is
rewritten, whether you change the message or not. Don't include any commit you've already pushed
to a central server. Doing so confuses other developers.

Running this puts a list of commits in your text editor buffer that looks something like

[source,console]
----
pick f7f3f6d Change my name a bit
pick 310154e Update README formatting and add blame
pick a5f4a0d Add cat-file

# Rebase 710f0f8..a5f4a0d onto 710f0f8
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup <commit> = like "squash", but discard this commit's log message
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
# .       create a merge commit using the original merge commit's
# .       message (or the oneline, if no original merge commit was
# .       specified). Use -c <commit> to reword the commit message.
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
----

It's important to note that these commits are listed in an order opposite of what you normally
see when running `git log`. If you run `git log`, you see something like

[source,console]
----
$ git log --pretty=format:"%h %s" HEAD~3..HEAD
a5f4a0d Add cat-file
310154e Update README formatting and add blame
f7f3f6d Change my name a bit
----

Notice the reversed order.
The interactive rebase shows a script that it's going to run.
It starts at the commit you specify on the command line (`HEAD~3`) and replays the changes introduced
in each of these commits from top to bottom. It lists the oldest at the top, rather than the newest,
because that's the first one it replays.

You need to edit the script so that it stops at the commit you want to edit.
To do so, change the word `pick' to the word `edit' for each of the commits you want the script to stop after.
For example, to modify only the third commit message, change the script to look like

[source,console]
----
edit f7f3f6d Change my name a bit
pick 310154e Update README formatting and add blame
pick a5f4a0d Add cat-file
----

When you save and exit the editor, Git rewinds back to the last commit in that list and drops you to the command line with the following message:

[source,console]
----
$ git rebase -i HEAD~3
Stopped at f7f3f6d... Change my name a bit
You can amend the commit now, with

       git commit --amend

Once you're satisfied with your changes, run

       git rebase --continue
----

These instructions tell you exactly what to do.
Enter

[source,console]
----
$ git commit --amend
----

Change the commit message, and exit the editor.
Then, run

[source,console]
----
$ git rebase --continue
----

This command applies the other two commits automatically, and then you're done.
If you change `pick` to `edit` on more lines, you can repeat these steps for each commit you choose to edit.
Git stops each time, lets you amend the commit, and continues when you're finished.

==== Reordering Commits

You can also use interactive rebases to reorder or remove commits entirely.
To remove the `added cat-file` commit and change the order in which the other two commits were introduced,
change the rebase script from this

[source,console]
----
pick f7f3f6d Change my name a bit
pick 310154e Update README formatting and add blame
pick a5f4a0d Add cat-file
----

to this:

[source,console]
----
pick 310154e Update README formatting and add blame
pick f7f3f6d Change my name a bit
----

When you save and exit the editor, Git rewinds your branch to the parent of these commits,
applies `310154e` and `f7f3f6d`, and then stops.
You effectively change the order of those commits and remove the `added cat-file` commit completely.

[[_squashing]]
==== Squashing Commits

It's also possible to take a series of commits and squash them into a single commit with
the interactive rebasing tool. The script puts helpful instructions in the rebase message.

[source,console]
----
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup <commit> = like "squash", but discard this commit's log message
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
# .       create a merge commit using the original merge commit's
# .       message (or the oneline, if no original merge commit was
# .       specified). Use -c <commit> to reword the commit message.
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
----

If, instead of `pick` or `edit`, you specify `squash`, Git applies both that change and the change
directly before it, and merges the commit messages together.
So, to make a single commit from these three commits, make the script look like

[source,console]
----
pick f7f3f6d Change my name a bit
squash 310154e Update README formatting and add blame
squash a5f4a0d Add cat-file
----

When you save and exit the editor, Git applies all three changes and then puts you back into the editor to merge the three commit messages.

[source,console]
----
# This is a combination of 3 commits.
# The first commit's message is:
Change my name a bit

# This is the 2nd commit message:

Update README formatting and add blame

# This is the 3rd commit message:

Add cat-file
----

When you save that, you have a single commit that introduces the changes of all three previous commits.

==== Splitting a Commit

Splitting a commit undoes a commit and then partially stages and commits as many times as commits you want to end up with.
For example, suppose you want to split the middle commit of your three commits.
Instead of `Update README formatting and add blame`, you want to split it into two commits: `Update README formatting` for the first, and `Add blame` for the second.
You can do that in the `git rebase -i` script by changing the instruction on the commit you want to split to "`edit`".

[source,console]
----
pick f7f3f6d Change my name a bit
edit 310154e Update README formatting and add blame
pick a5f4a0d Add cat-file
----

Then, when the script drops you to the command line, reset that commit, take the changes that
have been reset, and create multiple commits out of them. When you save and exit the editor,
Git rewinds to the parent of the first commit in your list, applies the first commit (`f7f3f6d`),
applies the second (`310154e`), and drops you to the command line. There, you can do a mixed reset
of that commit with `git reset HEAD^`, which effectively undoes that commit and leaves
the modified files unstaged. Now you can stage and commit files until you have several commits,
and run `git rebase --continue` when you're done.

[source,console]
----
$ git reset HEAD^
$ git add README
$ git commit -m 'Update README formatting'
$ git add lib/simplegit.rb
$ git commit -m 'Add blame'
$ git rebase --continue
----

After Git applies the last commit (`a5f4a0d`) in the script, your history looks like

[source,console]
----
$ git log -4 --pretty=format:"%h %s"
1c002dd Add cat-file
9b29157 Add blame
35cfb2b Update README formatting
f7f3f6d Change my name a bit
----

Once again, this changes the hashes of all the commits in your list,
so make sure no commit shows up in that list that you've already pushed to a shared repository.

==== Deleting a commit

You can delete a commit using a `git rebase -i` script.
In the list of commits, put the word `drop` before the commit you want to delete (or just delete that line from the script).

[source,console]
----
pick 461cb2a This commit is OK
drop 5aecc10 This commit is broken
----

Because of the way Git builds commit objects, deleting or altering a commit causes all the commits that follow it to be rewritten.
The further back in your repository history you go, the more commits will need to be recreated.
This can cause lots of merge conflicts if many commits later in the sequence depend on the one you just deleted.

If you get partway through a rebase like this and decide it's not a good idea, you can always stop.
Run `git rebase --abort`, and your repository is returned to the state it was in before you started the rebase.

If you finish a rebase and decide it's not what you want, run `git reflog` to recover an earlier version of your branch.
See <<ch10-git-internals#_data_recovery>> for more information on the `reflog` command.

[NOTE]
====
Drew DeVault made a practical hands-on guide with exercises to learn how to use `git rebase`.
You can find it at: https://git-rebase.io/[^]
====

==== The Nuclear Option: filter-branch

There's another history-rewriting option to rewrite a larger number of commits in some scriptable way -- for
instance, changing your email address globally or removing a file from every commit.
The command is `git filter-branch`, and it can rewrite huge swaths of your history,
so you probably shouldn't use it unless your project isn't yet public and other people haven't
based work off the commits you're about to rewrite. However, it can be very useful.
We describe a few of its common uses so you can get an idea of some of the things it's capable of.

[CAUTION]
====
`git filter-branch` has many pitfalls, and is no longer the recommended way to rewrite history.
Instead, consider running `git-filter-repo`, which is a Python script that does a better job.
Its documentation and source code can be found at https://github.com/newren/git-filter-repo[^].
====

[[_removing_file_every_commit]]
===== Removing a File from Every Commit

This is fairly common.
Someone accidentally commits a huge binary file with a thoughtless `git add .`, and you want to
remove the file in all commits. Perhaps you accidentally committed a file that contains a password,
and you want to make your project open source. `git filter-branch` is how to scrub your entire history.
To remove a file named `passwords.txt` from your entire history, use the `--tree-filter` flag
to `git filter-branch`.

[source,console]
----
$ git filter-branch --tree-filter 'rm -f passwords.txt' HEAD
Rewrite 6b9b3cf04e7c5686a9cb838c3f36a8cb6a0fc2bd (21/21)
Ref 'refs/heads/master' was rewritten
----

The `--tree-filter` flag runs the specified command after each checkout of the project and
then recommits the results. In this case, you remove a file called `passwords.txt` from every snapshot,
whether it exists or not. Or, to remove all accidentally committed editor backup files,
run something like `git filter-branch --tree-filter 'rm -f *~' HEAD`.

You're able to watch Git rewriting trees and commits, and then move the branch pointer at the end.
It's generally a good idea to do this in a testing branch and then hard-reset your `master` after
you've determined the outcome is what you really want.
To run `git filter-branch` on all your branches, add the `--all` flag.

===== Making a Subdirectory the New Root

Suppose you've done an import from another source control system and have subdirectories that make no sense (`trunk`, `tags`, and so on).
To make the `trunk` subdirectory be the new project root for every commit, run `git filter-branch`.

[source,console]
----
$ git filter-branch --subdirectory-filter trunk HEAD
Rewrite 856f0bf61e41a27326cdae8f09fe708d679f596f (12/12)
Ref 'refs/heads/master' was rewritten
----

Now your new project root is what was in the `trunk` subdirectory.
Git also automatically removes commits that didn't affect the subdirectory.

===== Changing Email Addresses Globally

Another common case is that you forgot to run `git config` to set your name and email address before you started working, or perhaps you want to open-source a project at work and change all your work email addresses to your personal address.
In any case, you can change email addresses in multiple commits in a batch with `filter-branch` as well.
Be careful to change only the email addresses that are yours, so use the `--commit-filter` flag.


[source,console]
----
$ git filter-branch --commit-filter '
        if [ "$GIT_AUTHOR_EMAIL" = "schacon@localhost" ];
        then
                GIT_AUTHOR_NAME="Scott Chacon";
                GIT_AUTHOR_EMAIL="schacon@example.com";
                git commit-tree "$@";
        else
                git commit-tree "$@";
        fi' HEAD
----

This rewrites every commit to contain your new email address.
Because commits contain the SHA-1 hashes of their parents, this command changes every commit SHA-1
hash in your branch, not just those that have the matching email address.
