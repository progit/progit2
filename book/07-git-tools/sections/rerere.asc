[[ref_rerere]]
=== Rerere

`git rerere` is a bit of a hidden feature. The name stands for `reuse recorded resolution` and,
as the name implies, it allows Git to remember how you resolved a hunk conflict before so that the next
time Git sees the same conflict, Git can automatically resolve it.
There are a number of scenarios in which this might be really handy. One of the examples that's
mentioned in the documentation is to make sure a long lived topic branch merges cleanly but you don't
want to have a bunch of intermediate merge commits. With `rerere` enabled you can merge occasionally,
resolve the conflicts, then back out the merge. If you do this continuously, the final merge
should then be easy because `git rerere` can do everything for you automatically.

This same tactic can be used to keep a branch rebased so you don't have to deal with the same
rebasing conflicts each time. Or if you take a branch that you merged that required a bunch of
conflicts to be fixed and then decide to rebase it instead -- you likely don't have to resolve
all the same conflicts again. Another situation is when you occasionally merge a bunch of evolving
topic branches into a test branch, as the Git project itself often does. If the tests fail, you can
rewind the merges and re-do them without the topic branch that made the tests fail and without having
to re-resolve the conflicts again.

To enable `git rerere`, simply run

[source,console]
----
$ git config --global rerere.enabled true
----

You can also turn it on by creating the `.git/rr-cache` directory in a specific repository, but modifying the config setting is clearer and can be done globally.

Now let's see a simple example, similar to our previous one.
Let's say we have a file named `hello.rb` that looks like

[source,ruby]
----
#! /usr/bin/env ruby

def hello
  puts 'hello world'
end
----

In one branch we change `hello` to `hola`, then in another branch we change `world` to `mundo`,
just like before.

.Two branches changing the same part of the same file differently
image::images/rerere1.png[Two branches changing the same part of the same file differently]

When we merge the two branches, we get a merge conflict.

[source,console]
----
$ git merge i18n-world
Auto-merging hello.rb
CONFLICT (content): Merge conflict in hello.rb
Recorded preimage for 'hello.rb'
Automatic merge failed; fix conflicts and then commit the result.
----

You should notice the line `Recorded preimage for FILE`. Otherwise the output should look exactly
like a normal merge conflict. At this point, `git rerere` can tell us a few things. Normally,
you'd run `git status` now to see what conflicted.

[source,console]
----
$ git status
# On branch master
# Unmerged paths:
#   (use "git reset HEAD <file>..." to unstage)
#   (use "git add <file>..." to mark resolution)
#
#	both modified:      hello.rb
#
----

However, `git rerere status` also tells you the file for which it recorded the pre-merge state.

[source,console]
----
$ git rerere status
hello.rb
----

`git rerere diff` shows the current state of the resolution -- what you started with to resolve and what you've resolved it to.

[source,console]
----
$ git rerere diff
--- a/hello.rb
+++ b/hello.rb
@@ -1,11 +1,11 @@
 #! /usr/bin/env ruby

 def hello
-<<<<<<<
-  puts 'hello mundo'
-=======
+<<<<<<< HEAD
   puts 'hola world'
->>>>>>>
+=======
+  puts 'hello mundo'
+>>>>>>> i18n-world
 end
----

Also (this isn't really related to `git rerere`), run `git ls-files -u` to see the conflicted
files and the before, left, and right versions.

[source,console]
----
$ git ls-files -u
100644 39804c942a9c1f2c03dc7c5ebcd7f3e3a6b97519 1	hello.rb
100644 a440db6e8d1fd76ad438a49025a9ad9ce746f581 2	hello.rb
100644 54336ba847c3758ab604876419607e9443848474 3	hello.rb
----

Now resolve the conflict to just be `puts 'hola mundo'`,
and run `git rerere diff` again to see what Git remembers.

[source,console]
----
$ git rerere diff
--- a/hello.rb
+++ b/hello.rb
@@ -1,11 +1,7 @@
 #! /usr/bin/env ruby

 def hello
-<<<<<<<
-  puts 'hello mundo'
-=======
-  puts 'hola world'
->>>>>>>
+  puts 'hola mundo'
 end
----

That basically says when Git sees a hunk conflict in `hello.rb` that has `hello mundo` on one side
and `hola world` on the other, Git resolves the conflict to `hola mundo`.

Now we can mark it as resolved and commit it.

[source,console]
----
$ git add hello.rb
$ git commit
Recorded resolution for 'hello.rb'.
[master 68e16e5] Merge branch 'i18n'
----

You can see that it "Recorded resolution for 'hello.rb'".

.Recorded resolution for hello.rb
image::images/rerere2.png[Recorded resolution for hello.rb]

Now, let's undo that merge and then rebase it on top of `master` instead.
Move our branch back by running `git reset`, as we saw in <<ch07-git-tools#_git_reset>>.

[source,console]
----
$ git reset --hard HEAD^
HEAD is now at ad63f15 i18n the hello
----

Our merge is undone.
Now let's rebase the topic branch.

[source,console]
----
$ git checkout i18n-world
Switched to branch 'i18n-world'

$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: i18n one word
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
Auto-merging hello.rb
CONFLICT (content): Merge conflict in hello.rb
Resolved 'hello.rb' using previous resolution.
Failed to merge in the changes.
Patch failed at 0001 i18n one word
----

We got the same merge conflict we expected, but take a look at the `Resolved 'hello.rb' using previous resolution`
line. If we look at the file, we see that it's already been resolved, and there are no merge conflict
markers in it.

[source,ruby]
----
#! /usr/bin/env ruby

def hello
  puts 'hola mundo'
end
----

Also, `git diff` shows how the conflict was automatically re-resolved.

[source,console]
----
$ git diff
diff --cc hello.rb
index a440db6,54336ba..0000000
--- a/hello.rb
+++ b/hello.rb
@@@ -1,7 -1,7 +1,7 @@@
  #! /usr/bin/env ruby

  def hello
-   puts 'hola world'
 -  puts 'hello mundo'
++  puts 'hola mundo'
  end
----

.Automatically resolved merge conflict using previous resolution
image::images/rerere3.png[Automatically resolved merge conflict using previous resolution]

You can also recreate the conflicted file state with `git checkout`:

[source,console]
----
$ git checkout --conflict=merge hello.rb
$ cat hello.rb
#! /usr/bin/env ruby

def hello
<<<<<<< ours
  puts 'hola world'
=======
  puts 'hello mundo'
>>>>>>> theirs
end
----

We saw an example of this in <<ch07-git-tools#_advanced_merging>>.
For now though, let's re-resolve it by just running `git rerere` again.

[source,console]
----
$ git rerere
Resolved 'hello.rb' using previous resolution.
$ cat hello.rb
#! /usr/bin/env ruby

def hello
  puts 'hola mundo'
end
----

We re-resolved the file automatically using the `git rerere` cached resolution.
You can now add and continue the rebase.

[source,console]
----
$ git add hello.rb
$ git rebase --continue
Applying: i18n one word
----

So, if you do a lot of re-merges, or want to keep a topic branch up to date with your `master` without
a ton of merges, or you rebase often, turn on `git rerere` to improve your life.
