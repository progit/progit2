[[_interactive_staging]]
=== Interactive Staging

Git comes with a couple of scripts that make some command-line tasks easier.
Here are a few interactive commands that help you easily craft your commits to include only
certain combinations and parts of files. These tools are very helpful if you modify a bunch of files
and then decide that those changes should be in several focused commits rather than one big messy commit.
This way, you can make sure your commits are logically separate and can be easily reviewed by
the developers you work with. If you run `git add` with the `-i` or `--interactive` flag,
Git goes into an interactive command mode, displaying something like

[source,console]
----
$ git add -i
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb

*** Commands ***
  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp
What now>
----

You see a much different view of your staging area -- basically the same information you get
from `git status` but more succinct and informative.
It lists the changes you've staged on the left and unstaged changes on the right.

After this comes a `Commands` section.
Here you can do a number of things, including staging files, unstaging files, staging parts of files,
adding untracked files, and seeing diffs of what's been staged.

==== Staging and Unstaging Files

If you enter `u` or `2` at the `What now>` prompt, the script prompts for the files to stage.

[source,console]
----
What now> u
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Update>>
----

To stage `TODO` and `index.html`, enter their numbers.

[source,console]
----
Update>> 1,2
           staged     unstaged path
* 1:    unchanged        +0/-1 TODO
* 2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Update>>
----

The `*` at the beginning of the line means the file is selected to be staged.
If you don't enter anything at the `Update>>` prompt and then type Enter, Git stages the files you selected.

[source,console]
----
Update>>
updated 2 paths

*** Commands ***
  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp
What now> s
           staged     unstaged path
  1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
----

Now you see that `TODO` and `index.html` are staged and `simplegit.rb` is still unstaged.
To unstage `TODO` at this point, enter `r` or `3` (for revert).

[source,console]
----
*** Commands ***
  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp
What now> r
           staged     unstaged path
  1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Revert>> 1
           staged     unstaged path
* 1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Revert>> [enter]
reverted one path
----

Looking at the status output again, you see that you've unstaged `TODO`.

[source,console]
----
*** Commands ***
  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp
What now> s
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
----

To see the diff of what you staged and what's in your repository, enter `d` or `6` (for diff).
It shows a list of your staged files, and you can select the ones for which you'd like to see the staged diff.
This is much like running `git diff --cached` on the command line.

[source,console]
----
*** Commands ***
  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp
What now> d
           staged     unstaged path
  1:        +1/-1      nothing index.html
Review diff>> 1
diff --git a/index.html b/index.html
index 4d07108..4335f49 100644
--- a/index.html
+++ b/index.html
@@ -16,7 +16,7 @@ Date Finder

 <p id="out">...</p>

-<div id="footer">contact : support@github.com</div>
+<div id="footer">contact : email.support@github.com</div>

 <script type="text/javascript">
----

With these basic commands, you can use the interactive add mode to manage your staging area a little more easily.

==== Staging Patches

It's also possible for Git to stage certain parts of files and not others.
For example, if you make two changes to `simplegit.rb` and want to stage one of them and not the other,
doing so is very easy. From the interactive prompt, enter `p` or `5` (for patch).
You're asked which files you'd like to partially stage. Then, for each section of the selected files,
you see hunks of the file diff and you're asked if you'd like to stage them, one by one.

[source,console]
----
diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index dd5ecc4..57399e0 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -22,7 +22,7 @@ class SimpleGit
   end

   def log(treeish = 'master')
-    command("git log -n 25 #{treeish}")
+    command("git log -n 30 #{treeish}")
   end

   def blame(path)
Stage this hunk [y,n,a,d,/,j,J,g,e,?]?
----

You have a lot of options at this point.
Typing `?` shows them.

[source,console]
----
Stage this hunk [y,n,a,d,/,j,J,g,e,?]? ?
y - stage this hunk
n - do not stage this hunk
a - stage this and all the remaining hunks in the file
d - do not stage this hunk nor any of the remaining hunks in the file
g - select a hunk to go to
/ - search for a hunk matching the given regex
j - leave this hunk undecided, see next undecided hunk
J - leave this hunk undecided, see next hunk
k - leave this hunk undecided, see previous undecided hunk
K - leave this hunk undecided, see previous hunk
s - split the current hunk into smaller hunks
e - manually edit the current hunk
? - print help
----

Generally, enter `y` or `n` to stage each hunk, but staging all hunks in certain files or skipping a
hunk decision until later can be helpful too. If you stage one part of the file and leave another part
unstaged, your status output looks like

[source,console]
----
What now> 1
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:        +1/-1      nothing index.html
  3:        +1/-1        +4/-0 lib/simplegit.rb
----

The status of `simplegit.rb` is interesting.
It shows that some lines are staged and some are unstaged.
You've partially staged this file.
At this point, you can exit the script and run `git commit` to commit the partially staged files.

You also don't need to be in interactive add mode to do partial-file staging.
You can start the same script by running `git add` with the `-p` or `--patch` flag.

Furthermore, you can use patch mode for partially resetting files with `git reset --patch`,
or for checking out parts of files with `git checkout --patch`.

We go into more details on each of these.
