[[_git_stashing]]
=== Stashing and Cleaning

Often, when you've been working on a project, things get messy and you want to switch branches to work
on something else. The problem is, you don't want to commit half-done work just so you can get back
to the messy state later. The answer to this conundrum is `git stash`.

Stashing takes the dirty state of your working directory -- that is, your modified tracked files
and staged changes -- and saves it on a stack that you can go back to at any time.

[NOTE]
.Migrating to `git stash push`
====
As of late October 2017, there has been extensive discussion on the Git mailing list that has resulted
in the `git stash save` command being deprecated in favor of the existing alternative `git stash push`.
The main reason for this is that `git stash push` introduces the option of stashing selected files,
something `git stash save` can't do.

`git stash save` is not going away any time soon, so don't worry about it suddenly disappearing.
But you might want to start using `git stash push` for the new features it supports.
====

==== Stashing Your Work

To demonstrate, go into your project and start working on a couple of files and stage a change.
If you run `git status`, you see the dirty state.

[source,console]
----
$ git status
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	modified:   index.html

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   lib/simplegit.rb
----

Now you want to switch branches, but you don't want to commit what you've been working on yet.
So, stash the changes. To push a new stash onto your stack, run `git stash` or `git stash save`.

[source,console]
----
$ git stash
Saved working directory and index state \
  "WIP on master: 049d078 Create index file"
HEAD is now at 049d078 Create index file
(To restore them type "git stash apply")
----

Your working directory is clean.

[source,console]
----
$ git status
# On branch master
nothing to commit, working directory clean
----

At this point, you can easily switch branches and do work elsewhere. Your changes are stored on your stack.
To see the stashes you've stored, run `git stash list`.

[source,console]
----
$ git stash list
stash@{0}: WIP on master: 049d078 Create index file
stash@{1}: WIP on master: c264051 Revert "Add file_size"
stash@{2}: WIP on master: 21d80a5 Add number to log
----

In this case, you already saved two stashes, so you have access to three different stashed states.
You can reapply the one you just stashed by running `git stash apply`, as shown in the help
output of the original stash command. To apply one of the older stashes, specify it by naming it
like this: `git stash apply stash@{2}`. If you don't specify a stash, Git assumes you mean the
most recent stash.

[source,console]
----
$ git stash apply
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   index.html
	modified:   lib/simplegit.rb

no changes added to commit (use "git add" and/or "git commit -a")
----

You see that Git re-modifies the files you reverted when you saved the stash.
In this case, you had a clean working directory when you tried to apply the stash,
and you tried to apply it on the same branch you saved it from. But having a clean working
directory and applying it on the same branch aren't necessary to successfully apply a stash.
You can save a stash from one branch, switch to another branch, and try to apply the changes.
You can also have modified and uncommitted files in your working directory when you apply a stash.
Git shows merge conflicts if anything no longer applies cleanly.

The changes to your files are reapplied, but the file you staged before wasn't restaged.
To do that, you must run `git stash apply` with the `--index` flag to try to reapply the staged changes.
This gets you back to your original state.

[source,console]
----
$ git stash apply --index
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	modified:   index.html

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   lib/simplegit.rb
----

The apply option only tries to apply the stashed work. Even if the reapply is successful,
the stashed work remains on your stack. To remove it, run `git stash drop` with the
name of the stash to remove.

[source,console]
----
$ git stash list
stash@{0}: WIP on master: 049d078 Create index file
stash@{1}: WIP on master: c264051 Revert "Add file_size"
stash@{2}: WIP on master: 21d80a5 Add number to log
$ git stash drop stash@{0}
Dropped stash@{0} (364e91f3f268f0900bc3ee613f9f733e82aaed43)
----

You can also run `git stash pop` to apply the stash and then immediately remove it from your stack.

==== Creative Stashing

There are a few stash variants that can also be helpful. One flag to `git stash` that's
quite popular is `--keep-index`. This tells Git to not stash anything that you've already staged.

This can be really helpful if you've made a number of changes but only want to commit some of them
and then come back to the rest of the changes later.

[source,console]
----
$ git status -s
M  index.html
 M lib/simplegit.rb

$ git stash --keep-index
Saved working directory and index state WIP on master: 1b65b17 added the index file
HEAD is now at 1b65b17 added the index file

$ git status -s
M  index.html
----

Another common way to use the stash is to stash both tracked and untracked files.
By default, `git stash` only stores files that are already in the index.
If you specify `--include-untracked` or `-u`, Git also stashes any untracked files.
However, including untracked files in the stash still doesn't include explicitly _ignored_ files.
To also include ignored files, use `--all` (or just `-a`).

[source,console]
----
$ git status -s
M  index.html
 M lib/simplegit.rb
?? new-file.txt

$ git stash -u
Saved working directory and index state WIP on master: 1b65b17 added the index file
HEAD is now at 1b65b17 added the index file

$ git status -s
$
----

Finally, if you specify the `--patch` flag, Git doesn't stash everything that's modified but instead
prompts for you to specify which changes you'd like to stash and which you'd like to keep in your
working directory.

[source,console]
----
$ git stash --patch
diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index 66d332e..8bb5674 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -16,6 +16,10 @@ class SimpleGit
         return `#{git_cmd} 2>&1`.chomp
       end
     end
+
+    def show(treeish = 'master')
+      command("git show #{treeish}")
+    end

 end
 test
Stash this hunk [y,n,q,a,d,/,e,?]? y

Saved working directory and index state WIP on master: 1b65b17 added the index file
----

==== Creating a Branch from a Stash

If you stash some work, leave it for a while, and continue on the branch from which
you stashed the work, you may have a problem reapplying the work. If reapplying tries to modify a
file that you've since modified, you get a merge conflict which you have to resolve.
An easier way to test the stashed changes again is to run `git stash branch <newbranchname>`,
which creates a new branch with the given branch name, checks out the commit you were on
when you stashed your work, reapplies your work there, and then drops the stash if it applies successfully.

[source,console]
----
$ git stash branch testchanges
M	index.html
M	lib/simplegit.rb
Switched to a new branch 'testchanges'
On branch testchanges
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	modified:   index.html

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   lib/simplegit.rb

Dropped refs/stash@{0} (29d385a81d163dfd45a452a2ce816487a6b8b014)
----

This is a nice shortcut to recover stashed work easily and then work on it in a new branch.

[[_git_clean]]
==== Cleaning your Working Directory

Finally, you may not want to stash some work in your working directory, but simply get rid of it.
`git clean` does this.

Some common reasons for cleaning your working directory might be to remove cruft that has been generated by merges or external tools,
or to remove build artifacts.

Be careful with this command, since it's designed to remove files from your working directory that aren't
tracked. If you change your mind, there's often no way to retrieve those files.
A safer option is to run `git stash --all` to remove everything but save it in a stash.

Assuming you do want to remove cruft or clean your working directory, do so by running `git clean`.
To remove all the untracked files in your working directory, run `git clean -f -d`, which removes
any files and also any subdirectories that become empty as a result.
The `-f` flag means "force", and is required if the Git configuration
variable `clean.requireForce` is not explicitly set to false.

If you ever want to see what running this command would do, run it with the `--dry-run` (or `-n`) flag,
which does a dry run and shows what _would_ have been removed.

[source,console]
----
$ git clean -d -n
Would remove test.o
Would remove tmp/
----

By default, `git clean` only removes untracked files that aren't ignored.
Any files that match a pattern in `.gitignore` or other ignore files aren't removed.
To remove those files too, such as `.o` files generated from a build so that you can do a fresh build,
add the `-x` flag to `git clean`.

[source,console]
----
$ git status -s
 M lib/simplegit.rb
?? build.TMP
?? tmp/

$ git clean -n -d
Would remove build.TMP
Would remove tmp/

$ git clean -n -d -x
Would remove build.TMP
Would remove test.o
Would remove tmp/
----

If you don't know what `git clean` is going to do, always run it with `-n` first to double
check before changing the `-n` to `-f` and doing it for real. The other way to check the result
is to run `git clean` with the `-i` or `interactive` flag.

[source,console]
----
$ git clean -x -i
Would remove the following items:
  build.TMP  test.o
*** Commands ***
    1: clean                2: filter by pattern    3: select by numbers    4: ask each             5: quit
    6: help
What now>
----

This way you can step through each file individually or specify patterns for deletion interactively.

[NOTE]
====
There's an unusual situation when you have to be extra forceful in telling Git to clean
your working directory. If you happen to be in a working directory in which you've copied or
cloned other Git repositories, even running `git clean -f -d` won't delete those directories.
In this case, add a second `-f` flag for emphasis.
====
