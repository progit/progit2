[[_git_config]]
=== Git Configuration

(((git commands, config)))
As you briefly saw in <<ch01-getting-started#ch01-getting-started>>, 
Git configuration options are specified by running `git config`.
One of the first things you did was to set up your name and email address.

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Now you learn a few of the presumably more interesting options to customize your Git usage.

First, a quick review. Git uses a layer of configuration files to determine non-default behavior.
The first place Git looks for these options is `/etc/gitconfig`, which contains
the configuration options everyone on the system uses in all repositories.
If you add `--system` to `git config`, it reads and writes from this file,
assuming you have permission to do so.

The next place Git looks is `~/.gitconfig` (or `~/.config/git/config`), which is specific to each user,
and is used whenever the user accesses any repositories.
`git config` reads from and writes to this file when you add the `--global` flag.

Finally, Git looks for configuration options in the configuration file in the Git
directory (`.git/config`) of whatever repository you're currently using.
These options are specific to that specific repository.

Each of these levels (system, global, local) overrides options in the previous level,
so options in `.git/config` trump those in `/etc/gitconfig`, for instance.

[NOTE]
====
Git's configuration files are in plain-text, so you can also configure these options by editing a file.
It's generally easier to run the `git config` command, though.
====

==== Basic Client Configuration

The configuration options recognized by Git fall into two categories: client-side and server-side.
The majority of the options are client-side -- configuring your personal working preferences.
Many, _many_ configuration options are supported, but a large fraction of them are useful only in certain edge cases We're only covering the most common and most useful here.

To see a list of all the options your version of Git recognizes, run

[source,console]
----
$ man git-config
----

This lists all the available options in quite a bit of detail.
You can also see this at https://git-scm.com/docs/git-config.html[].

===== `core.editor`

((($EDITOR)))((($VISUAL, see $EDITOR)))
By default, Git uses whatever you've set as your default text editor in the `$VISUAL` or `$EDITOR`
environment variables. If neither of these are set, Git falls back to using `vi` to create and edit
commit and tag messages. To change to something else, use the `core.editor` setting.

[source,console]
----
$ git config --global core.editor emacs
----

Now, no matter what's set as your default text editor, Git uses `emacs` to edit messages.

===== `commit.template`

(((commit templates)))
If you set this to the path of a file, Git uses that file as the default message when you commit.
For instance, suppose you create `~/.gitmessage.txt` that contains

[source,text]
----
Subject line (try to keep under 50 characters)

Multi-line description of commit,
feel free to be detailed.

[Ticket: X]
----

Note how this commit template reminds the committer to keep the subject line short (for
the sake of `git log --oneline` output), to add further detail to the message, and to refer
to an issue or bug tracker ticket number if one exists.

Tell Git to use this file as the default message that appears in your editor when you
run `git commit` by setting the `commit.template` configuration value.

[source,console]
----
$ git config --global commit.template ~/.gitmessage.txt
$ git commit
----

Then, your editor opens with this as the default commit message when you run `git commit`.

[source,text]
----
Subject line (try to keep under 50 characters)

Multi-line description of commit,
feel free to be detailed.

[Ticket: X]
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
# modified:   lib/test.rb
#
~
~
".git/COMMIT_EDITMSG" 14L, 297C
----

If your team has a commit message policy, then making a template containing the required text
available and configuring Git to use it by default helps increase the chance of that policy
being followed.

===== `core.pager`

(((pager)))
This option determines which pager Git uses when producing output from commands such
as `git log` and `git diff`. Set it to `more` or to your favorite pager (by default, it's `less`),
or turn it off by setting it to a blank string.

[source,console]
----
$ git config --global core.pager ''
----

If you run that, Git pages the entire output of all commands, no matter how long they are.

===== `user.signingkey`

(((GPG)))
If you're making signed annotated tags (as discussed in <<ch07-git-tools#_signing>>), setting your GPG signing key as a configuration setting makes things easier.
Set your key ID by running

[source,console]
----
$ git config --global user.signingkey <gpg-key-id>
----

Now, you can sign tags without having to specify your key every time with the `git tag` command:

[source,console]
----
$ git tag -s <tag-name>
----

===== `core.excludesfile`

(((excludes)))(((.gitignore)))
Put file selection patterns in your project's `.gitignore` file so that Git doesn't see the files as untracked
or try to stage them when you run `git add`,
as discussed in <<ch02-git-basics-chapter#_ignoring>>.

But sometimes you want to ignore certain files for all repositories that you work with.
If your computer is running macOS, you're probably familiar with `.DS_Store` files.
If you use `emacs` or `vim`, you know about files whose name ends with a `~` or `.swp`.

This option lets you write a kind of global `.gitignore` file.
If you create a `~/.gitignore_global` file with this content

[source,ini]
----
*~
.*.swp
.DS_Store
----

and you run `git config --global core.excludesfile ~/.gitignore_global`,
Git never again bothers you about those files.

===== `help.autocorrect`

(((autocorrect)))
If you mistype a command, Git shows something like

[source,console]
----
$ git chekcout master
git: 'chekcout' is not a git command. See 'git --help'.

The most similar command is
    checkout
----

Git helpfully tries to figure out what you meant, but doesn't actually run the command it suggests.
If you set `help.autocorrect` to 1, Git actually runs the suggested command.

[source,console]
----
$ git chekcout master
WARNING: You called a Git command named 'chekcout', which does not exist.
Continuing under the assumption that you meant 'checkout'
in 0.1 seconds automatically...
----

Note that `0.1 seconds` business. `help.autocorrect` is actually an integer that represents tenths of a second.
So if you set it to 50, Git gives you 5 seconds to change your mind before executing the suggested command.

==== Colors in Git

(((color)))
Git fully supports colored terminal output, which greatly aids in visually parsing command output quickly and easily.
A number of options can help set your coloring preference.

===== `color.ui`

Git automatically colors most of its output, but there's a master switch if you don't like this behavior.
To turn off all Git's colored terminal output, run

[source,console]
----
$ git config --global color.ui false
----

The default value is `auto`, which colors output when it's going straight to a terminal,
but not when the output is redirected to a pipe or a file.

You can also set it to `always` to ignore the difference between terminals and pipes.
You rarely want to do this. In most scenarios, if you want color codes in your redirected output,
add the `--color` flag to the Git command to force it to use color codes.
The default value is almost always what you want.

===== `color.*`

To be more specific about which commands are colored and how, Git provides verb-specific coloring options.
Each of these can be set to `true`, `false`, or `always`.

  color.branch
  color.diff
  color.interactive
  color.status

In addition, each of these has suboptions for setting specific colors for parts of the output
to override each color. For example, to set the meta information in your diff output to a blue foreground,
black background, and bold text, run

[source,console]
----
$ git config --global color.diff.meta "blue black bold"
----

You can set the color to any of the following values: `normal`, `black`, `red`, `green`, `yellow`, `blue`, `magenta`, `cyan`, or `white`.
If you want an attribute like bold in the previous example, choose from `bold`, `dim`, `ul` (underline), `blink`, or `reverse` (swap foreground and background).

[[_external_merge_tools]]
==== External Merge and Diff Tools

(((mergetool)))(((difftool)))
Although Git has an internal implementation of diff, which is what we've been showing in this book,
you can configure Git to use an external diff tool instead. You can also set up a GUI merge
conflict resolution tool instead of having to resolve conflicts manually.
We demonstrate setting up the Perforce Visual Merge Tool (P4Merge) to do your diffs and merge resolutions,
because it's a nice GUI tool and it's free.

P4Merge works on all major platforms, so you should be able to try it out.
We use path names in the examples that work on macOS and Linux systems. For Windows,
make sure `p4merge` is in a directory in your `PATH` environment variable.

To begin, go to https://www.perforce.com/products/helix-core-apps/merge-diff-tool-p4merge[download P4Merge from Perforce^].
Next, set up external wrapper scripts to run your commands.
We use the macOS path for the executable. In other systems, it's where your `p4merge` binary is installed.
Create a merge wrapper script named `extMerge` that calls your binary with all the arguments provided.

[source,console]
----
$ cat /usr/local/bin/extMerge
#!/bin/sh
/Applications/p4merge.app/Contents/MacOS/p4merge $*
----

The diff wrapper checks to make sure seven arguments are provided and passes two of them to your merge script.
By default, Git passes the following arguments to the diff program:

[source]
----
path old-file old-hex old-mode new-file new-hex new-mode
----

Because you only want the `old-file` and `new-file` arguments, use the wrapper script to pass the ones you need.

[source,console]
----
$ cat /usr/local/bin/extDiff
#!/bin/sh
[ $# -eq 7 ] && /usr/local/bin/extMerge "$2" "$5"
----

Make sure the files for these tools are executable.

[source,console]
----
$ sudo chmod +x /usr/local/bin/extMerge
$ sudo chmod +x /usr/local/bin/extDiff
----

Now set up your config file to use your custom merge resolution and diff tools.
This requires a number of custom options -- `merge.tool` to tell Git what strategy to use,
`mergetool.<tool>.cmd` to specify how to run the command, `mergetool.<tool>.trustExitCode` to tell
Git if the exit code of that command indicates a successful merge resolution,
and `diff.external` to tell Git what command to run to show diffs.
So, either run the following four config commands:

[source,console]
----
$ git config --global merge.tool extMerge
$ git config --global mergetool.extMerge.cmd \
  'extMerge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"'
$ git config --global mergetool.extMerge.trustExitCode false
$ git config --global diff.external extDiff
----

or add the following lines to  `~/.gitconfig`:

[source,ini]
----
[merge]
  tool = extMerge
[mergetool "extMerge"]
  cmd = extMerge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
  trustExitCode = false
[diff]
  external = extDiff
----

After all this is done, if you run diff commands such as

[source,console]
----
$ git diff 32d1776b1^ 32d1776b1
----

Instead of displaying the diff output on the command line, Git fires up P4Merge, which looks something like this

.P4Merge
image::images/p4merge.png[P4Merge]

If you try to merge two branches and subsequently have merge conflicts, run `git mergetool`. It runs P4Merge to resolve the conflicts using a GUI tool.

The nice thing about this wrapper setup is that you can change your diff and merge tools so easily.
For example, to change your `extDiff` and `extMerge` tools to run the KDiff3 tool instead, all you have to do is edit your `extMerge` file:

[source,console]
----
$ cat /usr/local/bin/extMerge
#!/bin/sh
/Applications/kdiff3.app/Contents/MacOS/kdiff3 $*
----

Now, Git uses the KDiff3 tool for diff viewing and merge conflict resolution.

Git comes preconfigured to use a number of other merge-resolution tools so you don't
have to set up the command configuration. To see a list of the tools Git supports, run

[source,console]
----
$ git mergetool --tool-help
'git mergetool --tool=<tool>' may be set to one of the following:
        emerge
        gvimdiff
        gvimdiff2
        opendiff
        p4merge
        vimdiff
        vimdiff2

The following tools are valid, but not currently available:
        araxis
        bc3
        codecompare
        deltawalker
        diffmerge
        diffuse
        ecmerge
        kdiff3
        meld
        tkdiff
        tortoisemerge
        xxdiff

Some of the tools listed above only work in a windowed
environment. If run in a terminal-only session, they will fail.
----

If you're not interested in using KDiff3 for diff but rather want to use it just for merge resolution, and it's in your path, run

[source,console]
----
$ git config --global merge.tool kdiff3
----

If you run this instead of setting up the `extMerge` and `extDiff` files, Git will use KDiff3 for merge resolution and the normal Git diff tool for diffs.

==== Formatting and Whitespace

(((whitespace)))
Formatting and whitespace issues are some of the more frustrating and subtle problems that many developers encounter when collaborating, especially cross-platform.
It's very easy for patches or other collaborated work to introduce subtle whitespace differences because text editors silently introduce them, and if your files ever touch a Windows system, their line endings might be replaced.
Git has a few configuration options to help with these issues.

===== `core.autocrlf`

(((crlf)))(((line endings)))
If you're on Windows and working with people who aren't (or vice-versa), you'll probably run into
line-ending issues at some point. This is because Windows uses both a carriage-return character and
a linefeed character at the end of lines, whereas macOS and Linux systems use only a linefeed.
This is a subtle but incredibly annoying fact of cross-platform work. Many editors on Windows
silently replace existing LF-style line endings with CRLF, or insert both characters when
the user types the enter key.

Git can handle this by converting CRLF line endings into LF when you add a file to the index,
and vice versa when it checks out a file. You can turn on this conversion with the `core.autocrlf` setting.
If you're on Windows, set it to `true` -- this converts LF endings into CRLF when you check out files.

[source,console]
----
$ git config --global core.autocrlf true
----

If you're on a Linux or macOS system that uses LF line endings, then you don't want Git to automatically convert them when you check out files. However, if a file with CRLF endings accidentally gets introduced, then you may want Git to fix it.
You can tell Git to convert CRLF to LF on commit but not the other way around by setting `core.autocrlf` to `input`.

[source,console]
----
$ git config --global core.autocrlf input
----

This setup should leave CRLF endings in Windows checkouts, but LF endings on macOS and Linux systems and in the repository.

If you're a Windows programmer doing a Windows-only project, then you can turn this off, storing the CRs in the repository by setting the config value to `false`.

[source,console]
----
$ git config --global core.autocrlf false
----

===== `core.whitespace`

Git comes preconfigured to detect and fix some whitespace issues.
It can look for six primary whitespace issues -- three are enabled by default but can be turned off,
and three are disabled by default but can be turned on.

The three that are turned on by default are `blank-at-eol`, which looks for spaces at the end of a line,
`blank-at-eof`, which looks for  blank lines at the end of a file, and `space-before-tab`,
which looks for spaces before tabs at the beginning of a line.

The three that are disabled by default but can be turned on are `indent-with-non-tab`,
which looks for lines that begin with spaces instead of tabs (and is controlled by the `tabwidth` option),
`tab-in-indent`, which watches for tabs in the indentation portion of a line, and `cr-at-eol`,
which tells Git that carriage returns at the end of lines are OK.

You can tell Git which of these you want enabled by setting `core.whitespace` to the values you want
on or off, separated by commas. Disable options by either leaving them out of the option string
or prepending a `-` in front of the value. For example, to set all but `space-before-tab`, run

[source,console]
----
$ git config --global core.whitespace \
    trailing-space,-space-before-tab,indent-with-non-tab,tab-in-indent,cr-at-eol
----

Or specify the customizing part only.

[source,console]
----
$ git config --global core.whitespace \
    -space-before-tab,indent-with-non-tab,tab-in-indent,cr-at-eol
----

Git detects these issues when you run `git diff` and tries to color its output so you can fix
them before you commit. It also uses these values to help when you apply patches by running `git apply`.
When you're applying patches, you can ask Git to warn you if it's applying patches with the
specified whitespace issues.

[source,console]
----
$ git apply --whitespace=warn <patch>
----

Or you can have Git try to automatically fix the issue before applying the patch.

[source,console]
----
$ git apply --whitespace=fix <patch>
----

These options apply to `git rebase` as well.
If you've committed whitespace issues but haven't yet pushed upstream, run `git rebase --whitespace=fix`
to have Git automatically fix whitespace issues as it rewrites the patches.

==== Server Configuration

Not nearly as many configuration options are available on the server side of Git, but there are a few interesting ones to take note of.

===== `receive.fsckObjects`

Git is capable of making sure every object received during a push still matches its hash and points to valid objects.
However, This isn't done by default. It's a fairly expensive operation, and might slow down a command, especially in large repositories or pushes.
To force Git to check object consistency on every push, set `receive.fsckObjects` to true.

[source,console]
----
$ git config --system receive.fsckObjects true
----

Now, Git checks the integrity of your repository before each push is accepted to make sure faulty
(or malicious) clients aren't introducing corrupt data.

===== `receive.denyNonFastForwards`

If you rebase commits that you've already pushed and then try to push again, or otherwise
try to push a commit to a remote branch that doesn't contain the commit that the remote branch
currently points to, your push is denied. This is generally good policy but in the case of the rebase,
you may determine that you know what you're doing and can force-update the remote branch
with the `-f` flag to `git push`.

To tell Git to refuse force-pushes, set `receive.denyNonFastForwards`.

[source,console]
----
$ git config --system receive.denyNonFastForwards true
----

The other way to do this is via server-side receive hooks, which we cover in a bit.
That approach lets you do more complex things like deny non-fast-forwards commits to a certain subset of users.

===== `receive.denyDeletes`

One of the workarounds to the `denyNonFastForwards` policy is for the user to delete the
branch and then push it again with the new reference. To avoid this, set `receive.denyDeletes` to true.

[source,console]
----
$ git config --system receive.denyDeletes true
----

This denies any deletion of branches or tags -- no user can do it.
There are also more interesting ways to allow these deletes on a per-user basis via ACLs,
as you learn in <<ch08-customizing-git#_an_example_git_enforced_policy>>.
