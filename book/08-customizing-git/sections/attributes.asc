=== Git Attributes

(((attributes)))
Some settings can also be specified for a path, so that Git applies them only for a subdirectory or subset of files.
These path-specific settings are called Git attributes and are set either in a `.gitattributes` file in one of your directories (normally the root of your project) or in the `.git/info/attributes` file if you don't want the attributes file committed with your project.

Using attributes, you can do things like specify separate merge strategies for individual files or directories in your project, tell Git how to diff non-text files, or have Git filter content before you check it into or out.
In this section, you learn some of the attributes you can set on your paths in your Git project and see a few examples of how to use this feature in practice.

==== Binary Files

(((binary files)))
One cool trick for using Git attributes is telling Git which files are binary (in cases when
Git otherwise may not be able to figure it out), and giving Git special instructions
on how to handle those files. For instance, some text files may be machine generated and not diffable,
whereas some binary files can be diffed. You can tell Git which is which.

===== Identifying Binary Files

Some files look like they contain text but for all intents and purposes should be treated as binary data.
For instance, Xcode projects on the Mac contain a file that ends in `.pbxproj`, which
is basically a JSON file containing your build settings written by the Xcode IDE.
Although it's technically a text file (because it's all UTF-8), you don't want to
treat it as such because it's really a lightweight database. You can't merge its content if two
people change it, and diffs generally aren't useful. The file is meant to be consumed by a program.
In essence, Git should treat it like a binary file.

To tell Git to treat all `pbxproj` files as binary files, add the following line to `.gitattributes`:

[source,ini]
----
*.pbxproj binary
----

Now Git doesn't try to convert or fix CRLF issues, nor does it try to compute or print a diff
for changes in this file when you run `git show` or `git diff`.

===== Diffing Binary Files

You can also use Git attributes to effectively diff binary files.
You do this by telling Git how to convert the binary data into a text format that a normal diff can compare.

Here's how to use this technique to solve one of the most annoying problems known to humanity:
version-controlling Microsoft Word documents. Everyone knows that Word is the most horrific editor around,
but oddly, everyone still uses it. To version-control Word documents, you can stick them in a
Git repository and commit every once in a while. But what good does that do?
If you run `git diff` normally, you only see something like

[source,console]
----
$ git diff
diff --git a/chapter1.docx b/chapter1.docx
index 88839c4..4afcb7c 100644
Binary files a/chapter1.docx and b/chapter1.docx differ
----

You can't directly compare two Word files unless you check them out and examine them manually, right?
It turns out you can do this fairly easily using Git attributes.
Put the following line in `.gitattributes`:

[source,ini]
----
*.docx diff=word
----

This tells Git that any file whose name matches this pattern (`.docx`) should use the `word` filter
when you try to view a diff of Word files. What's the `word` filter? You have to install it.
Here you configure Git to use the `docx2txt` program to convert Word documents into readable text files,
which Git can then diff properly.

First, install `docx2txt`. Download it from https://docx2txt.sourceforge.net[].
Follow the instructions in the `INSTALL` file to put `docx2txt.pl` in a directory in your
PATH environment variable. Next, write a wrapper script to convert output to the format Git expects.
Create a file called `docx2txt` in a directory in your PATH, and add this content to it.

[source,console]
----
#!/bin/bash
docx2txt.pl "$1" -
----

Don't forget to `chmod a+x` that file.
Finally, configure Git to use this script.

[source,console]
----
$ git config diff.word.textconv docx2txt
----

Now Git knows that if it tries to diff two files, and any of them end in `.docx`,
it should run those files through the `word` filter, which is defined as the `docx2txt` program.
It makes text-based versions of your Word files before attempting to diff them.

As an example Chapter 1 of this book was converted to Word format and committed in a Git repository.
Then a new paragraph was added. Here's what `git diff` shows.

[source,console]
----
$ git diff
diff --git a/chapter1.docx b/chapter1.docx
index 0b013ca..ba25db5 100644
--- a/chapter1.docx
+++ b/chapter1.docx
@@ -2,6 +2,7 @@
 This chapter will be about getting started with Git. We will begin at the beginning by explaining some background on version control tools, then move on to how to get Git running on your system and finally how to get it setup to start working with. At the end of this chapter you should understand why Git is around, why you should use it and you should be all setup to do so.
 1.1. About Version Control
 What is "version control", and why should you care? Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. For the examples in this book you will use software source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer.
+Testing: 1, 2, 3.
 If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use. It allows you to revert files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more. Using a VCS also generally means that if you screw things up or lose files, you can easily recover. In addition, you get all this for very little overhead.
 1.1.1. Local Version Control Systems
 Many people's version-control method of choice is to copy files into another directory (perhaps a time-stamped directory, if they're clever). This approach is very common because it is so simple, but it is also incredibly error prone. It is easy to forget which directory you're in and accidentally write to the wrong file or copy over files you don't mean to.
----

Git successfully and succinctly tells us that we added the string "`Testing: 1, 2, 3.`", which is correct.
It's not perfect – formatting changes wouldn't show up here – but it certainly works.

Another interesting problem you can solve this way involves diffing image files.
One way to do this is to run them through a filter that extracts their EXIF information -- metadata
that's recorded with most image formats. If you download and install the `exiftool` program,
you can use it to extract the metadata from an image file, so at least the diff shows any metadata changes.
Put the following line in `.gitattributes`:

[source,ini]
----
*.png diff=exif
----

Configure Git to use this tool:

[source,console]
----
$ git config diff.exif.textconv exiftool
----

If you replace an image in your project and run `git diff`, you see something like this:

[source,diff]
----
diff --git a/image.png b/image.png
index 88839c4..4afcb7c 100644
--- a/image.png
+++ b/image.png
@@ -1,12 +1,12 @@
 ExifTool Version Number         : 7.74
-File Size                       : 70 kB
-File Modification Date/Time     : 2009:04:21 07:02:45-07:00
+File Size                       : 94 kB
+File Modification Date/Time     : 2009:04:21 07:02:43-07:00
 File Type                       : PNG
 MIME Type                       : image/png
-Image Width                     : 1058
-Image Height                    : 889
+Image Width                     : 1056
+Image Height                    : 827
 Bit Depth                       : 8
 Color Type                      : RGB with Alpha
----

You can easily see that the file size and image dimensions have both changed.

[[_keyword_expansion]]
==== Keyword Expansion

(((keyword expansion)))
SVN- or CVS-style keyword expansion is often requested by developers.
The main problem with this is that in Git you can't modify a file with information about the commit
after you've committed, because that would change the hash of the committed file, making the hash invalid.
However, you can inject text into a file when it's checked out and remove the text before the
file is added to a commit. Git attributes offer two ways to do this.

First, inject the hash of a file into an `$Id$` field in the file automatically.
If you set this attribute on a file, then the next time you check out a branch containing the file,
Git replaces that field with the hash of the file.
It's important to notice that it isn't the hash of the commit, but that of the file itself.

Put the following line in your `.gitattributes` file:
file

[source,ini]
----
*.txt ident
----

Add an `$Id$` reference to a test file.

[source,console]
----
$ echo '$Id$' > test.txt
----

The next time you check out this file, Git injects its hash.

[source,console]
----
$ rm test.txt
$ git checkout -- test.txt
$ cat test.txt
$Id: 42812b7653c7b88933f8a9d6cad0ca16714b9bb3 $
----

However, that result is of limited use.
If you've used keyword substitution in CVS or Subversion, you know you can include a
datestamp -- the hash isn't all that helpful, because you can't tell if one hash
is older or newer than another just by looking at them.

It turns out that you can write your own filters for doing substitutions in files when they're
committed or checked out. These are called `clean` and `smudge` filters.
In `.gitattributes`, you can set a filter for particular paths and then set up scripts
that process files just before they're checked out (`smudge`, see <<filters_a>>) and
just before they're staged (`clean`, see <<filters_b>>).
These filters can be set to do all sorts of fun things.

[[filters_a]]
.The "`smudge`" filter is run on checkout
image::images/smudge.png[The “smudge” filter is run on checkout]

[[filters_b]]
.The "`clean`" filter is run when files are staged
image::images/clean.png[The “clean” filter is run when files are staged]

One example of when this might be useful is running all your C source code through the `indent`
program before committing to make sure all your source code is formatted according to your standard.
Set this up by setting the filter attribute in `.gitattributes` to filter `*.c` files
with the `indent` filter.

[source,ini]
----
*.c filter=indent
----

Then, tell Git what the `indent` filter does on smudge and clean.

[source,console]
----
$ git config --global filter.indent.clean indent
$ git config --global filter.indent.smudge cat
----

In this case, when you commit files whose name matches the pattern `*.c`, Git runs them through the indent
program before it stages them and then runs them through the `cat` program before it checks them
back out onto disk. The `cat` program does essentially nothing. It outputs the same data that comes in.
This combination effectively filters all C source code files through `indent` before committing.

Another interesting example implements `$Date$` keyword expansion, RCS style.
To do this properly, you need a small script that takes a filename, figures out the last commit
date for the repository containing the file, and inserts that date into the file.
Here's a small Ruby script that does that.

[source,ruby]
----
#! /usr/bin/env ruby
data = STDIN.read
last_date = `git log --pretty=format:"%ad" -1`
puts data.gsub('$Date$', '$Date: ' + last_date.to_s + '$')
----

All the script does is get the latest commit date from `git log`, sticks that into any `$Date$`
strings it sees in stdin, and outputs the results. It should be simple to do in whatever language
you're most comfortable in. Name this file `expand_date` and put it in your PATH.
Now, set up a filter in Git (call it `dater`) and tell it to use your `expand_date` filter
to smudge the files on checkout. You can use a Perl expression to clean that up on commit.

[source,console]
----
$ git config filter.dater.smudge expand_date
$ git config filter.dater.clean 'perl -pe "s/\\\$Date[^\\\$]*\\\$/\\\$Date\\\$/"'
----

This Perl snippet strips out anything it sees in a `$Date$` string, to get back to where you started.
Now that your filter is ready, test it by setting up a Git attribute for that file that engages the new filter and creating a file with your `$Date$` keyword:

[source,ini]
----
date*.txt filter=dater
----

[source,console]
----
$ echo '# $Date$' > date_test.txt
----

If you commit those changes and check out the file again, you see the keyword properly substituted.

[source,console]
----
$ git add date_test.txt .gitattributes
$ git commit -m "Test date expansion in Git"
$ rm date_test.txt
$ git checkout date_test.txt
$ cat date_test.txt
# $Date: Tue Apr 21 07:26:52 2009 -0700$
----

You can see how powerful this technique can be for customized applications.
You have to be careful, though, because `.gitattributes` is committed and passed
around with the project, but the filter (in this case, `dater`) isn't, so this technique doesn't
work without the filter. When you design these filters, they should be able to fail gracefully
but the project should still work properly.

==== Exporting Your Repository

(((archiving)))
Git attributes also allow doing some interesting things when exporting an archive of your project.

===== `export-ignore`

You can tell Git to not export certain files or directories when generating an archive.
If there's a subdirectory or file that you don't want to include in an archive but that you do
want in your project, specify those files using the `export-ignore` attribute.

For example, say you have some test files in a `test/` subdirectory, and it doesn't make sense
to include them in a tarball export of your project. Add the following line to `.gitattributes`:

[source,ini]
----
test/ export-ignore
----

Now, when you run `git archive` to create a tarball of your project, the files in `test` won't be included in the archive.

===== `export-subst`

When exporting files for deployment you can apply the formatting and keyword-expansion processing
of `git log` to selected portions of files marked with the `export-subst` attribute.

For instance, to include a file named `LAST_COMMIT` in your project, and have metadata about the
last commit automatically injected into it when `git archive` runs, set up `.gitattributes`
and `LAST_COMMIT` like this.

[source,ini]
----
LAST_COMMIT export-subst
----

[source,console]
----
$ echo 'Last commit date: $Format:%cd by %aN$' > LAST_COMMIT
$ git add LAST_COMMIT .gitattributes
$ git commit -am 'adding LAST_COMMIT file for archives'
----

When you run `git archive`, the content of the archived file looks like

[source,console]
----
$ git archive HEAD | tar xCf ../deployment-testing -
$ cat ../deployment-testing/LAST_COMMIT
Last commit date: Tue Apr 21 08:38:48 2009 -0700 by Scott Chacon
----

The substitutions can include the commit message and any Git notes, for example,
and `git log` can do simple word wrapping.

[source,console]
----
$ echo '$Format:Last commit: %h by %aN at %cd%n%+w(76,6,9)%B$' > LAST_COMMIT
$ git commit -am 'export-subst uses git log'\''s custom formatter

git archive uses git log'\''s `pretty=format:` processor
directly, and strips the surrounding `$Format:` and `$`
markup from the output.
'
$ git archive @ | tar xfO - LAST_COMMIT
Last commit: 312ccc8 by Jim Hill at Fri May 8 09:14:04 2015 -0700
       export-subst uses git log's custom formatter

         git archive uses git log's `pretty=format:` processor directly, and
         strips the surrounding `$Format:` and `$` markup from the output.
----

The resulting archive is suitable for deployment, but like any exported archive it isn't suitable for further development work.

==== Merge Strategies

(((merging, strategies)))
You can also use Git attributes to tell Git to use different merge strategies for
specific files. One very useful option is to tell Git to not try merging specific
files when they have conflicts, but rather to use your changes instead of someone else's.

This is helpful if a branch in your project has diverged, but you want to merge changes back in from it,
and you want to ignore certain files. Say you have a database settings file called `database.xml` that's
different in two branches, and you want to merge in your other branch without messing up the database file.
You can set up an attribute like

[source,ini]
----
database.xml merge=ours
----

And then define a dummy `ours` merge strategy with

[source,console]
----
$ git config --global merge.ours.driver true
----

If you merge in the other branch, instead of having merge conflicts with `database.xml`, you see something like

[source,console]
----
$ git merge topic
Auto-merging database.xml
Merge made by recursive.
----

In this case, `database.xml` isn't changed.
