[[_git_hooks]]
=== Git Hooks

(((hooks)))
Like many other VCSs, Git has a way to run custom scripts when certain important actions occur.
These scripts are called hooks.
There are two kinds of hooks: client-side and server-side.
Client-side hooks are triggered by operations such as committing and merging,
while server-side hooks key off of network operations such as receiving pushed commits.
You can use these hooks in all sorts of ways.

==== Installing a Hook

The hooks are all stored in `.git/hooks`.
When you initialize a new repository by running `git init`, Git populates the hooks directory with a
bunch of example scripts, many of which are useful by themselves.
The scripts also document the input values they expect.
All the examples are written as shell scripts, with some Perl thrown in,
but any properly named executable script works fine -- you can write them in Ruby, Python, or what have you.
To use the bundled hook scripts, you have to rename them. Their filenames all end with `.sample`.

To enable a hook script, put the file containing the script in the repository's`.git/hooks` directory.
The hook script must be named appropriately (without any extension) and be executable.
From that point forward, it runs when the hook event occurs.
We cover most of the major hooks here.

==== Client-Side Hooks

There are a lot of client-side hooks.
This section splits them into committing-workflow hooks, email-workflow scripts, and everything else.

[NOTE]
====
It's important to note that client-side hooks are *not* copied when you clone a repository.
If you intend for these scripts to enforce a policy, do that server-side.
See the example in <<ch08-customizing-git#_an_example_git_enforced_policy>>
====

===== Committing-Workflow Hooks

The first four hooks have to do with the committing process.

The `pre-commit` hook runs first, before you even enter a commit message.
The hook is used to inspect the snapshot that's about to be committed to see if you've forgotten something,
to make sure tests run, or to examine whatever you need to inspect in the commit.
Exiting non-zero from this hook aborts the commit, although you can override this behavior by
running `git commit --no-verify`. You can do things like check for code style (by running `lint` or something
equivalent), check for trailing whitespace (the default hook does exactly this),
or check for appropriate documentation on new methods.

The `prepare-commit-msg` hook runs before the commit message editor starts but after
the default message is created. This hook can edit the commit message before the committer sees it.
This hook takes a few parameters -- the path to the file that holds the commit message so far,
the type of commit, and the commit's SHA-1 hash if this is an amended commit.
This hook generally isn't useful for normal commits. Rather, it's good for commits where the
default message is auto-generated, such as templated commit messages, merge commits,
squashed commits, and amended commits. You may use it in conjunction with a commit template
to programmatically insert information.

The `commit-msg` hook takes one parameter, which again is the path to a temporary file that
contains the commit message written by the developer. If this script exits non-zero,
Git aborts the commit process, so you can use the hook to validate your project state
or commit message before allowing a commit to complete.
In the last section of this chapter, we demonstrate using this hook to check that your commit
message is conformant to a required pattern.

After the entire commit process is completed, the `post-commit` hook runs.
It doesn't take any parameters, but you can easily get the last commit by running `git log -1 HEAD`.
Generally, this script is used for notification or something similar.

[[_email_hooks]]
===== Email Workflow Hooks

You can set up three client-side hooks for an email-based workflow.
They're all invoked by running `git am`, so if you aren't using that command in your workflow, you can safely skip to the next section.
If you're taking patches over email prepared by `git format-patch`, then some of these may be helpful to you.

The first hook to run is `applypatch-msg`.
It takes a single argument -- the name of the temporary file that contains the proposed commit message.
Git aborts the patch if this script exits non-zero.
You can use this to make sure the commit message is properly formatted, or to normalize the
message by having the script edit it in place.

The next hook to run when applying patches via `git am` is `pre-applypatch`.
Somewhat confusingly, it's run _after_ the patch is applied but before the commit is made,
so you can use it to inspect the snapshot before making the commit.
You can run tests or otherwise inspect the working directory with this script.
If something is missing or the tests don't pass, exiting non-zero aborts `git am` without
committing the change.

The last hook to run during `git am` is `post-applypatch`, which runs after the commit is made.
You can use it to notify a group or the author of the patch that the patch has been applied and committed.
You can't stop the patching process with this script.

[[_other_client_hooks]]
===== Other Client Hooks

The `pre-rebase` hook runs before you rebase anything. It can halt the process by exiting non-zero.
You can use this hook to disallow rebasing any commits that have already been pushed.
The example `pre-rebase` hook that Git installs does this,
although it makes some assumptions that may not match your workflow.

The `post-rewrite` hook is run by commands that replace commits, such as `git commit --amend`
and `git rebase` (though not by `git filter-branch`). Its single argument is the command that
triggered the rewrite, and it receives a list of rewrites on `stdin`.
This hook has many of the same uses as the `post-checkout` and `post-merge` hooks.

After you run a successful `git checkout`, the `post-checkout` hook runs.
You can use it to set up your working directory properly for your project environment.
This may mean moving in large binary files that you don't want source controlled,
auto-generating documentation, or something along those lines.

The `post-merge` hook runs after a successful `git merge`.
You can use it to restore data in the working directory that Git can't track, such as permissions data.
This hook can likewise validate the presence of files external to Git control that you want copied
in when the working directory changes.

The `pre-push` hook runs during `git push`, after the remote refs have been updated but
before any objects have been transferred.
It receives the name and location of the remote as parameters,
and a list of to-be-updated refs through `stdin`. You can use it to validate a set of ref updates
before a push occurs. A non-zero exit code aborts the push.

Git occasionally does garbage collection as part of its normal operation by running `git gc --auto`.
The `pre-auto-gc` hook is invoked just before garbage collection takes place,
and can be used to notify you that this is happening so that you can abort garbage collection if now isn't a good time.

==== Server-Side Hooks

In addition to the client-side hooks, there are a couple of important server-side hooks a system
administrator can use to enforce nearly any kind of policy. These scripts run before and after pushes
to the server. The pre hooks can exit non-zero at any time to reject the push as well as to send
an error message back to the client. You can set up a push policy that's as complex as you wish

===== `pre-receive`

The first hook that runs when handling a push from a client is `pre-receive`.
It takes a list of references that are being pushed from stdin. If it exits non-zero,
none of them are accepted. You can use this hook to do things like make sure none of the updated
references are non-fast-forwards, or to do access control for all the refs and files they're modifying.

===== `update`

The `update` hook is very similar to the `pre-receive` hook, except that it's run once for each
branch being updated. If the pusher is trying to push to multiple branches, `pre-receive` runs only once,
whereas `update` runs once per branch. Instead of reading from stdin,
this script takes three arguments -- the name of the reference (branch), the SHA-1 hash that
reference pointed to before the push, and the SHA-1 hash of what the user is trying to push.
If the update script exits non-zero, only that reference is rejected. Other references can still be updated.

===== `post-receive`

The `post-receive` hook runs after the entire process is completed and can be used to update
other services or notify users. It reads the same data from stdin as the `pre-receive` hook.
Examples include emailing a list, notifying a continuous integration server, or updating
a ticket-tracking system. You can even parse the commit messages to see if any tickets need to be opened,
modified, or closed. This script can't stop the push, but the client doesn't disconnect until the
script has completed, so be careful if you try to do anything that may take a long time.

[TIP]
====
If you're writing a hook that others will need to read, use the long versions of command-line flags. Six months from now you'll thank us.
====
