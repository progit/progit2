[[what_is_git_section]]
=== What is Git?

So, what is Git in a nutshell?
This is an important question, because if you understand what Git is and the fundamentals of how it works, then using it effectively will probably be much easier.
As you learn Git, try to clear your mind of the things you may know about other VCSs, such as Subversion or Perforce. This helps avoid subtle confusion.
Git stores and thinks about information much differently than these other systems,
even though the user interface is similar. Understanding those differences is crucial.(((Subversion)))(((Perforce)))

==== Snapshots, Not Differences

The major difference between Git and other VCSs is the way Git records changes to files.
Conceptually, most other VCSs store a set of files along with the changes made to each file over time.
This is commonly called _delta-based_ version control.

.Storing data as changes to a base version of each file
image::images/deltas.png[Storing data as changes to a base version of each file]

Git employs a different approach.
Instead, Git stores what's more like a set of copies of your project.
Every time you save the state of your project in Git, Git basically stores a "snapshot" of what _all_ your files looked like at that moment.
This is called a _commit_.
For efficiency, if a file hasn't changed since the last commit,
Git doesn't actually store the file again. Instead, it creates a link to the previous identical version it already contains.

.Storing data as snapshots of the project over time
image::images/snapshots.png[Git stores data as snapshots of the project over time]

(The dotted ovals in this picture represent links to unchanged file versions.)

This is an important distinction between Git and nearly all other VCSs.
Git reimplements almost every aspect of version control, but does so in a way that reflects this new approach.
We explore some of the benefits you gain from this approach when we cover Git branching in <<ch03-git-branching#ch03-git-branching>>.

==== All Repositories Are Technically Equivalent

The illustration in Figure 3 is actually misleading in that it labels one computer specifically as a server.
A major difference between Git and other systems is that technically there's no difference
between the copies of the repositories located on servers or on developers' computers.
The fact that one repository is designated as the official project repository is a management decision,
not a technical distinction. Sure, it means that all changes must somehow be synced to the chosen official repository,
and eventually to the repositories on developer's computers. Fortunately, as you'll see, Git is very good at
doing this. But the point is that there's no way to recognize that a particular repository
is the official project repository simply by looking at it.

==== Nearly Every Operation Is Local

Most operations in Git only access local repositories. Generally nothing is needed from another computer.
If you're used to a CVCS where most operations require network access, this feature of Git makes you
think that the gods of speed have blessed Git with unworldly powers.
Because you have the entire project history right there on your local disk, most operations seem almost instantaneous.

For example, to browse the history of a project, Git doesn't need to access a remote server.
It simply reads the history directly from the local repository.
This means you see the project history almost instantly.
To see the changes between the current version of a file and the version from a month ago,
Git retrieves both versions from the local repository and compares them on the local computer,
instead of either having to ask a remote server to do it or fetching an older version of
the file from a remote server.

This also means that there's very little you can't do while offline.
If you're without internet access on an airplane or a train and want to do a little work,
you can do so happily until you get back online.
If you're at home and your internet connection goes down, you can still work.
With many other systems, it's either impossible or painful to get any work done when you're offline.
In Perforce, for example, you can't do much when you aren't connected to the server.
In Subversion and CVS, you can edit files, but you can't commit changes while the repository is inaccessible.
This may not seem like a huge deal, but you'd be surprised what a big difference it can make.

==== Git Has Integrity

Everything in Git is checksummed before it is stored and is then referred to by that checksum.
This means it's impossible to change the contents of any file or directory without Git knowing about it.
This functionality is built into Git at the lowest levels and is integral to its philosophy.
You can't lose information in transit or get file corruption without Git being able to detect it.

When making a commit, the content of what you're committing is
checksummed before it's stored, and the checksum itself is stored in the
repository along with what you committed.
This means it's impossible to change the content of anything in a repository without Git noticing.
This behavior is built into Git at the lowest levels and is integral to its philosophy.
You can't lose information in transit or experience file corruption without Git detecting it.

The mechanism that Git uses for this checksumming is called an SHA-1 hash.(((SHA-1)))
This is a 40-character string composed of hexadecimal characters (0-9 and a-f), and is calculated based
on the content of a file or directory. An SHA-1 hash looks something like

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

You see these SHA-1 hashes all over the place in Git because they're used so much.
In fact, Git stores everything in its repository not by filename but by the SHA-1 hash of its content.
The only way to reference a file is by that hash.

==== Git Generally Only Adds Data

When you make changes in Git, you almost always only add to a Git repository.
It's hard to get Git to do anything that's not undoable or that erases data.
As in any VCS, you can lose or mess up changes you haven't committed yet.
But after you commit a change in Git, it's very difficult to lose.

This makes using Git a joy because we know we can experiment without any danger of severely screwing things up.
For a more in-depth look at how Git stores data and how to recover seemingly lost data, see <<ch02-git-basics-chapter#_undoing>>.

==== Three Important Locations

Now it's time to become familiar with the three places that you need to be aware of when working with Git.
These are the working directory, the staging area, and the .git repository.

[NOTE]
====
This book uses the term `working directory` instead of the longer but more
accurate `working directory tree`. Your project can have as many levels of
directories as you need.
====

.Working directory, staging area, and .git directory
image::images/areas.png["Working tree, staging area, and Git directory"]

The working directory contains a copy of one version of a project,
and is where you make changes.

The staging area stores what will be saved
when you make your next commit. More information about what it means to make a commit
appears below.
The staging area is sometimes referred to as the "index" or the "cache".

The .git directory is where the project's Git repository is stored.
This is the most important part of Git, and it's what's copied when you copy, or _clone_,
a repository from another computer.

==== Three Important States

Git sees each file in one of three states: _committed_, _modified_, or _staged_.
Committed means that the file is safely stored in the Git repository.
Modified means that the file has been changed in the working directory since
the last commit but hasn't been copied into the staging area yet.
Staged means that the current version of the file in the working directory has been copied into the staging area.

The basic Git workflow goes something like

1. Checkout or create files in the working directory.
2. Modify files in the working directory.
3. Stage the files.
4. Make a commit.

In <<ch02-git-basics-chapter#ch02-git-basics-chapter>>, you learn more about these states.
