=== About Version Control

(((version control)))
What's `version control`, and why should you care?
Version control is a way to record changes to files. Using version control you can revert a file or an entire project back to a previous version, review changes
made over time, see who made a change that might be causing a problem, and more.
Even though the examples in this book use version control to manage files containing computer source code, in reality you can use version
control to manage almost any type of content.

[NOTE]
====
The word `project` is used throughout this book without being formally defined. Just think of a project as a
collection of files. For example, all the files used to create this book are a project.
====

==== Local Version Control Systems

(((version control,local)))
One popular way to do version control is to copy files into a backup directory (perhaps with a name cleverly
containing a version number or the current date and time) each time you make a change.
This approach is very common because it's so simple, but it's also incredibly error prone.
It's easy to forget which directory you should be using and accidentally copy a file
into the wrong directory.

To deal with this issue, programmers long ago developed VCSs based on the concept
of a simple repository containing all the changes to their files.

.Local version control diagram
image::images/local.png[Local version control diagram]

One popular VCS is called RCS, which is still distributed with many computers today.
https://www.gnu.org/software/rcs/[RCS^] works by storing the differences between files. It can then re-create any file at any point in time
by re-applying changes.

==== Centralized Version Control Systems

(((version control,centralized)))
The next major issue VCSs attack is how to make it possible for developers working independently to collaborate.
To solve this problem, Centralized Version Control Systems (CVCSs) were created.
These systems, such as CVS, Subversion, and Perforce, rely on a repository stored
on a single central server.
Clients check files in to and out of that central server. (((CVS)))(((Subversion)))(((Perforce)))
This has been the standard way of doing version control for many years.

.Centralized version control diagram
image::images/centralized.png[Centralized version control diagram]

This approach offers many advantages over local VCSs.
For example, everyone can see what everyone else on the project has done.
Administrators can control who can do what, and it's far easier to administer a CVCS than it is to deal with
VCSs on every client.

However, this approach also has some serious downsides.
The most obvious is the single point of failure that the centralized server presents.
If that server goes down for an hour, then nobody can collaborate or check in changes
during that time.
If the disk storing the repository breaks, and proper backups haven't been kept,
you lose the entire history of the project and all its files, except whatever copies people happen to
have on their computers.
Local VCS systems suffer from this same problem. Whenever you have the entire history of a project
in a single place, you risk losing everything.

==== Distributed Version Control Systems

(((version control,distributed)))
This is where Distributed Version Control Systems (DVCSs) step in.
In a DVCS (such as Git, Mercurial, Bazaar, or Darcs), clients don't just check out files.
Rather, they fully mirror the repository on a local disk.
Each client then contains a complete copy of the repository, including all its history.

.Distributed version control diagram
image::images/distributed.png[Distributed version control diagram]

Furthermore, DVCSs make it easy to access remote repositories, allowing collaboration between people
working simultaneously on the same project.
This allows doing things in ways that aren't possible with CVCSs.
Of course, there's now a new problem, which is how to keep the various repositories in sync, which
is something that a DVCS must solve.
