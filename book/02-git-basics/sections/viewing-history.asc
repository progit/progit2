[[_viewing_history]]
=== Viewing the Commit History

After making several commits, or cloning a repository containing commits,
you might want to look back to see the history of the repository.
The most basic way to do this is by running `git log`.

These examples use a very simple project called "`simplegit`".
To get the project, run

[source,console]
----
$ git clone https://github.com/schacon/simplegit-progit
----

When you run `git log` in this project, you should see something like(((git commands, log)))

[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    Change version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    Remove unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    First commit
----

By default, with no arguments, `git log` shows the repository's commits in reverse chronological order -- that is,
the most recent commit shows up first.
You see each commit's SHA-1 hash, author's name and email address, commit date, and commit message.

`git log` has a huge number and variety of flags that allow you to specify exactly what you're looking for.

One of the more helpful flags is `-p`, which shows the differences introduced in each commit.
If you run `git log -p -2`, you only see the last two commits.

[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "A simple gem for using Git in Ruby code."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test code

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
----

Using the `-p` flag is very helpful for code reviews or to quickly review what changed in a commit.
You can also add various summary flags to `git log`.
For example, to see abbreviated statistics for each commit, use the `--stat` flag.

[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    change the version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
----

As you see, for each commit `git log --stat` show modified files, the number of lines in those files that were added and removed,
and how many files were changed.

Another really useful flag is `--pretty`,
which allows you to specify a prebuilt output format.
Several prebuilt formats are available.
The `oneline` format puts each commit on a single line, which is useful when looking at a lot of commits.
In addition, the `short`, `full`, and `fuller` formats vary in how much
information they show.

[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 change the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
----

The most interesting format is `format`, which allows you to create a custom output format.
This is especially useful when you're generating output for machine parsing. Since you specify the format explicitly,
you should know how to parse it.(((log formatting)))

[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit
----

Here are some of the more useful `format` options.

[[pretty_format]]
.Useful specifiers for `git log --pretty=format`
[cols="1,4",options="header"]
|================================
| Specifier | Description of Output
| `%H`      | Commit hash
| `%h`      | Abbreviated commit hash
| `%T`      | Tree hash
| `%t`      | Abbreviated tree hash
| `%P`      | Parent hashes
| `%p`      | Abbreviated parent hashes
| `%an`     | Author name
| `%ae`     | Author email
| `%ad`     | Author date (format respects the `--date=option`)
| `%ar`     | Author date, relative
| `%cn`     | Committer name
| `%ce`     | Committer email
| `%cd`     | Committer date
| `%cr`     | Committer date, relative
| `%s`      | Subject
|================================

You may be wondering what the difference is between _author_ and _committer_.
The author is the person who originally created the change, whereas the committer is the person who actually committed it.
So, if you send in a patch to a project and one of the project members applies the patch, both of you get
credit -- you as the author, and the project member as the committer.
We cover this distinction in more detail in <<ch05-distributed-git#ch05-distributed-git>>.

The `oneline` and `format` flags are particularly useful with the `--graph` flag to `git log`.
This adds a nice little ASCII graph showing your branch and merge history.

[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 Ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of https://github.com/dustin/grit.git
|\
| * 420eac9 Added a method for getting the current branch
* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch 'defunkt' into local
----

This type of output becomes more interesting when we cover branching and merging in the next chapter.

Those are only some simple output-formatting flags for `git log` -- there are many more.
<<log_options>> lists the flags we've covered so far, as well as some other useful common flags, along with how they change the output of `git log`.

[[log_options]]
.Common options to `git log`
[cols="1,4",options="header"]
|================================
| Option            | Description
| `-p`              | Show the patch introduced with each commit.
| `--stat`          | Show statistics for files modified in each commit.
| `--shortstat`     | Display only the changed/insertions/deletions line from the `--stat` command.
| `--name-only`     | Show the list of files modified after the commit information.
| `--name-status`   | Show the list of files affected with added/modified/deleted information as well.
| `--abbrev-commit` | Show only the first few characters of the SHA-1 checksum instead of all 40.
| `--relative-date` | Display the date in a relative format (for example, "`2 weeks ago`") instead of using the full date format.
| `--graph`         | Display an ASCII graph of the branch and merge history beside the log output.
| `--pretty`        | Show commits in an alternate format. Option values include `oneline`, `short`, `full`, `fuller`, and `format` (where you specify your own format).
| `--oneline`       | Shorthand for `--pretty=oneline --abbrev-commit` used together.
|================================

==== Limiting Log Output

In addition to output formatting flags, `git log` takes a number of useful output limiting flags -- that is, flags that let you select a subset of commits.
You've seen one such flag already -- the `-2` flag, which shows only the last two commits.
In fact, you can use `-<n>`, where `n` is any positive integer, to show the last `n` commits.
You're unlikely to use this option often, because `git log` by default pipes all output through a pager so you see only one page of output at a time.

The time selection flags, `--since` and `--until`, can be very useful.
For example, this command shows a list of commits made in the last two weeks.

[source,console]
----
$ git log --since=2.weeks
----

This flag works with lots of date and time formats -- you can specify a specific date like `"2008-01-15"`, or a relative date such as `"2 years 1 day 3 minutes ago"`.

You can also filter the output to only show commits that match some search criteria.
The `--author` flag selects a specific author, and the `--grep` flag searches for keywords in the commit messages.

[NOTE]
====
You can specify both the `--author` and `--grep` flags more than once, which
limits the commit output to commits that match _any_ of the `--author` patterns and _any_
of the `--grep` patterns. However, adding the `--all-match` flag further limits the output to
just those commits that match _all_ `--grep` patterns.
====

Another really helpful filter is the `-S` flag which takes a string and only shows the commits
that contain a change that added or removed that string. For instance, to find the last commit
that added or removed a reference to a specific function, run

[source,console]
----
$ git log -S function_name
----

The last really useful flag includes a path on the `git log` command line as a filter.
Specifying a directory or file name limits the log output to commits that introduced a change to a file in or
under that directory, or to the specified file.
This is always the last argument, and is preceded by double dashes (`--`) to separate paths from flags.

[source,console]
----
$ git log -- path/to/file
----

In <<limit_options>> we list these and a few other common flags.

[[limit_options]]
.Options to limit the output of `git log`
[cols="2,4",options="header"]
|================================
| Option                | Description
| `-<n>`                | Show only the last n commits.
| `--since`, `--after`  | Limit the commits to those made after the specified date.
| `--until`, `--before` | Limit the commits to those made before the specified date.
| `--author`            | Only show commits in which the author entry matches the specified string.
| `--committer`         | Only show commits in which the committer entry matches the specified string.
| `--grep`              | Only show commits with a commit message containing the string.
| `-S`                  | Only show commits adding or removing code matching the string.
|================================

For example, to see the commits by Junio Hamano that modified test files in the Git source code
in the month of October 2008 that weren't merge commits, run(((log filtering)))

[source,console]
----
$ git log --pretty="%h - %s" --author='Junio C Hamano' --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
----

Of the nearly 40,000 commits in the Git source code history, this command shows the 6 that match those criteria.

[TIP]
.Preventing the display of merge commits
====
Depending on the workflow used in your repository, it's possible that a sizable percentage of the commits in your log history are just merge commits, which typically aren't very informative.
To prevent the display of merge commits cluttering up your log history, simply add the `log` option `--no-merges`.
====
