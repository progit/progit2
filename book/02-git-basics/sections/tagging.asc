[[_git_tagging]]
=== Tagging

(((tags)))
Like most VCSs, Git can assign a label, or `tag`, to specific commits.
Typically people do this to mark releases (v1.0, and so on).
In this section, you learn how to list existing tags, how to create and delete tags,
and what the different types of tags are.

==== Listing Your Tags

Listing the tags in a Git repository is simple.
Just run `git tag`.(((git commands, tag)))

[source,console]
----
$ git tag
v1.0
v2.0
----

This lists the tags in alphabetical order.
The order in which they're displayed isn't important.

You can also search for tags containing a particular string pattern.
The Git source repo, for instance, contains more than 500 tags.
If you're interested only in looking at the 1.8.5 series, run

[source,console]
----
$ git tag -l "v1.8.5*"
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
----

[NOTE]
====
Running `git tag` produces the entire list of tags. `-l` or `--list` is optional.
If, however, you're supplying a wildcard pattern to match tag names, `-l` or `--list` is mandatory.

====

==== Creating Tags

Git supports two types of tags: _lightweight_ and _annotated_.

A lightweight tag simply points to a specific commit.

An annotated tag, however, is stored almost like a file that's been committed in a Git repository.
It also points to a specific commit, but it's also checksummed, contains the name
and email address of the tag creator, creation date, tagging message, and can be signed
and verified with GNU Privacy Guard (GPG).
It's generally recommended that you create annotated tags to record all this information, but if you
don't need all that information, lightweight tags are fine.

[[_annotated_tags]]
==== Annotated Tags

(((tags, annotated)))
Creating an annotated tag in Git is simple.
Run `git tag -a`.(((git commands, tag)))

[source,console]
----
$ git tag -a v1.4 -m "my version 1.4"
$ git tag
v0.1
v1.3
v1.4
----

The `-m` flag specifies a message that's stored with the tag.
If you don't specify a message, Git launches your text editor for you to enter
the message.

You see the tag information along with the commit that was tagged by running `git show`.

[source,console]
----
$ git show v1.4
tag v1.4
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    Change version number
----

You see who made the tag, the date the commit was tagged, the annotation message, and the commit information.

==== Lightweight Tags

(((tags, lightweight)))
Another way to tag commits is with a lightweight tag.
This is basically a pointer to a commit -- no other information is kept.
To create a lightweight tag, don't supply the `-a`, `-s`, or `-m` flags.

[source,console]
----
$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
----

This time, when you run `git show`, you don't see the extra tag information.(((git commands, show)))
You just see the commit.

[source,console]
----
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    Change version number
----

==== Tagging Later

You can also tag commits that you've already made.
Suppose your commit history looks like

[source,console]
----
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 Create write support
0d52aaab4479697da7686c15f77a3d64d9165190 One more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc Add commit function
4682c3261057305bdd616e23b64b0857d832627b Add todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a Create write support
9fceb02d0ae598e95dc970b74767f19372d61af8 Update rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc Commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a Update readme
----

Now, suppose you forgot to tag the project at v1.2, which was at the "`Update rakefile`" commit.
You can add the tag after the fact.
To tag that commit, specify the commit ID (or part of it) at the end of the command.

[source,console]
----
$ git tag -a v1.2 9fceb02
----

You see that you've tagged the commit.(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon@gee-mail.com>
Date:   Sun Apr 27 20:43:35 2008 -0700

    Update rakefile
...
----

[[_sharing_tags]]
==== Sharing Tags

By default, `git push` doesn't transfer tags to remote servers.(((git commands, push)))
You have to explicitly make this happen after you've created a tag.
You do this just like pushing to remotes -- run `git push origin [tagname]`.

[source,console]
----
$ git push origin v1.5
Counting objects: 14, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -> v1.5
----

If you have a lot of tags that you want to push all at once, run `git push --tags`.
This transfers all the tags that weren't already there to the remote server.

[source,console]
----
$ git push origin --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.4 -> v1.4
 * [new tag]         v1.4-lw -> v1.4-lw
----

Now, when someone else clones or pulls from your repository, they get all your tags as well.

[NOTE]
.`git push` pushes both types of tags
====
Pushing tags by running `git push <remote> --tags` doesn't distinguish between lightweight and annotated tags.
There's no easy way to select just one type to push.
====

==== Deleting Tags

To delete a tag in your local repository, run `git tag -d <tagname>`.
For example, we could remove our lightweight tag above by running

[source,console]
----
$ git tag -d v1.4-lw
Deleted tag 'v1.4-lw' (was e7d5add)
----

Note that this doesn't remove the tag from any remote servers.
There are two ways to delete a tag from a remote server.

The first variation is `git push <remote> :refs/tags/<tagname>`:

[source,console]
----
$ git push origin :refs/tags/v1.4-lw
To /git@github.com:schacon/simplegit.git
 - [deleted]         v1.4-lw
----

This means that the null value before the colon is being pushed to the remote tag name,
which deletes the tag.

The second (and more intuitive) way to delete a remote tag is by running

[source,console]
----
$ git push origin --delete <tagname>
----

==== Checking out Tags

To view the versions of files a tag is pointing to, run `git checkout` on that tag,
although this puts your repository in `detached HEAD` state.
We explain what this means later in this book.

[source,console]
----
$ git checkout v2.0.0
Note: switching to 'v2.0.0'.
----

Your repository is in 'detached HEAD' state. You can look around, make experimental
changes, and commit them. You can discard any commits you make in this
state without impacting any branches by performing another checkout.

To create a new branch to retain commits you create, you may
do so now or later by using the `-c` flag to `git switch`.

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting the config variable advice.detachedHead to false.

[source,console]
----
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
----

If you do this and then commit, `version2` is slightly different than your `v2.0.0` tag since `version2`
moves forward with new changes, so do be careful.
