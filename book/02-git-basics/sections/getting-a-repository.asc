[[_getting_a_repo]]
=== Getting a Git Repository

There are two main ways to create a Git repository.
The first turns an existing project not currently under version control into a Git repository.
The second copies, or clones, an existing Git repository into a new location.

==== Initializing a Repository in an Existing Directory

To put an existing project under Git control, change directory to the project's top-level directory and run

[source,console]
----
$ git init
----

This creates a new subdirectory named `.git` that contains an empty Git repository.
At this point, nothing in your project is managed by Git.
See <<ch10-git-internals#ch10-git-internals>> for more information about exactly what files are contained in the `.git` directory you just created.(((git commands, init)))

Next, tell Git to manage, or `track`, the files in your project, and then make an initial commit,
which copies the tracked files into the Git repository.
Do this by running `git add` to specify the files you want to track, followed by `git commit`.

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'Initial project version'
----

We'll go over what these commands do in just a minute.
At this point, you have a Git repository, tracked files, and an initial commit.

[[_git_cloning]]
==== Cloning an Existing Repository

To create a local copy of an existing Git repository that exists on another computer -- for example,
a project on GitHub you'd like to contribute to -- run `git clone`.
If you're familiar with other VCSs such as Subversion, notice that the subcommand is `clone` and not `checkout`.
This is an important distinction -- instead of checking out just a working copy, you receive a
nearly complete clone of the remote repository.
Every version of every file for the history of the project is copied by default.
In fact, if the remote server's disk gets corrupted, you can often use a clone to get the server back
to the state it was in when the clone was done
(see <<ch04-git-on-the-server#_getting_git_on_a_server>> for more details).

Clone a repository by running `git clone [url]`.(((git commands, clone)))
For example, to clone the library called libgit2, run

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

This creates a subdirectory named `libgit2` that itself contains a `.git` subdirectory, pulls down
the content of the `libgit2` repository, and populates the `libgit2` subdirectory with the latest
version of `libgit2`.

To clone the repository into a directory named something other than `libgit2`, specify the directory
name as the next command-line argument.

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

This does the same thing but puts the repository in the `mylibgit` directory.

Git supports a number of transfer protocols.
The previous example uses the `https://` protocol when transferring the repository,
but you may also use `git://` or `user@server:`, which use the SSH protocol.
<<ch04-git-on-the-server#_getting_git_on_a_server>> introduces all of the available transfer protocols along
with their pros and cons.
