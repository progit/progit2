=== Recording Changes to the Repository

At this point, you have an actual Git repository, and a checkout or _working copy_ of all of its files.

Remember that each file in your working directory can be in one of two states: _tracked_ or _untracked_.
Tracked files are files in which Git looks for changes. A file becomes tracked when you specify its
name in a `git add` command.
A tracked file can further be _unmodified_, _modified_, or _staged_.

Untracked files are everything else -- any files in your working directory that haven't been put under Git control.
When you first clone a repository, all files in the working directory are tracked and unmodified.

As you edit files, Git sees them as modified, because you've changed them since your last commit or since you cloned
the repository they came from.

.The lifecycle of the status of your files
image::images/lifecycle.png[The lifecycle of the status of your files]

[[_checking_status]]
==== Checking the Status of Your Files

The command that shows the state files are in is `git status`.(((git commands, status)))
If you run this command right after running `git clone`, you see something like

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working tree clean
----

Ignore the line showing the branch you're on for now (we talk a lot more
about branches later in <<ch03-git-branching#ch03-git-branching>>).

Git sees that you have a clean working directory. In other words, there are no untracked, modified, or staged files.

[NOTE]
====
GitHub changed the default branch name from `master` to `main` in mid-2020, and other Git hosting sites followed suit.
So you may find that the default branch name in some newly created repositories is `main` and not `master`.
In addition, the default branch name can be changed (as you have seen in <<ch01-getting-started#_new_default_branch>>), so you may see a different name for the default branch.

However, Git itself still uses `master` as the default, so we use it throughout the book.
====

Let's say you create a new file called README in your project.
If you then run `git status` you see that README is untracked.

[source,console]
----
$ echo 'My Project' > README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
  (use "git add <file>..." to include in what will be committed)

    README

nothing added to commit but untracked files present (use "git add" to track)
----

You see that `README` file is untracked, because it appears in the `Untracked files` section of the output.
Again, untracked means that the file isn't being managed by Git so Git doesn't notice any changes to it.
Only tracked files are included in commits.

One reason Git requires files to be explicitly tracked
is so you don't accidentally commit binary files or other recreatable files.
You do want to start tracking README, so let's add it.

[[_tracking_files]]
==== Tracking New Files

To begin tracking a file, run `git add`.(((git commands, add)))
For example, to track README, run

[source,console]
----
$ git add README
----

If you run `git status` again, you see that README is now tracked and ready to be committed.

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)

    new file:   README

----

You see that README is ready to be committed because it's in the `Changes to be committed` section.
If you commit at this point, the version of the file that existed when you ran `git add` is committed.
If you make any changes to README after you run `git add`, those changes aren't committed unless you
run `git add` again.
This is important to remember. If you want the latest changes to be committed, run `git add` after making the changes.

`git add` can optionally take a directory path name, in which case all the files in that directory and
all its subdirectories are added, recursively.

==== Staging Modified Files

You might have noticed the word `staged` in the output of `git status`.
We now explain what this means.

Let's change a file that's already being tracked.
If you change a tracked file called `CONTRIBUTING.md` and then run `git status` again, you see

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

`CONTRIBUTING.md` appears in a section called `Changes not staged for commit`.
This means that a tracked file has been modified but
the new version isn't in the location where files are copied from when you do a commit.
This location is called the `staging area`. `git add` copies files from the working directory
to the staging area.

To stage `CONTRIBUTING.md`, run `git add`. This is a multipurpose command -- it begins tracking
new files and stages modified files.
After running `git add`, run `git status` again.

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

----

Both files are staged and will go into your next commit.
At this point, suppose you remember one little change that you want to make to `CONTRIBUTING.md`
before committing it. After making that change, you might think you're ready to commit.
However, running `git status` one more time shows

[source,console]
----
$ vim CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

What the heck?

Now `CONTRIBUTING.md` is shown as both staged _and_ unstaged.  How is that possible?
It turns out that when you ran `git add CONTRIBUTING.md` to stage `CONTRIBUTING.md`,
Git copied the current content of `CONTRIBUTING.md` to the staging area.
When you commit, the version in the staging area is what goes into the commit,
not the version in your working directory.
In other words, if you modify a file after running `git add`, you have to run it again
to stage the latest version of the file so that that version goes into the next commit.


[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md
----

==== Short Status

Although `git status` output is pretty comprehensive, it's also quite verbose.
If you run `git status -s` or `git status --short` you see a far more simplified output.

[source,console]
----
$ git status -s
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
----

New files that aren't tracked have `??` in front of them, new files that have been added to the staging
area have `A`, modified files have `M`, and so on.
There are two columns in the output -- the left-hand column indicates the status of the staging
area and the right-hand column indicates the status of the working directory.
So, in the output above, `README` is modified in the working directory but not yet staged,
while `lib/simplegit.rb` is modified and staged.
`Rakefile` was modified, staged, and then modified again, so there are changes to it that are both
staged and unstaged.

[[_ignoring]]
==== Ignoring Files

There are often files that you don't want Git to ever add or even show as being untracked.
These are generally automatically generated files, such as log files or files produced by your build system.
In such cases, create a file named `.gitignore` in your project's root
directory that contains patterns showing the filenames to ignore.(((ignoring files)))

Here's an example `.gitignore` file.

[source,console]
----
$ cat .gitignore
*.[oa]
*~
----

The first line tells Git to ignore any files ending in `.o` or `.a` -- object or archive files that might be created
when you build your code.
The second line tells Git to ignore all files whose name ends with a tilde (`~`), which is used by many text editors for temporary files.
You may also want to ignore `.log` and `.tmp` files, automatically generated documentation, and so on.
Setting up a `.gitignore` file before you get going is generally a good idea so you don't accidentally commit files that you really don't want in your Git repository.

The rules for the patterns in `.gitignore` are

* Blank lines or lines starting with `#` are ignored.
* Standard glob patterns work, and will be applied recursively throughout the entire working tree.
* Start patterns with a forward slash (`/`) to avoid recursivity.
* End patterns with a forward slash (`/`) to specify a directory.
* Negate a pattern by starting it with an exclamation point (`!`).

Glob patterns are like the simplified regular expressions that shells use.
An asterisk (`\*`) matches zero or more characters; `[abc]` matches any character inside the brackets (in this case a, b, or c); a question mark (`?`) matches any single character; and brackets enclosing characters separated by a hyphen (`[0-9]`) match any
character in the range shown
(in this case `0` through `9`, inclusive).

You can also use two asterisks to match nested directories; `a/**/z` matches `a/z`, `a/b/z`, `a/b/c/z`, and so on.

Here's another example `.gitignore` file:

[source]
----
# ignore all .a files
*.a

# but do track lib.a, even though you're ignoring .a files above
!lib.a

# only ignore the TODO file in the current directory, not subdir/TODO
/TODO

# ignore all files in any directory named build
build/

# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

# ignore all .pdf files in the doc/ directory and any of its subdirectories
doc/**/*.pdf
----

[TIP]
====
GitHub maintains a fairly comprehensive list of good `.gitignore` file examples for dozens of projects and languages at https://github.com/github/gitignore[^].
====

[NOTE]
====
A repository might have a single `.gitignore` file in its root directory, which applies recursively to the entire repository.
However, it's also possible to have additional `.gitignore` files in subdirectories.
The rules in these nested `.gitignore` files apply only to the files under the directory where the `.gitignore` files are located.

The Linux kernel source repository has 206 `.gitignore` files, as of this writing.

====

[[_git_diff_staged]]
==== Viewing Your Staged and Unstaged Changes

If the output of `git status` is too vague -- you want to know exactly what changed, not just which files were changed -- run `git diff`.(((git commands, diff)))
We cover `git diff` in more detail later, but you probably use it most often to answer the following
two questions: What have I changed but not yet staged, and what have I changed that I'm about to commit?
Although `git status` answers those questions very generally by showing the names of files that have changed,
`git diff` shows the exactly what changed.


Let's say you modify and stage `README` again and then edit the `CONTRIBUTING.md` file without staging it.
If you run `git status`, you once again see

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

To see what you've changed but not yet staged, run `git diff` with no other arguments.

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

`git diff` compares what's in your working directory with what's in the staging area.
The result shows the changes you've made that you haven't yet staged.

To see the differences between what you've staged and what's been committed already, run `git diff --staged`.

[source,console]
----
$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project
----

It's important to note that `git diff` with no flags doesn't show all changes made since your last commit -- only changes that are still unstaged.
This can be confusing, because if you've staged all of your changes, `git diff` shows nothing.

For another example, if you stage `CONTRIBUTING.md` and then modify it, `git status` shows that there's both
a staged and an unstaged file.

[source,console]
----
$ git add CONTRIBUTING.md
$ echo '# test line' >> CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Now run `git diff` to see the unstaged changes -- that is the changes between
what's in the working directory and what's in the staging area.

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the
 ## Starter Projects

 See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).
+# test line
----

And run `git diff --cached` to see the staged changes -- that is the changes
between what's in the cache and what's been committed (remember `--staged` and `--cached` are synonyms).

[source,console]
----
$ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

[NOTE]
.Git Diff using an External Tool
====
We continue to run `git diff` in various ways throughout the rest of the book.
However, Git also allows using other diff viewing programs.
If you run `git difftool` instead of `git diff`, you can view any of these diffs using programs like
emerge, vimdiff, and more,
including commercial products. Run `git difftool --tool-help` to see what's available on your system.
====

[[_committing_changes]]
==== Committing Your Changes

Now commit your staged changes.
Remember that anything in your working directory that's still unstaged -- any files you've created or
modified that you haven't run `git add` on since you edited them -- don't go into this commit.
They remain as modified files.
Let's say that the last time you ran `git status`, you saw that everything was staged, so you're ready
to commit your changes.(((git commands, status)))
The simplest way to commit is to run `git commit`.(((git commands, commit)))

[source,console]
----
$ git commit
----

Doing so launches your text editor of choice.

[NOTE]
====
This choice is set by your `$EDITOR` environment variable -- usually `vim` or `emacs`, although it can be
anything you want by running `git config --global core.editor`, as you saw in <<_getting_started>>).(((editor, changing default)))(((git commands, config))

====

You see the following text (this example is a `vim` screen):

[source]
----

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Your branch is up-to-date with 'origin/master'.
#
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C
----

By default, the editor buffer contains the commented-out output of `git status`.
You can remove these comments and enter your commit message, or you can leave them in to help you remember what
you're committing.

[NOTE]
====
For an even more explicit reminder of what you've modified, run `git commit -v`.
This also puts the diff of your changes in the editor buffer so you can see exactly what you're committing.)
When you exit the editor, Git creates the commit with the message you entered (the comments and diff are stripped out).
====

Or, include your commit message on the `git commit` command line by specifying the message after the `-m` flag.

[source,console]
----
$ git commit -m "Story 182: fix benchmarks for speed"
[master 463dc4f] Story 182: fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README
----

Now you've created your first commit!
You can see which branch you committed to (`master`),
the commit's SHA-1 checksum (`463dc4f`), how many files were changed, and statistics about how many lines were added and removed.

Remember that the commit only saves what you staged.
Nothing in your working directory is commmitted or changed.
Every time you make a commit, you're recording a snapshot of what's in the staging area.

==== Skipping the Staging Area

(((staging area, skipping)))

In simple projects, having to run `git add` to first stage the files you want to commit can get in the way.
To skip this step, Git provides a simple shortcut.
Adding the `-a` flag to `git commit` makes Git automatically stage every modified tracked file
before making the commit, letting you skip running `git add`.

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -a -m 'Add new benchmarks'
[master 83e38c7] Add new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-)
----

Notice how you didn't have to run `git add CONTRIBUTING.md` here before you commit.
But be careful you don't accidently commit files that shouldn't be committed.

[[_removing_files]]
==== Removing Files

(((files, removing)))
Removing a file from Git can mean several things. Probably the most common is
to remove the file from a commit. To do this,
remove the file from the staging area by running `git rm`, and then commit.
This also removes the file from your working directory so you don't see it as an untracked file.

[NOTE]
.Removing Files Containing Sensitive Data
====
In keeping with Git's philosophy of (almost) never removing anything from a
repository, running `git rm`
doesn't completely remove the file from the repository.
If you accidently commit a file containing sensitive data that you don't want
someone else to see if they clone your repository or otherwise see the files in
`.git`, you have to use a different method.
====

If you simply remove the file from your working directory, it shows up under the `Changes not staged for commit` section in your `git status` output.

[source,console]
----
$ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    PROJECTS.md

no changes added to commit (use "git add" and/or "git commit -a")
----

Then, if you run `git rm`, the file is removed from the staging area.

[source,console]
----
$ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    deleted:    PROJECTS.md
----

The file isn't included in your next commit, because it's no longer in the staging area.
If you modified the file or you've staged it already, you must force the removal with the `-f` flag.
This is a safety feature to prevent you from accidentally removing content that hasn't yet 
been committed and that can't be recovered from Git.

Perhaps you forgot to add something to your `.gitignore` file and accidentally staged a large log
file or a bunch of archive files. You do want to keep the files in your working directory but don't want
them staged or committed.

To do this, run

[source,console]
----
$ git rm --cached output.log
----

Let's say you accidently removed a bunch of files by running `rm log/\*.log` when you
really meant to run `git rm log/*.log`. At this point you can't run `git rm
log/\*.log` because the shell doesn't find any files matching the pattern `log/*.log`
because the files that used to match this pattern were just deleted.
However, Git itself can also do filename expansion against what's in the repository
if you include file-glob patterns on the `git rm` command line.

You can pass files, directories, and file-glob patterns to the `git rm` command.
That means you can do things such as:

[source,console]
----
$ git rm log/\*.log
----

Note the backslash (`\`) in front of the `*`.
This is necessary because you want Git to do filename expansion rather than the shell.
This command removes all files that have the `.log` extension in the `log/` directory.
Or, you can run something like

[source,console]
----
$ git rm \*~
----

This command removes all files whose names end with a `~`.

[[_git_mv]]
==== Moving Files

(((files, moving)))
Unlike many other VCSs, Git doesn't explicitly track file moving or renaming.
(These are basically the same operation.)
If you move a file in Git, Git doesn't store any metadata saying this happened.
However, Git is pretty smart about figuring it out after the fact -- we deal with detecting file moving a bit later.

Thus it's a bit confusing that Git has a `git mv` subcommand.
To move a file in Git, run

[source,console]
----
$ git mv file_from file_to
----

In fact, if you run something like this and look at the output of `git status`, you notice that Git sees a renamed file.

[source,console]
----
$ git mv README.md README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
----

However, this is equivalent to running

[source,console]
----
$ mv README.md README
$ git rm README.md
$ git add README
----

Git figures out that a rename occurred, so it doesn't matter if you rename a file as above or with `git mv`.
The only real difference is that `git mv` is one command instead of three -- it's more convenient.
More importantly, you can use any tool you like to rename a file, and run `git rm`
and `git add` later, before committing.
