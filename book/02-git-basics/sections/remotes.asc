[[_remote_repos]]
=== Working with Remotes

To collaborate with other people on projects managed by Git, you need to know how to access remote repositories,
called simply `remotes`, which are versions of the project in Git repositories located on remote computers.
Collaborating with others involves managing these remotes, and pushing to and pulling from them
when you need to share work. This requires knowing how to add remotes, remove remotes that no longer exist,
manage remote branches, and more. In this section, we cover some of these skills.


[NOTE]
.Remote repositories can be on your local machine.
====
It's entirely possible that you can be working with a `remote` repository that's, in fact, on your local machine.
The word `remote` doesn't necessarily mean that the repository is actually on some other computer.
Working with such a remote still involves the same pushing, pulling, and fetching operations as with any remote.
====

==== Showing Your Remotes

Run `git remote` to see the remote repositories you're working with.(((git commands, remote)))
What you see will be an alias, called a `shortname`, for each remote.
If you've cloned a repository, you should at least see `origin` -- that's the default shortname Git
gives to the repository you cloned from.

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin
----

You can also add the `-v` flag, which shows both the shortname and URL of all remotes associated
with the current repository.

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

For example, a repository with multiple remotes for working with multiple collaborators
might look something like

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

Remotes make it easier to reference your collaborators' repositories.

Notice that these remotes use a variety of access protocols, which we cover in more detail in <<ch04-git-on-the-server#_getting_git_on_a_server>>.

==== Adding Remote Repositories

We've shown how `git clone` implicitly adds the `origin` remote.
To add a remote explicitly(((git commands, remote)))
run `git remote add <shortname> <url>`.
This adds a new remote repository and a shortname.

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

Now when you reference a remote you can use the shortname `pb` on the command line instead of the whole URL.
The next section shows an example of this.

[[_fetching_and_pulling]]
==== Fetching and Pulling from Remotes

To get data from a remote repository, run(((git commands, fetch)))

[source,console]
----
$ git fetch <remote>
----

For example, to fetch the content in the `pb` repository that you don't yet have in your repository,
run `git fetch pb`.

[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

When you clone a remote repository, the remote repository's name is assigned the shortname `origin`.
So, `git fetch origin` fetches any new work added to `origin` since you cloned (or last fetched from) it.
It's important to note that `git fetch` puts the data from the remote repository
into its own location in your repository -- the data isn't automatically merged with any of your existing work.
You have to merge it manually when you're ready.
Or, run `git pull` to automatically fetch and then merge any new content from the remote
repository into your local repository.(((git commands, pull)))

Paul's `master` branch is now accessible locally as `pb/master` -- you can merge it into one of your branches, or you can create a local branch to inspect it.
We go over what branches are and how to use them in much more detail in <<ch03-git-branching#ch03-git-branching>>.

[[_pushing_remotes]]
==== Pushing to Your Remotes

When your project is at a point you want to share, push it to the
repositories of the people you're working with.
The command for this is simple: `git push [remote-name] [branch-name]`.(((git commands, push)))
(<<ch03-git-branching#ch03-git-branching>>, the next chapter, describes what a branch is.)
To push your commits to the `origin` remote, run

[source,console]
----
$ git push origin master
----

This command works only if you have write access to the repository you're pushing to,
and if nobody has pushed since you cloned the repository.
If you and someone else clone at the same time and they push before you push, your push is rejected.
This is because you might have made changes that conflict with their changes.
You have to fetch their work first and incorporate it into your work before you're allowed to push.
See <<ch03-git-branching#ch03-git-branching>> for more detailed information on how to push to remote servers.

[[_inspecting_remote]]
==== Inspecting a Remote

To see more information about a particular remote, run `git remote show [remote-name]`.(((git commands, remote)))
If you run this command with a shortname, such as `origin`, you see something like

[source,console]
----
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
----

It shows the URL for the remote.
It also tells you that if you're on the `master` branch and you run `git pull`, Git will automatically merge the remote's `master` branch into the local one after it has been fetched.

This is a simple example.
When you're using Git with more complicated configurations, you may see much more information from running `git remote show`.

[source,console]
----
$ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)
----

Much of this information won't make sense until you've learned about branches.

==== Renaming and Removing Remotes

Run `git remote rename` to change a remote's shortname.(((git commands, remote)))
For instance, to rename `pb` to `paul`, run

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

To remove a remote for some reason -- perhaps the server moved or a contributor
isn't contributing anymore -- run `git remote remove`.

[source,console]
----
$ git remote remove paul
$ git remote
origin
----
