=== Graphical Interfaces

(((GUIs)))(((Graphical tools)))
Git's native environment is in the terminal.
New features show up there first, and only at the command line is the full power of Git completely at your disposal.
But a terminal interface isn't the best choice for all tasks. Sometimes a graphical representation is what you need,
and some users are much more comfortable with a point-and-click interface.

It's important to note that different interfaces are tailored for different workflows.
Some Git clients expose only a carefully curated subset of Git in order to support the creator's favorite workflow.
When viewed in this light, none of these tools can be called _better_ than any of the others. They're simply
more fit for their intended purpose. Also note that there's nothing these graphical clients can do that
command-line clients can't. The command-line is still where you have the most power and control.

==== `gitk` and `git-gui`

(((git commands, gitk)))(((git commands, gui)))(((gitk)))
When you install Git, you also get two graphical tools, `gitk` and `git-gui`.

`gitk` is a graphical history viewer.
Think of it like a powerful GUI shell over `git log` and `git grep`.
This is the tool to use when you're trying to find something that happened in the past, or visualize your project's history.

`gitk` is easy to invoke from the command-line. Just `cd` to the top of a Git repository, and run

[source,console]
----
$ gitk [git log options]
----

`gitk` accepts many command-line flags, most of which are passed through to the underlying `git log` command.
Probably one of the most useful is the `--all` flag, which tells `gitk` to show commits reachable from
_any_ ref, not just `HEAD`. `gitk`'s interface looks like

.The `gitk` history viewer
image::images/gitk.png[The `gitk` history viewer]

On the top is something that looks a bit like the output of `git log --graph`. Each dot represents a commit,
the lines represent parent relationships, and refs are shown as colored boxes.
The yellow dot represents `HEAD`, and the red dot represents changes that are yet to be committed.
At the bottom is a view of the selected commit. The comments and diffs are on the left, and a summary view
is on the right. In between is a collection of controls used for searching history.

`git-gui`, on the other hand, is primarily a tool for crafting commits.
It, too, is easy to invoke from the command line.

[source,console]
----
$ git gui
----

And it looks something like

.The `git-gui` commit tool
image::images/git-gui.png[The `git-gui` commit tool]

On the left is the index. Unstaged changes are on top, and staged changes on the bottom.
You can move entire files between the two states by clicking on their icons, or you can select a file for
viewing by clicking on its name.

At top right is the diff view, which shows the changes for the currently-selected file.
You can stage individual hunks (or individual lines) by right-clicking in this area.

At the bottom right is the message and action area. Type your message into the text box and click `Commit`
to do something similar to `git commit`. You can also choose to amend the last commit by choosing the `Amend`
radio button, which updates the `Staged Changes` area with the content of the last commit.
Then you can simply stage or unstage some changes, alter the commit message, and click `Commit` again
to replace the old commit with a new one.

`gitk` and `git-gui` are examples of task-oriented tools.
Each of them is tailored for a specific purpose (viewing history and creating commits, respectively),
and omit features not necessary for that task.

==== GitHub for macOS and Windows

(((GitHub for macOS)))(((GitHub for Windows)))
GitHub has created two workflow-oriented Git clients -- one for Windows, and one for macOS.
These clients are a good example of workflow-oriented tools. Rather than expose _all_ of Git's functionality,
they again instead focus on a curated set of commonly-used features that work well together. They look like

.GitHub for macOS
image::images/github_mac.png[GitHub for macOS]

.GitHub for Windows
image::images/github_win.png[GitHub for Windows]

They're designed to look and work very much alike, so we treat them like a single product.
We aren't doing a detailed rundown of these tools (they have their own documentation), but a quick tour of
the `changes` view (which is where you spend most of your time) is in order.

* On the left is the list of repositories the client is tracking. You can add a repository (either by cloning or attaching locally) by clicking the `+` icon at the top of this area.
* In the center is a commit-input area, where you enter a commit message, and select the files to be included.
  (On Windows, the commit history is displayed directly below this. On macOS, it's on a separate tab.)
* On the right is a diff view, which shows what's changed in your working directory, or which changes were included in the selected commit.
* The last thing to notice is the `Sync` button at the top-right, which is the primary way to interact over the network.

[NOTE]
====
You don't need a GitHub account to use these tools.
While they're designed to highlight GitHub's service and recommended workflow, they happily work with any repository, and can communicate with any Git server.
====

===== Installation

GitHub for Windows and macOS can be downloaded from https://desktop.github.com/[^].
When the applications are first run, they walk you through a first-time Git setup, such as configuring your name and email address, and both set up sane defaults for many common configuration options, such as credential caches and CRLF behavior.

Both are `evergreen` – updates are downloaded and installed in the background while the applications are open.
This helpfully includes a bundled version of Git, which means you probably won't have to worry about manually updating it again.
On Windows, the client includes a shortcut to launch PowerShell with Posh-git, which we'll talk more about later in this chapter.

The next step is to give the tool some repositories to work with.
The client shows a list of the repositories you have access to on GitHub, and can clone them in one step.
If you already have a local repository, just drag its directory from the Finder or Windows Explorer into the GitHub client window, and it's included in the list of repositories on the left.

===== Recommended Workflow

Once it's installed and configured, you can use the GitHub client for many common Git tasks.
Its intended workflow is sometimes called the `GitHub Flow.`
We cover this in more detail in <<ch06-github#ch06-github_flow>>, but the general gist is that (a) you commit to a branch,
and (b) you sync with a remote repository fairly regularly.

Branch management is one of the areas where the two tools diverge.
On macOS, there's a button at the top of the window for creating a new branch.

."`Create Branch`" button on macOS
image::images/branch_widget_mac.png[“Create Branch” button on macOS]

On Windows, this is done by typing the new branch's name in the branch-switching widget.

.Creating a branch on Windows
image::images/branch_widget_win.png[Creating a branch on Windows]

Once your branch is created, making new commits is fairly straightforward.
Make some changes in your working directory, and when you switch to the GitHub client window, you see
which files changed. Enter a commit message, select the files you'd like to include, and click `Commit`.

The main way to interact with other repositories over the network is through the `Sync` feature.
Git internally has separate operations for pushing, fetching, merging, and rebasing, but the GitHub
clients collapse all of these into one multi-step feature. Here's what happens when you click `Sync`.

. `git pull --rebase`.
  If this fails because of a merge conflict, fall back to `git pull --no-rebase`.
. `git push`.

This is the most common sequence of commands when working in this style, so squashing them into one command
saves a lot of time.

===== Summary

These tools are very well-suited for the workflow they're designed for.
Developers and non-developers alike can be collaborating on a project within minutes, and many of the best practices for this kind of workflow are baked into the tools.
However, if your workflow is different, or you want more control over how and when network operations are done, we recommend you use another client or the command line.

==== Other GUIs

There are a number of other graphical Git clients which run the gamut from specialized, single-purpose tools all the way to apps that try to expose everything Git can do.
The official Git website has a curated list of the most popular clients at https://git-scm.com/downloads/guis[^].
A more comprehensive list is available on the Git wiki site, at https://archive.kernel.org/oldwiki/git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools.html#Graphical_Interfaces[^].
