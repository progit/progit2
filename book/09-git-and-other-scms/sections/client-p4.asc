==== Git and Perforce

(((Interoperation with other VCSs, Perforce)))
(((Perforce)))
Perforce is a very popular VCS in corporate environments.
It's been around since 1995, which makes it the oldest VCS covered in this chapter.
As such, it was designed with the constraints of its day.
It assumes you're always connected to a single central server, and only one version of a file is kept
on your local disk. To be sure, its features and constraints are well-suited to several specific problems,
but there are lots of projects using Perforce where Git would actually work better.

There are two options if you'd like to mix Perforce and Git.
The first one we cover is the `Git Fusion` bridge from Perforce,
which lets you expose subtrees of your Perforce depot as read-write Git repositories.
The second is `git-p4`, a client-side bridge that lets you use Git as a Perforce client,
without requiring any reconfiguration of the Perforce server.

[[_p4_git_fusion]]
===== Git Fusion

(((Perforce, Git Fusion)))
Perforce provides a product called Git Fusion (available at https://www.perforce.com/manuals/git-fusion/[^]), which synchronizes a Perforce server with Git repositories.

====== Setting Up

For our examples, we use the easiest installation method, which is downloading a virtual machine
that runs the Perforce daemon and Git Fusion.
You can get the virtual machine image from http://www.perforce.com/downloads/Perforce/20-User[].
Import it into your favorite virtualization software (we use VirtualBox).

Upon first starting the machine, it asks you to customize the password for three Linux users (`root`,
`perforce`, and `git`), and provide an instance name, which is used to distinguish this installation
from others on the same network. When all that's done, you see

.The Git Fusion virtual machine boot screen.
image::images/git-fusion-boot.png[The Git Fusion virtual machine boot screen.]

Take note of the IP address that's shown here since we use it later on.
Next, create a Perforce user.
Select the `Login` option at the bottom, press enter (or SSH to the machine), and log in as `root`.
Then run the following commands to create a user:

[source,console]
----
$ p4 -p localhost:1666 -u super user -f john
$ p4 -p localhost:1666 -u john passwd
$ exit
----

The first one opens a text editor to customize the user, but you can accept the defaults by just
writing out the default and existing the editor. The second one prompts twice for a password.
That's all we need a shell for, so exit the session.

Next tell Git to not verify SSL certificates.
The Git Fusion image comes with a certificate, but it's for a domain that doesn't match your
virtual machine's IP address, so Git rejects any HTTPS connections.
If this is going to be a permanent installation, consult the Perforce Git Fusion manual
to install a different certificate. For our example purposes, certificate verification isn't
necessary.

[source,console]
----
$ export GIT_SSL_NO_VERIFY=true
----

Now test that everything is working.

[source,console]
----
$ git clone https://10.0.1.254/Talkhouse
Cloning into 'Talkhouse'...
Username for 'https://10.0.1.254': john
Password for 'https://john@10.0.1.254':
remote: Counting objects: 630, done.
remote: Compressing objects: 100% (581/581), done.
remote: Total 630 (delta 172), reused 0 (delta 0)
Receiving objects: 100% (630/630), 1.22 MiB | 0 bytes/s, done.
Resolving deltas: 100% (172/172), done.
Checking connectivity... done.
----

The virtual machine image contains a sample project that you can clone.
Here we're cloning over HTTPS, using the `john` user that we created above.
Git asks for credentials for this connection, but the credential cache allows us to skip
this step for any subsequent requests.

====== Fusion Configuration

Once Git Fusion is installed, tweak its configuration.
This is actually fairly easy to do using your favorite Perforce client.
Just map the `//.git-fusion` directory on the Perforce server into your workspace.
The file structure looks like

[source,console]
----
$ tree
.
├── objects
│   ├── repos
│   │   └── [...]
│   └── trees
│       └── [...]
│
├── p4gf_config
├── repos
│   └── Talkhouse
│       └── p4gf_config
└── users
    └── p4gf_usermap

498 directories, 287 files
----

The `objects` directory is used internally by Git Fusion to map Perforce objects to Git, and vice versa.
You don't have to mess with anything in there. There's a global `p4gf_config` file in this directory,
as well as one for each repository. These are the configuration files that determine how Git Fusion behaves.
Let's take a look at the file in the root.

[source,ini]
----
[repo-creation]
charset = utf8

[git-to-perforce]
change-owner = author
enable-git-branch-creation = yes
enable-swarm-reviews = yes
enable-git-merge-commits = yes
enable-git-submodules = yes
preflight-commit = none
ignore-author-permissions = no
read-permission-check = none
git-merge-avoidance-after-change-num = 12107

[perforce-to-git]
http-url = none
ssh-url = none

[@features]
imports = False
chunked-push = False
matrix2 = False
parallel-push = False

[authentication]
email-case-sensitivity = no
----

We don't go into what these options do, but note that this is just an INI-formatted text file,
much like Git uses for storing configuration data. This file specifies the global options,
which can then be overridden by repository-specific configuration files, like `repos/Talkhouse/p4gf_config`.
You see a `[@repo]` section with settings that are different than the global defaults.
You also see sections that look like

[source,ini]
----
[Talkhouse-master]
git-branch-name = master
view = //depot/Talkhouse/main-dev/... ...
----

This is a mapping between a Perforce branch and a Git branch.
The section can be named whatever you like, as long as the name is unique.
`git-branch-name` converts a depot path that would be cumbersome under Git to a more friendly name.
The `view` setting controls how Perforce files are mapped into the Git repository,
using the standard view mapping syntax.  More than one mapping can be specified, like in this example.

[source,ini]
----
[multi-project-mapping]
git-branch-name = master
view = //depot/project1/main/... project1/...
       //depot/project2/mainline/... project2/...
----

This way, if your normal workspace mapping includes changes in the structure of the directories, you can replicate that with a Git repository.

The last file we discuss is `users/p4gf_usermap`, which maps Perforce users to Git users.
You may not even need this. When converting from a Perforce changeset to a Git commit,
Git Fusion's default behavior is to look up the Perforce user, and use their email address and full
name for the author/committer field in Git. When converting the other way, the default is to look up
the Perforce user's email address using the address stored in the Git commit's author field,
and submit the changeset as that user (with proper permissions applied).
In most cases, this behavior works just fine, but consider the following mapping file:

[source]
----
john john@example.com "John Doe"
john johnny@appleseed.net "John Doe"
bob employeeX@example.com "Anon X. Mouse"
joe employeeY@example.com "Anon Y. Mouse"
----

Each line is of the format `<user> <email> "<full name>"`, and creates a single user mapping.
The first two lines map two distinct email addresses to the same Perforce user account.
This is useful if you've created Git commits using several different email addresses
(or you've changed email addresses), but want them to be mapped to the same Perforce user.
When creating a Git commit from a Perforce changeset, the first line matching the Perforce
user is used as the Git author.

The last two lines mask Bob and Joe's actual names and email addresses from the Git commits.
This is nice if you want to open-source an internal project, but don't want to publish
your employee directory to the entire world. Note that the email addresses and full names should be unique,
unless you want all Git commits to be attributed to a single fictional author.

====== Workflow

Perforce Git Fusion is a two-way bridge between Perforce and Git.
Let's have a look at how it feels from the Git side.
Assume we've mapped in the `Jam` project using a configuration file as shown above, which we clone like this.

[source,console]
----
$ git clone https://10.0.1.254/Jam
Cloning into 'Jam'...
Username for 'https://10.0.1.254': john
Password for 'https://john@10.0.1.254':
remote: Counting objects: 2070, done.
remote: Compressing objects: 100% (1704/1704), done.
Receiving objects: 100% (2070/2070), 1.21 MiB | 0 bytes/s, done.
remote: Total 2070 (delta 1242), reused 0 (delta 0)
Resolving deltas: 100% (1242/1242), done.
Checking connectivity... done.
$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
  remotes/origin/rel2.1
$ git log --oneline --decorate --graph --all
* 0a38c33 (origin/rel2.1) Create Jam 2.1 release branch.
| * d254865 (HEAD, origin/master, origin/HEAD, master) Upgrade to latest metrowerks on Beos -- the Intel one.
| * bd2f54a Put in fix for jam's NT handle leak.
| * c0f29e7 Fix URL in a jam doc
| * cc644ac Radstone's lynx port.
[...]
----

It may take some time the first time you do this.
What's happening is that Git Fusion is converting all the applicable changesets in the Perforce
history into Git commits. This happens locally on the server, so it's relatively fast,
but if you have a lot of history, it can still take some time.
Subsequent fetches do incremental conversions, so it feels more like Git's native speed.

As you see, our repository looks exactly like any other Git repository.
There are three branches, and Git has helpfully created a local `master` that tracks `origin/master`.
Let's do a bit of work, and create a couple of new commits.
[source,console]
----
# ...
$ git log --oneline --decorate --graph --all
* cfd46ab (HEAD, master) Add documentation for new feature
* a730d77 Whitespace
* d254865 (origin/master, origin/HEAD) Upgrade to latest metrowerks on Beos -- the Intel one.
* bd2f54a Put in fix for jam's NT handle leak.
[...]
----

We have two new commits.
Now let's check if anyone else has done anything.

[source,console]
----
$ git fetch
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 2), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://10.0.1.254/Jam
   d254865..6afeb15  master     -> origin/master
$ git log --oneline --decorate --graph --all
* 6afeb15 (origin/master, origin/HEAD) Update copyright
| * cfd46ab (HEAD, master) Add documentation for new feature
| * a730d77 Whitespace
|/
* d254865 Upgrade to latest metrowerks on Beos -- the Intel one.
* bd2f54a Put in fix for jam's NT handle leak.
[...]
----

It looks like someone has!
You wouldn't know it from this view, but the `6afeb15` commit was actually created using a Perforce client.
It just looks like another commit from Git's point of view, which is exactly the point.
Let's see how the Perforce server deals with a merge commit.

[source,console]
----
$ git merge origin/master
Auto-merging README
Merge made by the 'recursive' strategy.
 README | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git push
Counting objects: 9, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (9/9), done.
Writing objects: 100% (9/9), 917 bytes | 0 bytes/s, done.
Total 9 (delta 6), reused 0 (delta 0)
remote: Perforce: 100% (3/3) Loading commit tree into memory...
remote: Perforce: 100% (5/5) Finding child commits...
remote: Perforce: Running git fast-export...
remote: Perforce: 100% (3/3) Checking commits...
remote: Processing will continue even if connection is closed.
remote: Perforce: 100% (3/3) Copying changelists...
remote: Perforce: Submitting new Git commit objects to Perforce: 4
To https://10.0.1.254/Jam
   6afeb15..89cba2b  master -> master
----

Git thinks it worked.
Let's take a look at the history of `README` from Perforce's point of view,
using the revision graph feature of `p4v`.

.Perforce revision graph resulting from Git push
image::images/git-fusion-perforce-graph.png[Perforce revision graph resulting from Git push]

If you've never seen this view before, it may seem confusing, but it shows the same concepts as a
GUI Git history viewer. We're looking at the history of `README`, so the directory tree
at top left only shows that file as it surfaces in various branches.
At top right, we have a visual graph of how different revisions of the file are related,
and the big-picture view of this graph is at bottom right.
The rest of the view shows the detail view for the selected revision (`2` in this case).

One thing to notice is that the graph looks exactly like the one in Git's history.
Perforce didn't have a named branch to store the `1` and `2` commits, so it made an `anonymous` branch
in the `.git-fusion` directory to hold them. This also happens for named Git branches that don't
correspond to a named Perforce branch (and you can later map them to a Perforce branch using
the configuration file).

Most of this happens behind the scenes, but the end result is that one person on a team can be using Git,
another can be using Perforce, and neither of them knows about the other's choice.

====== Git-Fusion Summary

If you have (or can get) access to a Perforce server, Git Fusion is a great way to make Git
and Perforce talk to each other. There's a bit of configuration involved, but the learning curve isn't
very steep. This is one of the few sections in this chapter where cautions about using Git's full
power don't appear. That's not to say that Perforce is happy with everything you throw at it -- if you try to
rewrite history that's already been pushed, Git Fusion rejects it -- but Git Fusion tries
very hard to feel native. You can even use Git submodules (though they look strange to Perforce users),
and merge branches (they're recorded as an integration on the Perforce side).

If you can't convince your server administrator to set up Git Fusion,
there's still a way to use Git and Perforce together.

[[_git_p4_client]]
===== Git-p4

(((git commands, p4)))
`git-p4` is a two-way bridge between Git and Perforce.
It runs entirely inside your Git repository, so you don't need any kind of access to a
Perforce server (other than user credentials, of course).
`git-p4` isn't as flexible or as complete a solution as Git Fusion, but it does allow most of what you'd
want to do without being invasive to the server environment.

[NOTE]
======
You need the `p4` tool somewhere in your `PATH` to work with `git-p4`.
As of this writing, it's freely available at http://www.perforce.com/downloads/Perforce/20-User[].
======

====== Setting Up

For example purposes, we run the Perforce server from the Git Fusion virtual machine image, as shown above,
but we bypass the Git Fusion server and go directly to Perforce.

In order to run the `p4` command-line client (which `git-p4` depends on), you need to set
a couple of environment variables.

[source,console]
----
$ export P4PORT=10.0.1.254:1666
$ export P4USER=john
----

====== Getting Started

As with anything in Git, start by cloning.

[source,console]
----
$ git p4 clone //depot/www/live www-shallow
Importing from //depot/www/live into www-shallow
Initialized empty Git repository in /private/tmp/www-shallow/.git/
Doing initial import of //depot/www/live/ from revision #head into refs/remotes/p4/master
----

This creates what in Git terms is a `shallow` clone. Only the very latest Perforce revision is imported
into Git. Remember, Perforce isn't designed to make every revision available to every user.
This is enough to use Git as a Perforce client, but just barely.

Once it's finished, we have a fully-functional Git repository.

[source,console]
----
$ cd myproject
$ git log --oneline --all --graph --decorate
* 70eaf78 (HEAD, p4/master, p4/HEAD, master) Initial import of //depot/www/live/ from the state at revision #head
----

Note how there's a `p4` remote for the Perforce server, but everything else looks like a standard clone.
Actually, that's a bit misleading -- there isn't actually a remote there.

[source,console]
----
$ git remote -v
----

No remotes exist in this repository at all.
`git-p4` has created some refs to represent the state of the server, and they look like
remote refs to `git log`, but they're not managed by Git itself, and you can't push to them.

====== Workflow

Okay, let's do some work.
Let's assume you've made some progress on a very important feature, and you're ready to show it to the rest of your team.

[source,console]
----
$ git log --oneline --all --graph --decorate
* 018467c (HEAD, master) Change page title
* c0fb617 Update link
* 70eaf78 (p4/master, p4/HEAD) Initial import of //depot/www/live/ from the state at revision #head
----

We've made two new commits that we're ready to submit to the Perforce server.
Let's check if anyone else made any changes today.

[source,console]
----
$ git p4 sync
git p4 sync
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
Import destination: refs/remotes/p4/master
Importing revision 12142 (100%)
$ git log --oneline --all --graph --decorate
* 75cd059 (p4/master, p4/HEAD) Update copyright
| * 018467c (HEAD, master) Change page title
| * c0fb617 Update link
|/
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

Looks like they were, and `master` and `p4/master` have diverged.
Perforce's branching system is _nothing_ like Git's, so submitting merge commits doesn't make any sense.
`git-p4` recommends that you rebase your commits, and even comes with a shortcut for doing so.

[source,console]
----
$ git p4 rebase
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
No changes to import!
Rebasing the current branch onto remotes/p4/master
First, rewinding head to replay your work on top of it...
Applying: Update link
Applying: Change page title
 index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
----

You can probably tell from the output, but `git p4 rebase` is a shortcut for `git p4 sync`, followed by `git rebase p4/master`.
It's a bit smarter than that, especially when working with multiple branches, but this is a good approximation.

Now our history is linear again, and we're ready to contribute our changes back to Perforce.
`git p4 submit` tries to create a new Perforce revision for every Git commit between `p4/master` and `master`.
Running it drops us into our favorite editor, and the contents of the file look something like

[source,console]
----
# A Perforce Change Specification.
#
#  Change:      The change number. 'new' on a new changelist.
#  Date:        The date this specification was last modified.
#  Client:      The client on which the changelist was created.  Read-only.
#  User:        The user who created the changelist.
#  Status:      Either 'pending' or 'submitted'. Read-only.
#  Type:        Either 'public' or 'restricted'. Default is 'public'.
#  Description: Comments about the changelist.  Required.
#  Jobs:        What opened jobs are to be closed by this changelist.
#               You may delete jobs from this list.  (New changelists only.)
#  Files:       What opened files from the default changelist are to be added
#               to this changelist.  You may delete files from this list.
#               (New changelists only.)

Change:  new

Client:  john_bens-mbp_8487

User: john

Status:  new

Description:
   Update link

Files:
   //depot/www/live/index.html   # edit


######## git author ben@straub.cc does not match your p4 account.
######## Use option --preserve-user to modify authorship.
######## Variable git-p4.skipUserNameCheck hides this message.
######## everything below this line is just the diff #######
--- //depot/www/live/index.html  2014-08-31 18:26:05.000000000 0000
+++ /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/index.html   2014-08-31 18:26:05.000000000 0000
@@ -60,7 +60,7 @@
 </td>
 <td valign=top>
 Source and documentation for
-<a href="http://www.perforce.com/jam/jam.html">
+<a href="jam.html">
 Jam/MR</a>,
 a software build tool.
 </td>
----

This is mostly the same content you'd see by running `p4 submit`, except the stuff at the end,
which `git-p4` has helpfully added. `git-p4` tries to honor your Git and Perforce settings individually
when it has to provide a name for a commit or changeset, but in some cases you want to override it.
For example, if the Git commit you're importing was written by a contributor who doesn't have a
Perforce user account, you may still want the resulting changeset to look like they wrote it (and not you).

`git-p4` has helpfully imported the message from the Git commit as the content for this
Perforce changeset, so all we have to do is save and quit, twice (once for each commit).
The resulting output looks something like

[source,console]
----
$ git p4 submit
Perforce checkout for depot path //depot/www/live/ located at /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Synchronizing p4 checkout...
... - file(s) up-to-date.
Applying dbac45b Update link
//depot/www/live/index.html#4 - opened for edit
Change 12143 created with 1 open file(s).
Submitting change 12143.
Locking 1 files ...
edit //depot/www/live/index.html#5
Change 12143 submitted.
Applying 905ec6a Change page title
//depot/www/live/index.html#5 - opened for edit
Change 12144 created with 1 open file(s).
Submitting change 12144.
Locking 1 files ...
edit //depot/www/live/index.html#6
Change 12144 submitted.
All commits applied!
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
Import destination: refs/remotes/p4/master
Importing revision 12144 (100%)
Rebasing the current branch onto remotes/p4/master
First, rewinding head to replay your work on top of it...
$ git log --oneline --all --graph --decorate
* 775a46f (HEAD, p4/master, p4/HEAD, master) Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

The result is as though we just ran `git push`, which is the closest analogy to what actually did happen.

Note that during this process every Git commit is turned into a Perforce changeset.
To squash multiple commits down into a single changeset, do an interactive
rebase before running `git p4 submit`.
Also note that the SHA-1 hashes of all the commits that were submitted as changesets have changed.
This is because `git-p4` adds a line to the end of each commit it converts.

[source,console]
----
$ git log -1
commit 775a46f630d8b46535fc9983cf3ebe6b9aa53145
Author: John Doe <john@example.com>
Date:   Sun Aug 31 10:31:44 2014 -0800

    Change page title

    [git-p4: depot-paths = "//depot/www/live/": change = 12144]
----

What happens if you try to submit a merge commit?
Let's give it a try.
Here's the situation we've gotten ourselves into.

[source,console]
----
$ git log --oneline --all --graph --decorate
* 3be6fd8 (HEAD, master) Correct email address
*   1dcbf21 Merge remote-tracking branch 'p4/master'
|\
| * c4689fc (p4/master, p4/HEAD) Grammar fix
* | cbacd0a Table borders: yes please
* | b4959b6 Trademark
|/
* 775a46f Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

The Git and Perforce history diverge after `775a46f`.
The Git side has two commits, then a merge commit with the Perforce head, then another commit.
We're going to try to submit these on top of a single changeset on the Perforce side.
Let's see what would happen if we try to submit now:

[source,console]
----
$ git p4 submit -n
Perforce checkout for depot path //depot/www/live/ located at /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Would synchronize p4 checkout in /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Would apply
  b4959b6 Trademark
  cbacd0a Table borders: yes please
  3be6fd8 Correct email address
----

The `-n` flag is short for `--dry-run`, which shows what would happen if the submit command were run for real.
In this case, it looks like we'd be creating three Perforce changesets, which correspond to the three non-merge commits that don't yet exist on the Perforce server.
That sounds like exactly what we want, let's see how it turns out.

[source,console]
----
$ git p4 submit
[…]
$ git log --oneline --all --graph --decorate
* dadbd89 (HEAD, p4/master, p4/HEAD, master) Correct email address
* 1b79a80 Table borders: yes please
* 0097235 Trademark
* c4689fc Grammar fix
* 775a46f Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

Our history became linear, just as though we had rebased before submitting (which is in fact exactly
what happened). This means you're free to create, work on, throw away, and merge branches on the Git
side without fear of your history somehow becoming incompatible with Perforce.
If you can rebase a change, you can contribute it to a Perforce server.

[[_git_p4_branches]]
====== Branching

If your Perforce project has multiple branches, you're not out of luck. `git-p4` can handle that in a
way that makes it feel like Git. Let's say your Perforce depot is laid out like

[source]
----
//depot
  └── project
      ├── main
      └── dev
----

And let's say you have a `dev` branch, which has a view spec that looks like

[source]
----
//depot/project/main/... //depot/project/dev/...
----

`git-p4` can automatically detect that situation and do the right thing.

[source,console]
----
$ git p4 clone --detect-branches //depot/project@all
Importing from //depot/project@all into project
Initialized empty Git repository in /private/tmp/project/.git/
Importing revision 20 (50%)
    Importing new branch project/dev

    Resuming with change 20
Importing revision 22 (100%)
Updated branches: main dev
$ cd project; git log --oneline --all --graph --decorate
* eae77ae (HEAD, p4/master, p4/HEAD, master) main
| * 10d55fb (p4/project/dev) dev
| * a43cfae Populate //depot/project/main/... //depot/project/dev/....
|/
* 2b83451 Project init
----

Note the `@all` specifier in the depot path. That tells `git-p4` to not clone just the
latest changeset for that subtree, but all changesets that have ever touched those paths.
This is closer to Git's concept of a clone, but if you're working on a project with a long history,
it could take a while.

The `--detect-branches` flag tells `git-p4` to use Perforce's branch specs to map the branches to Git refs.
If these mappings aren't present on the Perforce server (which is a perfectly valid way to use Perforce),
you can tell `git-p4` what the branch mappings are, and you get the same result.

[source,console]
----
$ git init project
Initialized empty Git repository in /tmp/project/.git/
$ cd project
$ git config git-p4.branchList main:dev
$ git clone --detect-branches //depot/project@all .
----

Setting the `git-p4.branchList` configuration variable to `main:dev` tells `git-p4` that `main`
and `dev` are both branches, and the second is a child of the first.

If we now run `git checkout -b dev p4/project/dev` and make some commits, `git-p4` is smart
enough to target the right branch when we run `git p4 submit`.
Unfortunately, `git-p4` can't mix shallow clones and multiple branches. If you have a huge project
and want to work on more than one branch, you have to run `git p4 clone` once for each branch
you want to submit to.

For creating or integrating branches, you have to use a Perforce client.
`git-p4` can only sync and submit to existing branches, and it can only do it one linear changeset at a time.
If you merge two branches in Git and try to submit the new changeset, all that's recorded
is a bunch of file changes. The metadata about which branches are involved in the integration are lost.

===== Git and Perforce Summary

`git-p4` makes it possible to use a Git workflow with a Perforce server, and it's pretty good.
However, it's important to remember that Perforce is in charge of the source,
and you're only using Git to work locally. Just be really careful about sharing Git commits.
If you have a remote that other people use, don't push any commits that haven't already been
submitted to the Perforce server.

Git Fusion makes using Git a first-class version-control
client for a Perforce server, if you can convince the server administrator to install it.
