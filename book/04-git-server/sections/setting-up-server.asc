[[_setting_up_server]]
=== Setting Up the Server

Let's walk through setting up SSH access to the server.
This example uses the `authorized_keys` method for authenticating users.
We also assume you're running a standard Linux distribution like Ubuntu.

First, login to the server, become root, create a user and a `.ssh` directory for that user.

[NOTE]
====
A good deal of what is described here can be automated by running `ssh-copy-id`,
rather than manually copying and installing public keys.
====

[source,console]
----
$ sudo adduser git
$ su git
$ cd
$ mkdir .ssh && chmod 700 .ssh
$ touch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys
----

John, Josie, and Jessica are your developers. Next, add their SSH public keys
to the `git` user's `authorized_keys` file.
Let's assume you have their public keys stored in files in `/tmp`.

[source,console]
----
$ cat /tmp/id_rsa.john.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4L
ojG6rs6hPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4k
Yjh6541NYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9Ez
Sdfd8AcCIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myiv
O7TCUSBdLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPq
dAv8JggJICUvax2T9va5 gsg-keypair
----

Just append the public keys to the `git` user's `authorized_keys` file in their `.ssh` directory.

[source,console]
----
$ cat /tmp/id_rsa.john.pub >> ~/.ssh/authorized_keys
$ cat /tmp/id_rsa.josie.pub >> ~/.ssh/authorized_keys
$ cat /tmp/id_rsa.jessica.pub >> ~/.ssh/authorized_keys
----

Now, set up an empty repository by running `git init --bare`, which initializes the repository
without a working directory.(((git commands, init, bare)))

[source,console]
----
$ cd /srv/git
$ mkdir project.git
$ cd project.git
$ git init --bare
Initialized empty Git repository in /srv/git/project.git/
----

Then, one of your developers (`John`) can push the first version of his project into the new repository
by adding it as a remote and pushing from his local Git repository.
For example, let's use `gitserver` as the DNS hostname of the server on which you've set up your `git` user and repository.
Run the following commands pretty much as is (assuming `myproject` is an existing directory containing project files):

[source,console]
----
# on John's computer
$ cd myproject
$ git init
$ git add .
$ git commit -m 'Initial commit'
$ git remote add origin git@gitserver:/srv/git/project.git
$ git push origin master
----

At this point, the other developers can clone the new repository and push changes back.

[source,console]
----
$ git clone git@gitserver:/srv/git/project.git
$ cd project
$ vim README
$ git commit -am 'Fix for README file'
$ git push origin master
----

With this method, you can quickly get a read/write Git server up and running for the developers whose SSH keys you added.

You should also note that currently all these developers have shell access into the server as the `git` user.
To prevent that, change the `git` user's shell entry in the `passwd` file
to a limited shell called `git-shell` that comes with Git.
To do this, first add `git-shell` to `/etc/shells` if it's not already there.

[source,console]
----
$ cat /etc/shells   # see if git-shell is already in there. If not...
$ which git-shell   # make sure git-shell is installed on your system.
$ sudo -e /etc/shells  # and add the path to git-shell from last command
----

Now change the `git` user's default shell by running `chsh git`.

[source,console]
----
$ sudo chsh git -s $(which git-shell)
----

The `git` user can now only use the SSH protocol to push and pull Git repositories and can't login to the machine.
If they try, they see a login rejection like

[source,console]
----
$ ssh git@gitserver
fatal: Interactive git shell is not enabled.
hint: ~/git-shell-commands should exist and have read and execute access.
Connection to gitserver closed.
----

At this point, users are still able to use SSH port forwarding to access any host the git server is able to reach.
To prevent that, edit `authorized_keys` and prepend the following options to each key you'd like to restrict:

[source,console]
----
no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty
----

The result should look like

[source,console]
----
$ cat ~/.ssh/authorized_keys
no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa
AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4LojG6rs6h
PB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4kYjh6541N
YsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9EzSdfd8AcC
IicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myivO7TCUSBd
LQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPqdAv8JggJ
ICUvax2T9va5 gsg-keypair

no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa
AAAAB3NzaC1yc2EAAAADAQABAAABAQDEwENNMomTboYI+LJieaAY16qiXiH3wuvENhBG...
----

Now Git commands still work just fine but users won't be able to get a shell.
As the output states, you can also set up a directory in the `git` user's home directory that customizes the `git-shell` command.
For instance, you can restrict the Git commands that the server will accept or you can customize the message that users see if they try to SSH in.
Run `git help shell` for more information on customizing the shell.(((git commands, help)))
