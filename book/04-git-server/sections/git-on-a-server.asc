[[_getting_git_on_a_server]]
=== Getting Git on a Server

Now we cover setting up Git on a server.

[NOTE]
====
Here we demonstrate the steps needed to do a basic installation on a Linux-based server.
It's also possible to run a Git service on macOS or Windows servers.
Setting up an actual production Git service can differ in the security measures you must incorporate,
or in what operating system tools are available, but hopefully this gives a general idea of what's involved.
====

In order to initially set up a Git server, place the content of an existing repository into a new bare
repository -- a repository that doesn't contain a working directory.
This is generally straightforward to do.
In order to clone your repository to create a new bare repository, run `git clone --bare`.(((git commands, clone, bare)))
By convention, a bare repository directory name ends in `.git`.

[source,console]
----
$ git clone --bare my_project my_project.git
Cloning into bare repository 'my_project.git'...
done.
----

You now have a copy of the my_project Git repository in `my_project.git`.

This is roughly equivalent to

[source,console]
----
$ cp -Rf my_project/.git my_project.git
----

There are a couple of minor differences between the two methods but for your purposes, they do the same thing.

[[_bare_repo]]
==== Putting the Bare Repository on a Server

Now that you have a bare repository, all you need to do is put it on a server and set up the access protocols.
Let's say you've set up a server called `git.example.com` that you have SSH access to,
and you want to store all your Git repositories under `/opt/git`.
Assuming that `/opt/git` exists on that server, set up your new repository by copying your bare repository to the server.

[source,console]
----
$ scp -r my_project.git user@git.example.com:/srv/git
----

At this point, users who have SSH access to the server, and who have read-access to the `/srv/git` directory,
can clone your repository by running

[source,console]
----
$ git clone user@git.example.com:/srv/git/my_project.git
----

If a user can SSH into a server and has write access to the `/srv/git/my_project.git` directory,
they also automatically have push access.

Git automatically adds group write permissions to a repository if you run
`git init --bare --shared`. Note that running this command doesn't destroy any commits, refs, etc.. (((git commands, init, bare)))

[source,console]
----
$ ssh user@git.example.com
$ cd /srv/git/my_project.git
$ git init --bare --shared
----

Now you're ready to collaborate.

It's important to note that this is literally all you need to do to run a usable Git server to which several
people have access -- just add SSH-able accounts on a server, and stick a bare repository somewhere that all
those users have read and write access to. You're ready to go -- nothing else is needed.

The next few sections cover how to configure more sophisticated setups.
This discussion includes how to avoid creating individual user accounts, how to add public read access to repositories,
set up web UIs, and more. However, keep in mind collaborating with a couple of people on a private project only
requires an SSH server and a bare repository.

==== Small Setups

If you're a small outfit just trying out Git with only a few developers, things can be simple.
One of the most complicated aspects of setting up a Git server is user management.
Making some repositories read-only for certain users and read/write for others can be a bit more difficult to arrange.

===== SSH Access

(((serving repositories, SSH)))
If you already have a server all your developers can SSH into, it's generally easiest to set up your first
repository there, because you have to do almost no work (as we covered in the last section).
For more complex access controls to your repositories, use normal filesystem permissions provided by your
server's operating system. (((serving repositories, SSH)))

To place your repositories on a server that doesn't have accounts for everyone who should have write access,
then you must set up SSH access for them. We assume that you have a server for this that already has an SSH
daemon running, and you've logged in to it using SSH.

There are several ways to give access to everyone on your team.
The first is to set up accounts for everybody, which is straightforward but can be cumbersome.
You may not want to run `adduser` and set temporary passwords for every user.

A second method is to create a single `git` user on the server, ask every user who needs write access to send
you their SSH public key, and add that key to the `git` user's `~/.ssh/authorized_keys` file.
At that point, everyone is able to access that machine as the `git` user.
This doesn't affect commits in any way -- the SSH user you connect as doesn't affect the commits you've recorded.

Another way to do it is to have your SSH server authenticate from an LDAP server or some other centralized
authentication source that you may already have set up. As long as each user can login to the server,
any SSH authentication mechanism you can think of should work.
