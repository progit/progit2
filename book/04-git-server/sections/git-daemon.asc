=== Git Daemon

(((serving repositories, git protocol)))
Next we set up a daemon serving repositories using the `Git` protocol. This is a common choice for fast,
unauthenticated access to Git repositories. If you're running this on a server outside your firewall,
it should only be used for projects that are intended to be publicly visible to the world.
If the server you're running it on is inside your firewall, you might use it for projects that a large number of
people or computers (continuous integration or build servers) have read-only access to, when you don't want to
add individual SSH keys.

In any case, the Git protocol is relatively easy to set up. Basically, run(((git commands, daemon)))

[source,console]
----
$ git daemon --reuseaddr --base-path=/srv/git/ /srv/git/
----

`--reuseaddr` allows the server to restart without waiting for old connections to time out,
`--base-path` allows cloning projects without specifying the entire path, and the path at the end tells the Git
daemon where to look for repositories to export.

If you're running a firewall, you also need to open a hole for port 9418 to the box you're setting this up on.

You can daemonize this process a number of ways, depending on the operating system you're running.
Since `systemd` is the most common init system among modern Linux distributions, you can use it for that purpose.
Simply place a file in `/etc/systemd/system/git-daemon.service` containing

[source,console]
----
[Unit]
Description=Start Git Daemon

[Service]
ExecStart=/usr/bin/git daemon --reuseaddr --base-path=/srv/git/ /srv/git/

Restart=always
RestartSec=500ms

StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=git-daemon

User=git
Group=git

[Install]
WantedBy=multi-user.target
----

You might have noticed that the Git daemon is started with `git` as both the user and group.
Modify it to fit your needs and make sure the provided user exists on the server.
Also, check that the Git binary is indeed located at `/usr/bin/git` and change the path if necessary.

Finally, run `systemctl enable git-daemon` to automatically start the service when the server is booted.
The service can be started or stopped, respectively, by running `systemctl start git-daemon` or `systemctl stop git-daemon`.

On other systems, you may want to use `xinetd`, a script in your `sysvinit` system, or something else -- anything
that can daemonize `git` somehow.

Next, tell Git which repositories to allow unauthenticated Git server-based access to.
Do this in each repository by creating a file named `git-daemon-export-ok`.

[source,console]
----
$ cd /path/to/project.git
$ touch git-daemon-export-ok
----

The presence of that file tells Git that it's OK to serve this project without authentication.
