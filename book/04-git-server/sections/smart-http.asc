=== Smart HTTP

(((serving repositories, HTTP)))
We now have authenticated access through SSH and unauthenticated access through `git://`,
but Smart HTTP can do both at the same time.
Setting it up is basically just enabling a CGI script that's provided with Git on the server called `git-http-backend`.(((git commands, "http-backend")))
This script reads the path and HTTP headers sent by `git fetch` or `git push` to a web server and determines
which HTTP-based protocol the client can use.
If the script recognizes a smart client, it communicates smartly with it, otherwise it falls back to the dumb
behavior (so it's backward compatible for reads with older clients).

Let's walk through a very basic setup. We set this up with Apache running the CGI script.
If you don't have Apache set up, you can do so on an Ubuntu Linux box by running something like(((Apache)))

[source,console]
----
$ sudo apt-get install apache2 apache2-utils
$ a2enmod cgi alias env
----

This also enables the `mod_cgi`, `mod_alias`, and `mod_env` modules, which are all needed for Smart HTTP to work properly.

Also, set the Unix user group of the `/srv/git` directory, and any subdirectories, to `www-data` so your web
server has read and write access the repositories.

[source,console]
----
$ chgrp -R www-data /srv/git
----

Next, modify the Apache configuration file so that Apache runs `git-http-backend` as the handler for anything
coming into the `/git` directory.

[source,console]
----
SetEnv GIT_PROJECT_ROOT /srv/git
SetEnv GIT_HTTP_EXPORT_ALL
ScriptAlias /git/ /usr/lib/git-core/git-http-backend/
----

If you leave out the `GIT_HTTP_EXPORT_ALL` environment variable, then Apache only serves the repositories
with the `git-daemon-export-ok` file in them to unauthenticated clients, just like the Git daemon did.

Finally tell Apache to allow requests to `git-http-backend` and to require writes be authenticated with an Auth block like

[source,console]
----
<Files "git-http-backend">
    AuthType Basic
    AuthName "Git Access"
    AuthUserFile /srv/git/.htpasswd
    Require expr !(%{QUERY_STRING} -strmatch '*service=git-receive-pack*' || %{REQUEST_URI} =~ m#/git-receive-pack$#)
    Require valid-user
</Files>
----

That requires you to create a `.htpasswd` file containing the passwords of all the valid users.
Here's an example of adding a "schacon" user.

[source,console]
----
$ htpasswd -c /srv/git/.htpasswd schacon
----

There are tons of ways Apache can authenticate users. You have to choose one of them.
This is just the simplest example we could come up with. You also almost certainly want to set this up over SSL
so all the transferred data is encrypted.

We don't want to go too far down the rabbit hole of Apache configuration, since you might be using a
different web server or have different authentication needs.
The idea is that Git comes with a CGI script called `git-http-backend` that, when invoked,
does all the negotiation to send and receive data over HTTP. It doesn't implement any authentication itself,
but that can easily be controlled by the web server that invokes it.
You can do this with nearly any CGI-capable web server, so go with the one that you know best.

[NOTE]
====
For more information on configuring authentication in Apache, check out the Apache docs at https://httpd.apache.org/docs/current/howto/auth.html[^].
====
