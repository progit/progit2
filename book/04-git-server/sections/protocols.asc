=== The Protocols

Git supports four different protocols for transferring data: Local, HTTP, Secure Shell (SSH), and Git.
Here we discuss what they are and when you'd want (or not want) to use them.

==== Local Protocol

(((protocols, local)))
The most basic is the _Local_ protocol, in which the repository you want to access is
on a local disk or on a remote filesystem that's mounted on a local directory.
The local disk approach isn't a very good idea because all your repositories would reside on the same computer,
making a catastrophic loss much more likely and painful.

If you have a repository on a remote filesystem mounted locally, then you can clone, push to, and pull from it the
same way you would if it were physically on a local disk. To clone a local repository or to add one as a remote to an
existing project, use the path to the repository as the URL. For example, to clone a local repository, run

[source,console]
----
$ git clone /srv/git/project.git
----

Or

[source,console]
----
$ git clone file:///srv/git/project.git
----

Git does something different if you specify `file://` at the beginning of the repository path.
If you just specify the path, Git tries to use hardlinks or directly copy the files it needs.
If you specify `file://`, Git uses the same technique that it normally uses to transfer data over a network,
which is generally a lot less efficient. The main reason to specify `file://` is when you want a
clean copy of the repository with extraneous references or objects left out -- generally after an import from
another VCS or something similar (see <<_git_internals>> for maintenance tasks). We use simple paths because
this is almost always faster.

To add a local repository as a remote to an existing Git project, run

[source,console]
----
$ git remote add local_proj /srv/git/project.git
----

Then, push to and pull from that remote as though it were on the network.

===== The Pros

The pros of local repositories are that they're simple and use existing file permissions.
If you already have a shared filesystem your whole team can access, setting up a local repository is very easy.
Stick the bare repository somewhere everyone can access and set the read/write permissions as you would for any
other shared directory. We discuss how to export a bare repository for this purpose in
<<ch04-git-on-the-server#_getting_git_on_a_server>>.

Local repositories are also a nice way for quickly grabbing work from someone else's repository.
If you and a co-worker are working on the same project and they want you to check something out,
running a command like `git pull /home/john/project` is often easier than the co-worker pushing
to a remote server and asking you to pull from there.

===== The Cons

The largest con of this method is that shared access is generally more difficult to set up and reach from multiple
locations than the other Git network access protocols. To access a remote filesystem on your laptop from home,
you have to mount the remote disk, which can be difficult and slow compared to other network-based Git access protocols.

A local repository is fast only if you have fast access to the repository.
Accessing a repository mounted via NFS is often slower than accessing the same repository over SSH.

Finally, this protocol doesn't protect the repository against accidental damage. Every user has full access
to the repository directory, with nothing preventing them from changing or removing critical files
and corrupting the repository.

==== The HTTP Protocols

Git can communicate over HTTP in two ways.
Prior to Git 1.6.6 the only way was a very simple and generally read-only method.
In version 1.6.6 a new smarter HTTP-based protocol was introduced that allows Git to intelligently negotiate data transfer
in a manner similar to what it does over SSH. In the last few years, this new protocol has become very
popular since it's simpler for the user and smarter about how it communicates. The newer way is often referred to as
Smart HTTP and the old way as Dumb HTTP. We cover the newer Smart HTTP protocol first.

===== Smart HTTP

(((protocols, smart HTTP)))
The Smart HTTP protocol is very similar to the SSH or Git protocols but runs over standard HTTP/S and can
use HTTP authentication. It's often easier to use than something like SSH, since you can use things like
username/password basic authentication rather than having to set up SSH keys.

It's probably become the most popular Git access protocol, since it can be set up to both serve Git repositories
anonymously (like the `git://` protocol), and can also be used for pushing, with appropriate authentication and
encryption, like the SSH protocol. Instead of having to use different URLs for pushing and pulling, you now use
the same URL for both. If you try to push and the repository requires authentication (which it normally should),
the server can prompt for a username and password. The same goes for read access.

In fact, for services like GitHub, the URL you use to view the repository (for example,
`https://github.com/schacon/simplegit[]`) is the same URL you use to clone from and, if you have access, to push to.

===== Dumb HTTP

(((protocols, dumb HTTP)))
If the server doesn't respond showing it supports Smart HTTP, the Git client falls back to the simpler Dumb HTTP protocol.
The Dumb protocol serves the files in the Git repository like any other files on the server.
The beauty of the Dumb HTTP protocol is that it's so simple to set up.
Basically, all you have to do is put a bare Git repository under your web server's document root,
set up a specific `post-update` hook, and you're done (See <<ch08-customizing-git#_git_hooks>>).
At that point, anyone who can access the web server can also clone your repository.

To configure read access to your repository over Dumb HTTP, assuming a standard Apache server, run

[source,console]
----
$ cd /var/www/htdocs/
$ git clone --bare /path/to/git_project gitproject.git
$ cd gitproject.git
$ mv hooks/post-update.sample hooks/post-update
$ chmod a+x hooks/post-update
----

That's it.(((hooks, post-update)))
The `post-update` hook that comes with Git by default runs the appropriate command (`e.g. git update-server-info`)
to make fetching and cloning over HTTP work properly. Then, anybody can clone the repository by running

[source,console]
----
$ git clone https://example.com/gitproject.git
----

In this case, we're using the `/var/www/htdocs` path that's the default document root for Apache,
but you can use any web server that can serve static files -- just put the bare repository in its default
document root location.

Generally you'd either choose to run a read/write web server using the Smart HTTP protocol or simply have the
Git repository accessible read-only using the Dumb HTTP protocol. There's no reason to run both protocols.

===== The Pros

We concentrate on the pros of the Smart version of the HTTP protocol.

Having a single web server for all types of access and having it prompt only
when authentication is needed makes things very simple. Being able to authenticate with a username and password
is also a big advantage compared to SSH, since users don't have to generate SSH keys and upload their public key
to the server before accessing it. For less sophisticated users, or users in environments where SSH is less common,
this is a major advantage.  It's also a very fast and efficient protocol, similar to SSH.

You can also serve your repositories read-only over HTTPS, which means the content of your repositories is encrypted
when it's transferred over the network. You can go so far as to force clients to use specific signed SSL certificates.

Another nice thing is that HTTP and HTTP/S are such commonly used protocols that corporate firewalls often allow them.
===== The Cons

Git over HTTP/S can be a little more tricky to set up compared to SSH.
Other than that, there's very little advantage that other protocols have over the Smart HTTP protocol for serving Git.

If you're using HTTP for authenticated pushing, providing your credentials is sometimes more complicated than using
SSH keys. There are, however, several credential caching tools you can use, including Keychain on OSX and Credential
Manager on Windows, to make this less painful. Read <<ch07-git-tools#_credential_caching>> to see how to set up secure
HTTP password caching.

==== The SSH Protocol

(((protocols, SSH)))
A common transport protocol for Git when self-hosting is SSH.
This is because, like HTTP(S), incoming SSH access is already allowed in most places -- and if it isn't,
it's easy to add. SSH is also an authenticated network protocol.

To clone a Git repository over SSH, specify an ssh:// URL.

[source,console]
----
$ git clone ssh://[user@]server/project.git
----

Or use the shorter scp-like syntax.

[source,console]
----
$ git clone [user@]server:project.git
----

You can also leave out the username, in which case Git uses your current username.

===== The Pros

The pros of using SSH are many.
First, SSH is relatively easy to set up -- SSH daemons are commonplace, many network admins have experience with them, and many OS distributions are set up with them or have tools to manage them.
Next, access over SSH is secure -- all data transfer is encrypted and authenticated.
Last, like the HTTPS, Git and Local protocols, SSH is efficient, making the data as compact as possible before transferring it.

===== The Cons

The only negative of SSH is that it can't provide anonymous access to your repository.
People must be able to login to your machine over SSH to access a repository, even in read-only mode,
which doesn't make SSH access conducive to open source projects. If you're using it only within your corporate network,
SSH may be the only protocol you need to deal with. To allow anonymous read-only access to your projects and also use
SSH, you have to set up SSH for pushing but something else for pulling.

==== The Git Protocol

(((protocols, git)))
Finally, we have the Git protocol.
This is implemented in a special daemon that comes with Git. The daemon listens on a dedicated port (9418)
that provides a service similar to SSH, but with absolutely no authentication. For a repository to be served using the
Git protocol, you must create the `git-daemon-export-ok` file -- the daemon doesn't serve a repository without it.
Either a Git repository is available for everyone to clone or it's unavailable for everyone.
This means that there's generally no pushing using this protocol. You can enable push access, but given its lack
of authentication, anyone on the internet who finds your project's URL could push to your project.
This is rare.

===== The Pros

The Git protocol is often the fastest network transfer protocol available for sharing Git repositories.
If you're serving a lot of traffic for a public project or serving a very large project that doesn't require
user authentication for read access, it's likely that you want to set up a Git daemon.
It uses the same data-transfer mechanism as the SSH protocol but without the encryption and authentication overhead.

===== The Cons

Due to the lack of encryption, cloning over `git://` might lead to an arbitrary code execution vulnerability, and should therefore be avoided unless you know what you're doing.

* If you run `git clone git://example.com/project.git`, an attacker who controls your router can modify the repository you just cloned, inserting malicious code into it.
  If you then compile/run the code you just cloned, you'll execute the malicious code.
  Running `git clone http://example.com/project.git` should be avoided for the same reason.
* Running `git clone https://example.com/project.git` does not suffer from the same problem (unless the attacker can provide a TLS certificate for example.com).
  Running `git clone git@example.com:project.git` only suffers from this problem if you accept an incorrect SSH key fingerprint.

It's also the most difficult protocol to set up.
It must run its own daemon, which requires `xinetd` or `systemd` configuration or the like, which isn't always a walk in the park.
It also requires firewalls to allow access to port 9418, which isn't a standard port that corporate firewalls usually allow.
