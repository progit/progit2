[[_generate_ssh_key]]
=== Generating Your SSH Public Key

(((SSH keys)))
Many Git server users authenticate using an SSH public key
which they must generate if they don't already have one.
This process is similar across all operating systems.
First, check to make sure you don't already have a public key.
By default, SSH keys are stored in a user's `~/.ssh` directory.
You can easily check to see if you have a public key already by going to that directory and listing the files.

[source,console]
----
$ cd ~/.ssh
$ ls
authorized_keys2  id_dsa       known_hosts
config            id_dsa.pub
----

You're looking for a pair of files named something like `id_dsa` or `id_rsa` and a matching file with a `.pub` extension.
The `.pub` file is your public key, and the other file is your corresponding private key.
If you don't have these files (or you don't even have a `.ssh` directory), create them by running `ssh-keygen`, which is provided with the SSH package on Linux/macOS systems, and comes with Git for Windows:

[source,console]
----
$ ssh-keygen -o
Generating public/private rsa key pair.
Enter file in which to save the key (/home/schacon/.ssh/id_rsa):
Created directory '/home/schacon/.ssh'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/schacon/.ssh/id_rsa.
Your public key has been saved in /home/schacon/.ssh/id_rsa.pub.
The key fingerprint is:
d0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 schacon@mylaptop.local
----

It first confirms where to save the private key (`/home/schacon/.ssh/id_rsa`), and then it asks twice
for a passphrase, which you can leave empty if you don't want to enter a passphrase when you use the key.
However, if you do use a passphrase, make sure to add the `-o` flag. This saves the private key in a format
that's more resistant to brute-force cracking than the default format.
You can also use the `ssh-agent` tool to prevent having to enter the password each time.
Your public key is saved in the same directory as your private key.

Now, each user has to copy their public key and email it to whoever administers the Git server.

A public key looks something like

[source,console]
----
$ cat ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU
GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3
Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA
t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En
mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx
NrRFi9wrf+M7Q== schacon@mylaptop.local
----

For a more in-depth tutorial on creating SSH keys on multiple operating systems, see the GitHub guide on SSH keys at https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent[^].
