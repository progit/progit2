[[ch04-git-on-the-server]]
== Git on the Server

(((serving repositories)))
At this point, you should be able to use Git for most daily tasks.
However, using Git for collaboration requires a remote Git repository located
on a central server that all collaborators agree to use.
Although you can technically push changes to and pull changes from collaborator's repositories,
assuming you're granted access, this can easily confuse the owner of the repository.
Therefore, the preferred method for collaborating is to set up a central repository that all collaborators
have access to, and push to and pull from that.
Furthermore, since your collaborators must be able to access the central repository at all times,
it's worth the effort to put energy into creating a more reliable server to use to house the central repository.

Remember that the decision to treat one repository as the central repository is merely
a convention. There are no technical differences between the central repository and those
on collaborators' workstations.

Running Git on a server is fairly straightforward.
First, choose which access protocols you want your server to support.
The first section of this chapter covers the available protocols and their pros and cons.
The next sections explain typical setups for using those protocols.
Last, we go over a few hosted options, if you don't mind hosting your code on someone else's server and don't
want to go through the hassle of setting up and maintaining your own server.

If you have no interest in running your own server, skip to the last section of the chapter for options for
setting up a hosted account and then move on to the next chapter, where we discuss the various ins and outs of
working in a distributed version control environment.

A remote repository is generally a _bare repository_ -- a Git repository without a working directory.
Because the repository is only used for collaborating, there's no reason to have a
working directory on the remote server's disk.
In the simplest terms, a bare repository is the content of a project's `.git` directory and nothing else.

include::book/04-git-server/sections/protocols.asc[]

include::book/04-git-server/sections/git-on-a-server.asc[]

include::book/04-git-server/sections/generating-ssh-key.asc[]

include::book/04-git-server/sections/setting-up-server.asc[]

include::book/04-git-server/sections/git-daemon.asc[]

include::book/04-git-server/sections/smart-http.asc[]

include::book/04-git-server/sections/gitweb.asc[]

include::book/04-git-server/sections/gitlab.asc[]

include::book/04-git-server/sections/hosted.asc[]

=== Summary

You have several options to get a remote Git repository up and running to collaborate with others.

Running your own server gives you complete control and allows you to run the server inside your own firewall,
but such a server generally requires a fair amount of time to set up and maintain.
If you place your data on a hosted server, it's easy to set up and maintain. However, you have to be willing to
keep your code on someone else's servers, and some organizations don't allow that.

It should be fairly straightforward to determine which solution or combination of solutions is appropriate
for you and your organization.
